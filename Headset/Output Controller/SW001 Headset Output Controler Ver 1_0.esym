F N "MAIN" 0 54 ""
D G "__PCD__" 0 258 ""5.107""
D G "__DEVICE__" 0 258 "8206"
D G "__DATE__" 0 258 ""24-Jul-23""
D G "__TIME__" 0 258 ""11:51:55""
D G "_UNICODE" 0 258 ""?""
D G "__EVAL" 0 258 ""?"" "Title: SW001 Headset Output Controller SW Ver 1_0"
c L "set_tris_a" 2 1 21 "FUNCTION"
F N "set_tris_a" 2 63 ""
V L "value" 2 63 "int16" `55 
F B "set_tris_a" 2 63 "void(int16 value)" `54 
F N "set_tris_b" 2 64 ""
V L "value" 2 64 "int16" `57 
F B "set_tris_b" 2 64 "void(int16 value)" `56 
F N "set_tris_c" 2 65 ""
V L "value" 2 65 "int16" `59 
F B "set_tris_c" 2 65 "void(int16 value)" `58 
F N "set_open_drain_a" 2 66 ""
V L "value" 2 66 "int16" `61 
F B "set_open_drain_a" 2 66 "void(int16 value)" `60 
F N "set_open_drain_b" 2 67 ""
V L "value" 2 67 "int16" `63 
F B "set_open_drain_b" 2 67 "void(int16 value)" `62 
F N "get_tris_a" 2 68 ""
F B "get_tris_a" 2 68 "int16()" `64 
F N "get_tris_b" 2 69 ""
F B "get_tris_b" 2 69 "int16()" `65 
F N "get_tris_c" 2 70 ""
F B "get_tris_c" 2 70 "int16()" `66 
F N "output_a" 2 71 ""
V L "value" 2 71 "int16" `68 
F B "output_a" 2 71 "void(int16 value)" `67 
F N "output_b" 2 72 ""
V L "value" 2 72 "int16" `70 
F B "output_b" 2 72 "void(int16 value)" `69 
F N "output_c" 2 73 ""
V L "value" 2 73 "int16" `72 
F B "output_c" 2 73 "void(int16 value)" `71 
F N "input_a" 2 74 ""
F B "input_a" 2 74 "int16()" `73 
F N "input_b" 2 75 ""
F B "input_b" 2 75 "int16()" `74 
F N "input_c" 2 76 ""
F B "input_c" 2 76 "int16()" `75 
F N "input_change_a" 2 77 ""
F B "input_change_a" 2 77 "sint16()" `76 
F N "input_change_b" 2 78 ""
F B "input_change_b" 2 78 "sint16()" `77 
F N "input_change_c" 2 79 ""
F B "input_change_c" 2 79 "sint16()" `78 
F N "set_pullup" 2 80 ""
V L "state" 2 80 "int8" `80 
F B "set_pullup" 2 80 "void(int8 state)" `79 
F N "set_pullup" 2 81 ""
V L "state" 2 81 "int8" `82 
V L "pin" 2 81 "int16" `83 
F B "set_pullup" 2 81 "void(int8 state,int16 pin)" `81 
F N "set_pulldown" 2 82 ""
V L "state" 2 82 "int8" `85 
F B "set_pulldown" 2 82 "void(int8 state)" `84 
F N "set_pulldown" 2 83 ""
V L "state" 2 83 "int8" `87 
V L "pin" 2 83 "int16" `88 
F B "set_pulldown" 2 83 "void(int8 state,int16 pin)" `86 
F N "input" 2 84 ""
V L "pin" 2 84 "int16" `90 
F B "input" 2 84 "int8(int16 pin)" `89 
F N "input_state" 2 85 ""
V L "pin" 2 85 "int16" `92 
F B "input_state" 2 85 "int8(int16 pin)" `91 
F N "output_low" 2 86 ""
V L "pin" 2 86 "int16" `94 
F B "output_low" 2 86 "void(int16 pin)" `93 
F N "output_high" 2 87 ""
V L "pin" 2 87 "int16" `96 
F B "output_high" 2 87 "void(int16 pin)" `95 
F N "output_toggle" 2 88 ""
V L "pin" 2 88 "int16" `98 
F B "output_toggle" 2 88 "void(int16 pin)" `97 
F N "output_bit" 2 89 ""
V L "pin" 2 89 "int16" `100 
V L "level" 2 89 "int8" `101 
F B "output_bit" 2 89 "void(int16 pin,int8 level)" `99 
F N "output_float" 2 90 ""
V L "pin" 2 90 "int16" `103 
F B "output_float" 2 90 "void(int16 pin)" `102 
F N "output_drive" 2 91 ""
V L "pin" 2 91 "int16" `105 
F B "output_drive" 2 91 "void(int16 pin)" `104  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 94 "5648"
D G "PIN_A1" 2 95 "5649"
D G "PIN_A2" 2 96 "5650"
D G "PIN_A3" 2 97 "5651"
D G "PIN_A4" 2 98 "5652"
D G "PIN_B0" 2 100 "5712"
D G "PIN_B1" 2 101 "5713"
D G "PIN_B2" 2 102 "5714"
D G "PIN_B3" 2 103 "5715"
D G "PIN_B4" 2 104 "5716"
D G "PIN_B5" 2 105 "5717"
D G "PIN_B6" 2 106 "5718"
D G "PIN_B7" 2 107 "5719"
D G "PIN_B8" 2 108 "5720"
D G "PIN_B9" 2 109 "5721"
D G "PIN_B10" 2 110 "5722"
D G "PIN_B11" 2 111 "5723"
D G "PIN_B12" 2 112 "5724"
D G "PIN_B13" 2 113 "5725"
D G "PIN_B14" 2 114 "5726"
D G "PIN_B15" 2 115 "5727"
D G "PIN_C0" 2 117 "5776"
D G "PIN_C1" 2 118 "5777"
D G "PIN_C2" 2 119 "5778"
D G "PIN_C3" 2 120 "5779"
D G "PIN_C4" 2 121 "5780"
D G "PIN_C5" 2 122 "5781"
D G "PIN_C6" 2 123 "5782"
D G "PIN_C7" 2 124 "5783"
D G "PIN_C8" 2 125 "5784"
D G "PIN_C9" 2 126 "5785"
D G "FALSE" 2 129 "0"
D G "TRUE" 2 130 "1"
D G "BYTE" 2 132 "unsigned int8"
D G "BOOLEAN" 2 133 "int1"
D G "getc" 2 135 "getch"
D G "fgetc" 2 136 "getch"
D G "getchar" 2 137 "getch"
D G "putc" 2 138 "putchar"
D G "fputc" 2 139 "putchar"
D G "fgets" 2 140 "gets"
D G "fputs" 2 141 "puts"
c L "output_drive" 2 1 2 "FUNCTION"
F N "setup_uart" 2 145 ""
V L "baud" 2 145 "int32" `107 
F B "setup_uart" 2 145 "void(int32 baud)" `106 
F N "setup_uart" 2 146 ""
V L "baud" 2 146 "int32" `109 
V L "stream" 2 146 "int8" `110 
F B "setup_uart" 2 146 "void(int32 baud,int8 stream)" `108 
F N "setup_uart" 2 147 ""
V L "baud" 2 147 "int32" `112 
V L "stream" 2 147 "int8" `113 
V L "clock" 2 147 "int32" `114 
F B "setup_uart" 2 147 "void(int32 baud,int8 stream,int32 clock)" `111 
F N "set_uart_speed" 2 148 ""
V L "baud" 2 148 "int32" `116 
F B "set_uart_speed" 2 148 "void(int32 baud)" `115 
F N "set_uart_speed" 2 149 ""
V L "baud" 2 149 "int32" `118 
V L "stream" 2 149 "int8" `119 
F B "set_uart_speed" 2 149 "void(int32 baud,int8 stream)" `117 
F N "set_uart_speed" 2 150 ""
V L "baud" 2 150 "int32" `121 
V L "stream" 2 150 "int8" `122 
V L "clock" 2 150 "int32" `123 
F B "set_uart_speed" 2 150 "void(int32 baud,int8 stream,int32 clock)" `120  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 154 "2"
D G "UART_DATA" 2 155 "4"
D G "UART_AUTODETECT" 2 156 "8"
D G "UART_AUTODETECT_NOWAIT" 2 157 "9"
D G "UART_WAKEUP_ON_RDA" 2 158 "10"
D G "UART_SEND_BREAK" 2 159 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
F N "setup_wdt" 2 164 ""
V L "mode" 2 164 "int8" `125 
F B "setup_wdt" 2 164 "void(int8 mode)" `124 
F N "restart_wdt" 2 165 ""
F B "restart_wdt" 2 165 "void()" `126  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 2 167 "1"
D G "WDT_OFF" 2 168 "0"
D G "WDT_1MS" 2 170 "0x002"
D G "WDT_2MS" 2 171 "0x003"
D G "WDT_4MS" 2 172 "0x004"
D G "WDT_8MS" 2 173 "0x005"
D G "WDT_16MS" 2 174 "0x006"
D G "WDT_32MS" 2 175 "0x007"
D G "WDT_64MS" 2 176 "0x008"
D G "WDT_128MS" 2 177 "0x009"
D G "WDT_256MS" 2 178 "0x00A"
D G "WDT_512MS" 2 179 "0x00B"
D G "WDT_1S" 2 180 "0x00C"
D G "WDT_2S" 2 181 "0x00D"
D G "WDT_4S" 2 182 "0x00E"
D G "WDT_8S" 2 183 "0x00F"
D G "WDT_16S" 2 184 "0x010"
D G "WDT_33S" 2 185 "0x011"
D G "WDT_65S" 2 186 "0x030"
D G "WDT_131S" 2 187 "0x031"
c L "restart_wdt" 2 1 3 "FUNCTION"
F N "restart_cause" 2 192 ""
F B "restart_cause" 2 192 "int8()" `127 
F N "reset_cpu" 2 193 ""
F B "reset_cpu" 2 193 "void()" `128 
F N "sleep" 2 194 ""
F B "sleep" 2 194 "void()" `129 
F N "sleep" 2 195 ""
V L "mode" 2 195 "int8" `131 
F B "sleep" 2 195 "void(int8 mode)" `130  "Constants passed into RESTART_CAUSE() are:"
D G "RESTART_POWER_UP" 2 197 "0"
D G "RESTART_BROWNOUT" 2 198 "1"
D G "RESTART_WATCHDOG" 2 199 "4"
D G "RESTART_SOFTWARE" 2 200 "6"
D G "RESTART_MCLR" 2 201 "7"
D G "RESTART_ILLEGAL_OP" 2 202 "14"
D G "RESTART_TRAP_CONFLICT" 2 203 "15"
D G "SLEEP_FULL" 2 206 "0" "Default"
D G "SLEEP_IDLE" 2 207 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 2 "FUNCTION"
F N "setup_oscillator" 2 213 ""
V L "type" 2 213 "int8" `133 
V L "target" 2 213 "int32" `134 
F B "setup_oscillator" 2 213 "void(int8 type,int32 target)" `132 
F N "setup_oscillator" 2 214 ""
V L "type" 2 214 "int8" `136 
V L "target" 2 214 "int32" `137 
V L "source" 2 214 "int32" `138 
F B "setup_oscillator" 2 214 "void(int8 type,int32 target,int32 source)" `135  "Constants used in setup_oscillator() are:"
D G "OSC_INTERNAL" 2 216 "32"
D G "OSC_CRYSTAL" 2 217 "1"
D G "OSC_CLOCK" 2 218 "2"
D G "OSC_RC" 2 219 "3"
D G "OSC_SECONDARY" 2 220 "16"
c L "setup_oscillator" 2 1 4 "FUNCTION"
F N "setup_timer1" 2 226 ""
V L "mode" 2 226 "int16" `140 
F B "setup_timer1" 2 226 "void(int16 mode)" `139 
F N "setup_timer1" 2 227 ""
V L "mode" 2 227 "int16" `142 
V L "period" 2 227 "int16" `143 
F B "setup_timer1" 2 227 "void(int16 mode,int16 period)" `141 
F N "get_timer1" 2 228 ""
F B "get_timer1" 2 228 "int16()" `144 
F N "set_timer1" 2 229 ""
V L "value" 2 229 "int16" `146 
F B "set_timer1" 2 229 "void(int16 value)" `145 
F N "setup_timer2" 2 230 ""
V L "mode" 2 230 "int16" `148 
F B "setup_timer2" 2 230 "void(int16 mode)" `147 
F N "setup_timer2" 2 231 ""
V L "mode" 2 231 "int16" `150 
V L "period" 2 231 "int16" `151 
F B "setup_timer2" 2 231 "void(int16 mode,int16 period)" `149 
F N "get_timer2" 2 232 ""
F B "get_timer2" 2 232 "int16()" `152 
F N "set_timer2" 2 233 ""
V L "value" 2 233 "int16" `154 
F B "set_timer2" 2 233 "void(int16 value)" `153 
F N "setup_timer3" 2 234 ""
V L "mode" 2 234 "int16" `156 
F B "setup_timer3" 2 234 "void(int16 mode)" `155 
F N "setup_timer3" 2 235 ""
V L "mode" 2 235 "int16" `158 
V L "period" 2 235 "int16" `159 
F B "setup_timer3" 2 235 "void(int16 mode,int16 period)" `157 
F N "get_timer3" 2 236 ""
F B "get_timer3" 2 236 "int16()" `160 
F N "set_timer3" 2 237 ""
V L "value" 2 237 "int16" `162 
F B "set_timer3" 2 237 "void(int16 value)" `161 
F N "get_timer23" 2 238 ""
F B "get_timer23" 2 238 "int32()" `163 
F N "set_timer23" 2 239 ""
V L "value" 2 239 "int32" `165 
F B "set_timer23" 2 239 "void(int32 value)" `164 
F N "setup_timer4" 2 240 ""
V L "mode" 2 240 "int16" `167 
F B "setup_timer4" 2 240 "void(int16 mode)" `166 
F N "setup_timer4" 2 241 ""
V L "mode" 2 241 "int16" `169 
V L "period" 2 241 "int16" `170 
F B "setup_timer4" 2 241 "void(int16 mode,int16 period)" `168 
F N "get_timer4" 2 242 ""
F B "get_timer4" 2 242 "int16()" `171 
F N "set_timer4" 2 243 ""
V L "value" 2 243 "int16" `173 
F B "set_timer4" 2 243 "void(int16 value)" `172 
F N "setup_timer5" 2 244 ""
V L "mode" 2 244 "int16" `175 
F B "setup_timer5" 2 244 "void(int16 mode)" `174 
F N "setup_timer5" 2 245 ""
V L "mode" 2 245 "int16" `177 
V L "period" 2 245 "int16" `178 
F B "setup_timer5" 2 245 "void(int16 mode,int16 period)" `176 
F N "get_timer5" 2 246 ""
F B "get_timer5" 2 246 "int16()" `179 
F N "set_timer5" 2 247 ""
V L "value" 2 247 "int16" `181 
F B "set_timer5" 2 247 "void(int16 value)" `180 
F N "get_timer45" 2 248 ""
F B "get_timer45" 2 248 "int32()" `182 
F N "set_timer45" 2 249 ""
V L "value" 2 249 "int32" `184 
F B "set_timer45" 2 249 "void(int32 value)" `183  "Constants used for SETUP_TIMERx() are:"
D G "TMR_DISABLED" 2 252 "0x0000"
D G "TMR_INTERNAL" 2 253 "0x8000"
D G "TMR_EXTERNAL" 2 254 "0x8002"
D G "TMR_EXTERNAL_SYNC" 2 255 "0x8006" "This only applies to Timer1"
D G "TMR_EXTERNAL_RTC" 2 256 "0xC002" "This only applies to Timer1"
D G "TMR_DIV_BY_1" 2 259 "0x0000"
D G "TMR_DIV_BY_8" 2 260 "0x0010"
D G "TMR_DIV_BY_64" 2 261 "0x0020"
D G "TMR_DIV_BY_256" 2 262 "0x0030"
D G "TMR_HALT_IDLE" 2 264 "0x2000"
D G "TMR_CONTINUE_IDLE" 2 265 "0x0000"
D G "TMR_32_BIT" 2 267 "0x0008" "Only for even numbered timers"
D G "TMR_GATE" 2 268 "0x0040"
c L "set_timer45" 2 1 3 "FUNCTION"
F N "setup_capture" 2 273 ""
V L "module" 2 273 "int8" `186 
V L "mode" 2 273 "int16" `187 
F B "setup_capture" 2 273 "void(int8 module,int16 mode)" `185 
F N "get_capture" 2 274 ""
V L "module" 2 274 "int8" `189 
F B "get_capture" 2 274 "int16(int8 module)" `188 
F N "get_capture" 2 275 ""
V L "module" 2 275 "int8" `191 
V L "wait" 2 275 "int8" `192 
F B "get_capture" 2 275 "int16(int8 module,int8 wait)" `190  "Constants used for SETUP_CAPTURE() are:"
D G "CAPTURE_OFF" 2 277 "0x0000" "Capture OFF"
D G "CAPTURE_EE" 2 278 "0x0001" "Capture Every Edge"
D G "CAPTURE_FE" 2 279 "0x0002" "Capture Falling Edge"
D G "CAPTURE_RE" 2 280 "0x0003" "Capture Rising Edge"
D G "CAPTURE_DIV_4" 2 281 "0x0004" "Capture Every 4th Rising Edge"
D G "CAPTURE_DIV_16" 2 282 "0x0005" "Capture Every 16th Rising Edge"
D G "CAPTURE_INTERRUPT_ONLY" 2 283 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
D G "INTERRUPT_EVERY_CAPTURE" 2 286 "0x0000" "Interrupt on every capture event"
D G "INTERRUPT_SECOND_CAPTURE" 2 287 "0x0020" "Interrupt on every second capture event"
D G "INTERRUPT_THIRD_CAPTURE" 2 288 "0x0040" "Interrupt on every third capture event"
D G "INTERRUPT_FOURTH_CAPTURE" 2 289 "0x0060" "Interrupt on every fourth capture event"
D G "CAPTURE_TIMER2" 2 292 "0x0080" "On capture event Timer 2 is captured"
D G "CAPTURE_TIMER3" 2 293 "0x0000" "On capture event Timer 3 is captured"
D G "CAPTURE_HALT_IDLE" 2 296 "0x2000" "Capture module halts during idle mode"
D G "CAPTURE_CONTINUE_IDLE" 2 297 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 1 3 "FUNCTION"
F N "setup_compare" 2 302 ""
V L "module" 2 302 "int8" `194 
V L "mode" 2 302 "int16" `195 
F B "setup_compare" 2 302 "void(int8 module,int16 mode)" `193 
F N "set_pwm_duty" 2 303 ""
V L "module" 2 303 "int8" `197 
V L "duty" 2 303 "int16" `198 
F B "set_pwm_duty" 2 303 "void(int8 module,int16 duty)" `196 
F N "set_compare_time" 2 304 ""
V L "module" 2 304 "int8" `200 
V L "ocr" 2 304 "int16" `201 
F B "set_compare_time" 2 304 "void(int8 module,int16 ocr)" `199 
F N "set_compare_time" 2 305 ""
V L "module" 2 305 "int8" `203 
V L "ocr" 2 305 "int16" `204 
V L "ocrs" 2 305 "int16" `205 
F B "set_compare_time" 2 305 "void(int8 module,int16 ocr,int16 ocrs)" `202  "Constants used for SETUP_COMPARE() are:"
D G "COMPARE_OFF" 2 307 "0x0000" "Compare OFF"
D G "COMPARE_SET_ON_MATCH" 2 308 "0x0001" "Pin from low to high on match"
D G "COMPARE_CLR_ON_MATCH" 2 309 "0x0002" "Pin from high to low on match"
D G "COMPARE_TOGGLE" 2 310 "0x0003" "Pin will toggle on every match occurrence"
D G "COMPARE_SINGLE_PULSE" 2 311 "0x0004" "Pin will generate single pulse on first match"
D G "COMPARE_CONT_PULSE" 2 312 "0x0005" "Pin will pulse for every match"
D G "COMPARE_PWM" 2 313 "0x0006" "Compare operates as PWM with fault pin disabled"
D G "COMPARE_PWM_FAULT" 2 314 "0x0007" "Compare operates as PWM with fault pin enabled"
D G "COMPARE_TIMER2" 2 317 "0x0000" "Timer 2 is the base timer"
D G "COMPARE_TIMER3" 2 318 "0x0008" "Timer 3 is the base timer"
D G "COMPARE_HALT_IDLE" 2 321 "0x2000" "Compare module halts during idle mode"
D G "COMPARE_CONTINUE_IDLE" 2 322 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 1 3 "FUNCTION"
F N "setup_spi" 2 327 ""
V L "mode" 2 327 "int16" `207 
F B "setup_spi" 2 327 "void(int16 mode)" `206 
F N "spi_write" 2 328 ""
V L "data" 2 328 "int8" `209 
F B "spi_write" 2 328 "void(int8 data)" `208 
F N "spi_write" 2 329 ""
V L "wait" 2 329 "int8" `211 
V L "data" 2 329 "int8" `212 
F B "spi_write" 2 329 "void(int8 wait,int8 data)" `210 
F N "spi_write_16" 2 330 ""
V L "data" 2 330 "int16" `214 
F B "spi_write_16" 2 330 "void(int16 data)" `213 
F N "spi_write_16" 2 331 ""
V L "wait" 2 331 "int8" `216 
V L "data" 2 331 "int16" `217 
F B "spi_write_16" 2 331 "void(int8 wait,int16 data)" `215 
F N "spi_read" 2 332 ""
F B "spi_read" 2 332 "int8()" `218 
F N "spi_read" 2 333 ""
V L "data" 2 333 "int8" `220 
F B "spi_read" 2 333 "int8(int8 data)" `219 
F N "spi_read_16" 2 334 ""
F B "spi_read_16" 2 334 "int16()" `221 
F N "spi_read_16" 2 335 ""
V L "data" 2 335 "int16" `223 
F B "spi_read_16" 2 335 "int16(int16 data)" `222 
F N "spi_data_is_in" 2 336 ""
F B "spi_data_is_in" 2 336 "int8()" `224 
F N "setup_spi2" 2 337 ""
V L "mode" 2 337 "int16" `226 
F B "setup_spi2" 2 337 "void(int16 mode)" `225 
F N "spi_write2" 2 338 ""
V L "data" 2 338 "int8" `228 
F B "spi_write2" 2 338 "void(int8 data)" `227 
F N "spi_write2" 2 339 ""
V L "wait" 2 339 "int8" `230 
V L "data" 2 339 "int8" `231 
F B "spi_write2" 2 339 "void(int8 wait,int8 data)" `229 
F N "spi_write2_16" 2 340 ""
V L "data" 2 340 "int16" `233 
F B "spi_write2_16" 2 340 "void(int16 data)" `232 
F N "spi_write2_16" 2 341 ""
V L "wait" 2 341 "int8" `235 
V L "data" 2 341 "int16" `236 
F B "spi_write2_16" 2 341 "void(int8 wait,int16 data)" `234 
F N "spi_read2" 2 342 ""
F B "spi_read2" 2 342 "int8()" `237 
F N "spi_read2" 2 343 ""
V L "data" 2 343 "int8" `239 
F B "spi_read2" 2 343 "int8(int8 data)" `238 
F N "spi_read2_16" 2 344 ""
F B "spi_read2_16" 2 344 "int16()" `240 
F N "spi_read2_16" 2 345 ""
V L "data" 2 345 "int16" `242 
F B "spi_read2_16" 2 345 "int16(int16 data)" `241 
F N "spi_data_is_in2" 2 346 ""
F B "spi_data_is_in2" 2 346 "int8()" `243  "Constants used in SETUP_SPI() are:"
D G "SPI_MASTER" 2 349 "0x0020"
D G "SPI_SLAVE" 2 350 "0x0000"
D G "SPI_SCK_IDLE_HIGH" 2 352 "0x0040"
D G "SPI_SCK_IDLE_LOW" 2 353 "0x0000"
D G "SPI_XMIT_L_TO_H" 2 355 "0x0100"
D G "SPI_XMIT_H_TO_L" 2 356 "0x0000"
D G "SPI_MODE_16B" 2 358 "0x0400"
D G "SPI_MODE_8B" 2 359 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 361 "0x0200"
D G "SPI_SAMPLE_AT_MIDDLE" 2 362 "0x0000"
D G "SPI_SS_ENABLED" 2 364 "0x0000"
D G "SPI_SS_DISABLED" 2 365 "0x0080"
D G "SPI_CLK_DIV_1" 2 368 "0x001F"
D G "SPI_CLK_DIV_2" 2 369 "0x001B"
D G "SPI_CLK_DIV_3" 2 370 "0x0017"
D G "SPI_CLK_DIV_4" 2 371 "0x001E"
D G "SPI_CLK_DIV_5" 2 372 "0x000F"
D G "SPI_CLK_DIV_6" 2 373 "0x000B"
D G "SPI_CLK_DIV_7" 2 374 "0x0007"
D G "SPI_CLK_DIV_8" 2 375 "0x0003"
D G "SPI_CLK_DIV_12" 2 376 "0x0016"
D G "SPI_CLK_DIV_16" 2 377 "0x001D"
D G "SPI_CLK_DIV_20" 2 378 "0x000E"
D G "SPI_CLK_DIV_24" 2 379 "0x000A"
D G "SPI_CLK_DIV_28" 2 380 "0x0006"
D G "SPI_CLK_DIV_32" 2 381 "0x0002"
D G "SPI_CLK_DIV_48" 2 382 "0x0015"
D G "SPI_CLK_DIV_64" 2 383 "0x001C"
D G "SPI_CLK_DIV_80" 2 384 "0x000D"
D G "SPI_CLK_DIV_96" 2 385 "0x0009"
D G "SPI_CLK_DIV_112" 2 386 "0x0005"
D G "SPI_CLK_DIV_128" 2 387 "0x0001"
D G "SPI_CLK_DIV_192" 2 388 "0x0014"
D G "SPI_CLK_DIV_256" 2 389 "0x0010"
D G "SPI_CLK_DIV_320" 2 390 "0x000C"
D G "SPI_CLK_DIV_384" 2 391 "0x0008"
D G "SPI_CLK_DIV_448" 2 392 "0x0004"
D G "SPI_CLK_DIV_512" 2 393 "0x0000"
D G "SPI_L_TO_H" 2 396 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 1 4 "FUNCTION"
F N "setup_adc" 2 403 ""
V L "mode" 2 403 "int32" `245 
F B "setup_adc" 2 403 "void(int32 mode)" `244 
F N "setup_adc_ports" 2 404 ""
V L "pins" 2 404 "int32" `247 
F B "setup_adc_ports" 2 404 "void(int32 pins)" `246 
F N "setup_adc_ports" 2 405 ""
V L "pins" 2 405 "int32" `249 
V L "reference" 2 405 "int16" `250 
F B "setup_adc_ports" 2 405 "void(int32 pins,int16 reference)" `248 
F N "set_adc_channel" 2 406 ""
V L "channel" 2 406 "int8" `252 
F B "set_adc_channel" 2 406 "void(int8 channel)" `251 
F N "set_adc_channel" 2 407 ""
V L "channel" 2 407 "int8" `254 
V L "neg_channel" 2 407 "int8" `255 
F B "set_adc_channel" 2 407 "void(int8 channel,int8 neg_channel)" `253 
F N "read_adc" 2 408 ""
F B "read_adc" 2 408 "int16()" `256 
F N "read_adc" 2 409 ""
V L "mode" 2 409 "int8" `258 
F B "read_adc" 2 409 "int16(int8 mode)" `257 
F N "adc_done" 2 410 ""
F B "adc_done" 2 410 "int8()" `259  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 414 "0x10000"
D G "ADC_CLOCK" 2 415 "0x0000"
D G "ADC_CLOCK_DIV_2" 2 416 "0x0001"
D G "ADC_CLOCK_DIV_4" 2 417 "0x0003"
D G "ADC_CLOCK_DIV_8" 2 418 "0x0007"
D G "ADC_CLOCK_DIV_16" 2 419 "0x000F"
D G "ADC_CLOCK_DIV_32" 2 420 "0x001F"
D G "ADC_CLOCK_DIV_64" 2 421 "0x003F"
D G "ADC_CLOCK_INTERNAL" 2 422 "0x8000" "Internal"
D G "ADC_TAD_MUL_0" 2 426 "0x1F00"
D G "ADC_TAD_MUL_2" 2 427 "0x1D00"
D G "ADC_TAD_MUL_4" 2 428 "0x1B00"
D G "ADC_TAD_MUL_8" 2 429 "0x1700"
D G "ADC_TAD_MUL_16" 2 430 "0x0F00"
D G "ADC_TAD_MUL_31" 2 431 "0x0000"
D G "ADC_START_AND_READ" 2 434 "0x07"
D G "ADC_START_ONLY" 2 435 "0x01"
D G "ADC_READ_ONLY" 2 436 "0x06"
D G "VSS" 2 439 "0"
D G "NO_ANALOGS" 2 444 "0" "None"
D G "ALL_ANALOG" 2 445 "0xFFFFFFFF" "All"
D G "sAN0" 2 446 "0x00000001" "| A0"
D G "sAN1" 2 447 "0x00000002" "| A1"
D G "sAN2" 2 448 "0x00000004" "| B0"
D G "sAN3" 2 449 "0x00000008" "| B1"
D G "sAN4" 2 450 "0x00000010" "| B2"
D G "sAN5" 2 451 "0x00000020" "| B3"
D G "sAN9" 2 452 "0x00000200" "| B15"
D G "sAN10" 2 453 "0x00000400" "| B14"
D G "sAN11" 2 454 "0x00000800" "| B13"
D G "sAN12" 2 455 "0x00001000" "| B12"
D G "VSS_VDD" 2 458 "0x0000" "Range 0-Vdd"
D G "VREF_VREF" 2 459 "0x6000" "Range VrefL-VrefH"
D G "VREF_VDD" 2 460 "0x4000" "Range VrefL-Vdd"
D G "VSS_VREF" 2 461 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 1 4 "FUNCTION"
F N "setup_comparator" 2 467 ""
V L "comparator" 2 467 "int8" `261 
V L "mode" 2 467 "int16" `262 
F B "setup_comparator" 2 467 "void(int8 comparator,int16 mode)" `260  "Constants used in setup_comparator() second param are: - first param is the comparator number."
D G "NC_NC" 2 469 "0x0000"
D G "CXINB_CXINA" 2 470 "0x0401" "CXIN- and CXIN+"
D G "CXINA_CXINA" 2 471 "0x0403" "CXIN+ and CXIN+"
D G "CXINB_VREF" 2 472 "0x0400" "CXIN- and CVREF"
D G "CXINA_VREF" 2 473 "0x0402" "CXIN+ and CVREF"
D G "COMP_INVERT" 2 475 "0x0010"
D G "COMP_OUTPUT" 2 476 "0x0100"
D G "COMP_HALT_IDLE" 2 477 "0x8000"
D G "NC_NC_NC_NC" 2 484 "0"
D G "B2_B3_NC_NC" 2 485 "0x401"
D G "B2_VR_NC_NC" 2 486 "0x400"
D G "B3_VR_NC_NC" 2 487 "0x402"
D G "NC_NC_B0_B1" 2 488 "0x804"
D G "NC_NC_B0_VR" 2 489 "0x800"
D G "NC_NC_B1_VR" 2 490 "0x808"
D G "B2_B3_B0_B1" 2 491 "B2_B3_NC_NC | NC_NC_B0_B1"
D G "B2_VR_B0_VR" 2 492 "B2_VR_NC_NC | NC_NC_B0_VR"
D G "B3_VR_B1_VR" 2 493 "B3_VR_NC_NC | NC_NC_B1_VR"
D G "C1_INVERT" 2 495 "0x10"
D G "C2_INVERT" 2 496 "0x20"
D G "C1_OUTPUT" 2 497 "0x100"
D G "C2_OUTPUT" 2 498 "0x200"
c L "setup_comparator" 2 1 6 "FUNCTION"
F N "setup_pmp" 2 506 ""
V L "mode" 2 506 "int32" `266 
V L "address_mask" 2 506 "int16" `267 
F B "setup_pmp" 2 506 "void(int32 mode,int16 address_mask)" `265 
F N "pmp_address" 2 507 ""
V L "address" 2 507 "int16" `269 
F B "pmp_address" 2 507 "void(int16 address)" `268 
F N "pmp_read" 2 508 ""
F B "pmp_read" 2 508 "int8()" `270 
F N "pmp_write" 2 509 ""
V L "data" 2 509 "int8" `272 
F B "pmp_write" 2 509 "void(int8 data)" `271 
F N "pmp_output_full" 2 510 ""
F B "pmp_output_full" 2 510 "int8()" `273 
F N "pmp_input_full" 2 511 ""
F B "pmp_input_full" 2 511 "int8()" `274 
F N "pmp_overflow" 2 512 ""
F B "pmp_overflow" 2 512 "int8()" `275 
F N "setup_psp" 2 513 ""
V L "mode" 2 513 "int32" `277 
V L "address_mask" 2 513 "int16" `278 
F B "setup_psp" 2 513 "void(int32 mode,int16 address_mask)" `276 
F N "psp_read" 2 514 ""
F B "psp_read" 2 514 "int8()" `279 
F N "psp_read" 2 515 ""
V L "address" 2 515 "int16" `281 
F B "psp_read" 2 515 "int8(int16 address)" `280 
F N "psp_write" 2 516 ""
V L "data" 2 516 "int8" `283 
F B "psp_write" 2 516 "void(int8 data)" `282 
F N "psp_write" 2 517 ""
V L "data" 2 517 "int8" `285 
V L "address" 2 517 "int16" `286 
F B "psp_write" 2 517 "void(int8 data,int16 address)" `284 
F N "psp_output_full" 2 518 ""
F B "psp_output_full" 2 518 "int8()" `287 
F N "psp_input_full" 2 519 ""
F B "psp_input_full" 2 519 "int8()" `288 
F N "psp_overflow" 2 520 ""
F B "psp_overflow" 2 520 "int8()" `289  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
D G "PAR_ENABLE" 2 522 "0x8000"
D G "PAR_DISABLE" 2 523 "0x0000"
D G "PAR_STOP_IN_IDLE" 2 525 "0x2000"
D G "PAR_CONTINUE_IN_IDLE" 2 526 "0x0000"
D G "PAR_ADDR_NOT_MULTIPLEXED" 2 528 "0x0000"
D G "PAR_LOW_ADDR_MULTIPLEXED" 2 529 "0x0800"
D G "PAR_FULL_ADDR_MULTIPLEXED" 2 530 "0x1000"
D G "PAR_PTBEEN_ENABLE" 2 532 "0x0400" "Byte Enable Port Enable bit"
D G "PAR_PTWREN_ENABLE" 2 533 "0x0200" "Write Enable Strobe bit"
D G "PAR_PTRDEN_ENABLE" 2 534 "0x0100" "Read/Write Strobe Port bit"
D G "PAR_ALP_ACTIVE_HIGH" 2 535 "0x0020" "Address latch polarity high"
D G "PAR_BEP_ACTIVE_HIGH" 2 536 "0x0004" "Byte Enable Polarity"
D G "PAR_WRSP_ACTIVE_HIGH" 2 537 "0x0002" "Write strobe Polarity bit"
D G "PAR_RDSP_ACTIVE_HIGH" 2 538 "0x0001" "Read strobe Polarity bit"
D G "PAR_CS_XX" 2 540 "0x0000" "Chip select pins used for address"
D G "PAR_CS_X1" 2 541 "0x0008" "Chip select pin 1 used, active high"
D G "PAR_CS_X0" 2 542 "0x0000" "Chip select pin 1 used, active low"
D G "PAR_CS_1X" 2 543 "0x0050" "Chip select pin 2 used, active high"
D G "PAR_CS_0X" 2 544 "0x0040" "Chip select pin 2 used, active low"
D G "PAR_CS_00" 2 545 "0x0080" "Chip select pins 1,2 used, active low"
D G "PAR_CS_11" 2 546 "0x0098" "Chip select pins 1,2 used, active high"
D G "PAR_CS_10" 2 547 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
D G "PAR_CS_01" 2 548 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
D G "PAR_INTR_ON_3_RW_BUF" 2 550 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
D G "PAR_NO_INTR_STALL_ACTIVATED" 2 551 "0x40000000" "No interrupt, processor stall activated"
D G "PAR_INTR_ON_RW" 2 552 "0x20000000" "Interrupt on read write"
D G "PAR_NO_INTR" 2 553 "0x00000000" "No interrupt"
D G "PAR_PSP_AUTO_INC" 2 555 "0x18000000" "Read write buffers auto increment"
D G "PAR_DEC_ADDR" 2 556 "0x10000000" "Decrement the address"
D G "PAR_INC_ADDR" 2 557 "0x08000000" "Increment the address"
D G "PAR_NO_INC_DEC_ADDR" 2 558 "0x00000000" "No increment or decrement of the address"
D G "PAR_MASTER_MODE_1" 2 560 "0x03000000" "Master mode 1"
D G "PAR_MASTER_MODE_2" 2 561 "0x02000000" "Master mode 2"
D G "PAR_ENHANCED_PSP_MODE" 2 562 "0x01000000" "Enhanced PSP control signals"
D G "PAR_LEGACY_PSP_MODE" 2 563 "0x00000000" "Legacy Parallel Slave Port"
D G "PAR_WAITB1" 2 565 "0x00000000" "1 wait states for data setup R/W"
D G "PAR_WAITB2" 2 566 "0x00400000" "2 wait states for data setup R/W"
D G "PAR_WAITB3" 2 567 "0x00800000" "3 wait states for data setup R/W"
D G "PAR_WAITB4" 2 568 "0x00C00000" "4 wait states for data setup R/W"
D G "PAR_WAITM0" 2 570 "0x00000000" "0 wait states"
D G "PAR_WAITM1" 2 571 "0x00040000" "1 wait states"
D G "PAR_WAITM2" 2 572 "0x00080000" "2 wait states"
D G "PAR_WAITM3" 2 573 "0x000C0000" "3 wait states"
D G "PAR_WAITM4" 2 574 "0x00100000" "4 wait states"
D G "PAR_WAITM5" 2 575 "0x00140000" "5 wait states"
D G "PAR_WAITM6" 2 576 "0x00180000" "6 wait states"
D G "PAR_WAITM7" 2 577 "0x001C0000" "7 wait states"
D G "PAR_WAITM8" 2 578 "0x00200000" "8 wait states"
D G "PAR_WAITM9" 2 579 "0x00240000" "9 wait states"
D G "PAR_WAITM10" 2 580 "0x00280000" "10 wait states"
D G "PAR_WAITM11" 2 581 "0x002C0000" "11 wait states"
D G "PAR_WAITM12" 2 582 "0x00300000" "12 wait states"
D G "PAR_WAITM13" 2 583 "0x00340000" "13 wait states"
D G "PAR_WAITM14" 2 584 "0x00380000" "14 wait states"
D G "PAR_WAITM15" 2 585 "0x003C0000" "15 wait states"
D G "PAR_WAITE1" 2 587 "0x00000000" "1 wait states for data hold after strobe"
D G "PAR_WAITE2" 2 588 "0x00010000" "2 wait states for data hold after strobe"
D G "PAR_WAITE3" 2 589 "0x00020000" "3 wait states for data hold after strobe"
D G "PAR_WAITE4" 2 590 "0x00030000" "4 wait states for data hold after strobe"
c L "psp_overflow" 2 1 4 "FUNCTION"
F N "setup_crc" 2 596 ""
V L "poly_terms" 2 596 "int8" `291 
F B "setup_crc" 2 596 "void(int8 poly_terms,*int8 _VA_LIST)" `290 
F N "crc_init" 2 597 ""
V L "value" 2 597 "int16" `294 
F B "crc_init" 2 597 "void(int16 value)" `293 
F N "crc_calc16" 2 598 ""
V L "data" 2 598 "int16" `296 
F B "crc_calc16" 2 598 "int16(int16 data)" `295 
F N "crc_calc16" 2 599 ""
V L "data" 2 599 "int8" `298 
V L "width" 2 599 "int8" `299 
F B "crc_calc16" 2 599 "int16(int8 data,int8 width)" `297 
F N "crc_calc16" 2 600 ""
V L "data" 2 600 "int16" `301 
V L "width" 2 600 "int8" `302 
F B "crc_calc16" 2 600 "int16(int16 data,int8 width)" `300 
F N "crc_calc16" 2 601 ""
V L "ptr" 2 601 "*int16" `304 
V L "count" 2 601 "int16" `305 
F B "crc_calc16" 2 601 "int16(*int16 ptr,int16 count)" `303 
F N "crc_calc16" 2 602 ""
V L "ptr" 2 602 "*int8" `307 
V L "count" 2 602 "int16" `308 
V L "width" 2 602 "int8" `309 
F B "crc_calc16" 2 602 "int16(*int8 ptr,int16 count,int8 width)" `306 
F N "crc_calc16" 2 603 ""
V L "ptr" 2 603 "*int16" `311 
V L "count" 2 603 "int16" `312 
V L "width" 2 603 "int8" `313 
F B "crc_calc16" 2 603 "int16(*int16 ptr,int16 count,int8 width)" `310 
F N "crc_calc8" 2 604 ""
V L "data" 2 604 "int8" `315 
F B "crc_calc8" 2 604 "int8(int8 data)" `314 
F N "crc_calc8" 2 605 ""
V L "data" 2 605 "int8" `317 
V L "width" 2 605 "int8" `318 
F B "crc_calc8" 2 605 "int8(int8 data,int8 width)" `316 
F N "crc_calc8" 2 606 ""
V L "data" 2 606 "int16" `320 
V L "width" 2 606 "int8" `321 
F B "crc_calc8" 2 606 "int8(int16 data,int8 width)" `319 
F N "crc_calc8" 2 607 ""
V L "ptr" 2 607 "*int8" `323 
V L "count" 2 607 "int16" `324 
F B "crc_calc8" 2 607 "int8(*int8 ptr,int16 count)" `322 
F N "crc_calc8" 2 608 ""
V L "ptr" 2 608 "*int8" `326 
V L "count" 2 608 "int16" `327 
V L "width" 2 608 "int8" `328 
F B "crc_calc8" 2 608 "int8(*int8 ptr,int16 count,int8 width)" `325 
F N "crc_calc8" 2 609 ""
V L "ptr" 2 609 "*int16" `330 
V L "count" 2 609 "int16" `331 
V L "width" 2 609 "int8" `332 
F B "crc_calc8" 2 609 "int8(*int16 ptr,int16 count,int8 width)" `329 
F N "crc_calc" 2 610 ""
V L "data" 2 610 "int16" `334 
F B "crc_calc" 2 610 "int16(int16 data)" `333 
F N "crc_calc" 2 611 ""
V L "data" 2 611 "int8" `336 
V L "width" 2 611 "int8" `337 
F B "crc_calc" 2 611 "int16(int8 data,int8 width)" `335 
F N "crc_calc" 2 612 ""
V L "data" 2 612 "int16" `339 
V L "width" 2 612 "int8" `340 
F B "crc_calc" 2 612 "int16(int16 data,int8 width)" `338 
F N "crc_calc" 2 613 ""
V L "ptr" 2 613 "*int16" `342 
V L "count" 2 613 "int16" `343 
F B "crc_calc" 2 613 "int16(*int16 ptr,int16 count)" `341 
F N "crc_calc" 2 614 ""
V L "ptr" 2 614 "*int8" `345 
V L "count" 2 614 "int16" `346 
V L "width" 2 614 "int8" `347 
F B "crc_calc" 2 614 "int16(*int8 ptr,int16 count,int8 width)" `344 
F N "crc_calc" 2 615 ""
V L "ptr" 2 615 "*int16" `349 
V L "count" 2 615 "int16" `350 
V L "width" 2 615 "int8" `351 
F B "crc_calc" 2 615 "int16(*int16 ptr,int16 count,int8 width)" `348  "RTC"
c L "crc_calc" 2 1 3 "FUNCTION"
c L "crc_calc" 2 1 1 "FUNCTION"
c L "crc_calc" 2 1 1 "FUNCTION"
T G "rtc_time_t" 2 631 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `362  "RTC Prototypes:"
F N "setup_rtc" 2 633 ""
V L "mode" 2 633 "int16" `364 
V L "calibration" 2 633 "int8" `365 
F B "setup_rtc" 2 633 "void(int16 mode,int8 calibration)" `363 
F N "setup_rtc_alarm" 2 634 ""
V L "mode" 2 634 "int16" `367 
V L "mask" 2 634 "int16" `368 
V L "repeat" 2 634 "int8" `369 
F B "setup_rtc_alarm" 2 634 "void(int16 mode,int16 mask,int8 repeat)" `366 
F N "rtc_read" 2 635 ""
V L "time" 2 635 " *" `371 
F B "rtc_read" 2 635 "void( * time)" `370 
F N "rtc_write" 2 636 ""
V L "time" 2 636 " *" `373 
F B "rtc_write" 2 636 "void( * time)" `372 
F N "rtc_alarm_read" 2 637 ""
V L "time" 2 637 " *" `375 
F B "rtc_alarm_read" 2 637 "void( * time)" `374 
F N "rtc_alarm_write" 2 638 ""
V L "time" 2 638 " *" `377 
F B "rtc_alarm_write" 2 638 "void( * time)" `376  "Constants used in setup_rtc() are:  // Second param is calibration"
D G "RTC_ENABLE" 2 640 "0x8000"
D G "RTC_DISABLE" 2 641 "0"
D G "RTC_OUTPUT_SECONDS" 2 642 "0x20400"
D G "RTC_OUTPUT_ALARM" 2 643 "0x00400"
D G "RTC_ALARM_ENABLE" 2 646 "0x8000"
D G "RTC_ALARM_DISABLE" 2 647 "0"
D G "RTC_CHIME_ENABLE" 2 648 "0x4000"
D G "RTC_CHIME_DISABLE" 2 649 "0"
D G "RTC_ALARM_HALFSECOND" 2 651 "0x0000"
D G "RTC_ALARM_SECOND" 2 652 "0x0400"
D G "RTC_ALARM_10_SECONDS" 2 653 "0x0800"
D G "RTC_ALARM_MINUTE" 2 654 "0x0C00"
D G "RTC_ALARM_10_MINUTES" 2 655 "0x1000"
D G "RTC_ALARM_HOUR" 2 656 "0x1400"
D G "RTC_ALARM_DAY" 2 657 "0x1800"
D G "RTC_ALARM_WEEK" 2 658 "0x1C00"
D G "RTC_ALARM_MONTH" 2 659 "0x2000"
D G "RTC_ALARM_YEAR" 2 660 "0x2400"
c L "rtc_alarm_write" 2 1 3 "FUNCTION"
F N "setup_dma" 2 665 ""
V L "channel" 2 665 "int8" `379 
V L "peripheral" 2 665 "int32" `380 
V L "mode" 2 665 "int8" `381 
F B "setup_dma" 2 665 "void(int8 channel,int32 peripheral,int8 mode)" `378 
F N "dma_start" 2 666 ""
V L "channel" 2 666 "int8" `383 
V L "mode" 2 666 "int16" `384 
V L "addressa" 2 666 "int16" `385 
F B "dma_start" 2 666 "void(int8 channel,int16 mode,int16 addressa)" `382 
F N "dma_start" 2 667 ""
V L "channel" 2 667 "int8" `387 
V L "mode" 2 667 "int16" `388 
V L "addressa" 2 667 "int16" `389 
V L "count" 2 667 "int16" `390 
F B "dma_start" 2 667 "void(int8 channel,int16 mode,int16 addressa,int16 count)" `386 
F N "dma_start" 2 668 ""
V L "channel" 2 668 "int8" `387 
V L "mode" 2 668 "int16" `388 
V L "addressa" 2 668 "int16" `389 
V L "addressb" 2 668 "int16" `395 
f G "dma_start" 2 668 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `391 
F N "dma_start" 2 669 ""
V L "channel" 2 669 "int8" `392 
V L "mode" 2 669 "int16" `393 
V L "addressa" 2 669 "int16" `394 
V L "addressb" 2 669 "int16" `395 
V L "count" 2 669 "int16" `396 
F B "dma_start" 2 669 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `391 
F N "dma_status" 2 670 ""
V L "channel" 2 670 "int8" `398 
F B "dma_status" 2 670 "int8(int8 channel)" `397  "Constants used in setup_dma() second param are:"
D G "DMA_IN_SPI1" 2 672 " (0x0A0000|getenv("sfr:SPI1BUF"))"
D G "DMA_OUT_SPI1" 2 673 " (0x8A0000|getenv("sfr:SPI1BUF"))"
D G "DMA_IN_SPI2" 2 674 " (0x210000|getenv("sfr:SPI2BUF"))"
D G "DMA_OUT_SPI2" 2 675 " (0xA10000|getenv("sfr:SPI2BUF"))"
D G "DMA_IN_UART1" 2 676 " (0x0B0000|getenv("sfr:U1RXREG"))"
D G "DMA_OUT_UART1" 2 677 " (0x8C0000|getenv("sfr:U1TXREG"))"
D G "DMA_IN_UART2" 2 678 " (0x1E0000|getenv("sfr:U2RXREG"))"
D G "DMA_OUT_UART2" 2 679 " (0x9F0000|getenv("sfr:U2TXREG"))"
D G "DMA_IN_ADC1" 2 680 " (0x0D0000|getenv("sfr:ADC1BUF0"))"
D G "DMA_IN_ECAN1" 2 681 " (0x220000|getenv("sfr:C1RXD"))"
D G "DMA_OUT_ECAN1" 2 682 " (0xC60000|getenv("sfr:C1TXD"))"
D G "DMA_INT0" 2 683 "0x000000" "or in direction and perif address"
D G "DMA_IC1" 2 684 "0x010000" "or in direction and perif address"
D G "DMA_IN_IC1" 2 685 " (0x010000|getenv("sfr:IC1BUF"))"
D G "DMA_IC2" 2 686 "0x050000" "or in direction and perif address"
D G "DMA_IN_IC2" 2 687 " (0x050000|getenv("sfr:IC2BUF"))"
D G "DMA_OC1" 2 688 "0x020000" "or in direction and perif address"
D G "DMA_OC2" 2 689 "0x060000" "or in direction and perif address"
D G "DMA_TIMER2" 2 690 "0x070000" "or in direction and perif address"
D G "DMA_TIMER3" 2 691 "0x080000" "or in direction and perif address"
D G "DMA_IN" 2 692 "0x00"
D G "DMA_OUT" 2 693 "0x800000"
D G "DMA_BYTE" 2 695 "0x40"
D G "DMA_WORD" 2 696 "0x00" "default"
D G "DMA_HALF_INT" 2 697 "0x10" "interrupt when half full"
D G "DMA_WRITE_NULL" 2 698 "0x08"
D G "DMA_CONTINOUS" 2 700 "0x00"
D G "DMA_ONE_SHOT" 2 701 "0x01"
D G "DMA_PING_PONG" 2 702 "0x02"
D G "DMA_NO_INC" 2 703 "0x10"
D G "DMA_PERIF_ADDR" 2 704 "0x20" "Device supplies address"
D G "DMA_FORCE_NOW" 2 705 "0x100"
D G "DMA_IN_ERROR" 2 707 "0x01"
D G "DMA_OUT_ERROR" 2 708 "0x02"
D G "DMA_B_SELECT" 2 709 "0x04"
c L "dma_status" 2 1 3 "FUNCTION"
F N "abs" 2 715 ""
V L "x" 2 715 "sint8" `400 
F B "abs" 2 715 "sint8(sint8 x)" `399 
F N "abs" 2 716 ""
V L "x" 2 716 "sint16" `402 
F B "abs" 2 716 "sint16(sint16 x)" `401 
F N "abs" 2 717 ""
V L "x" 2 717 "sint32" `404 
F B "abs" 2 717 "sint32(sint32 x)" `403 
F N "abs" 2 718 ""
V L "x" 2 718 "float" `406 
F B "abs" 2 718 "float(float x)" `405 
F N "_mul" 2 719 ""
V L "??65535" 2 719 "int8" `408 
V L "??65535" 2 719 "int8" `409 
F B "_mul" 2 719 "int16(int8 ,int8 )" `407 
F N "_mul" 2 720 ""
V L "??65535" 2 720 "sint8" `411 
V L "??65535" 2 720 "sint8" `412 
F B "_mul" 2 720 "sint16(sint8 ,sint8 )" `410 
F N "_mul" 2 721 ""
V L "??65535" 2 721 "int16" `414 
V L "??65535" 2 721 "int16" `415 
F B "_mul" 2 721 "int32(int16 ,int16 )" `413 
F N "_mul" 2 722 ""
V L "??65535" 2 722 "sint16" `417 
V L "??65535" 2 722 "sint16" `418 
F B "_mul" 2 722 "sint32(sint16 ,sint16 )" `416 
F N "abs" 2 723 ""
V L "x" 2 723 "?" `420 
F B "abs" 2 723 "?(? x)" `419 
F N "abs" 2 724 ""
V L "x" 2 724 "?" `422 
F B "abs" 2 724 "?(? x)" `421 
F N "abs" 2 725 ""
V L "x" 2 725 "?" `424 
F B "abs" 2 725 "?(? x)" `423 
F N "abs" 2 726 ""
V L "x" 2 726 "?" `426 
F B "abs" 2 726 "?(? x)" `425 
F N "_mul" 2 727 ""
V L "??65535" 2 727 "int32" `428 
V L "??65535" 2 727 "int32" `429 
F B "_mul" 2 727 "?(int32 ,int32 )" `427 
F N "_mul" 2 728 ""
V L "??65535" 2 728 "sint32" `431 
V L "??65535" 2 728 "sint32" `432 
F B "_mul" 2 728 "?(sint32 ,sint32 )" `430 
F N "_mul" 2 729 ""
V L "??65535" 2 729 "?" `434 
V L "??65535" 2 729 "?" `435 
F B "_mul" 2 729 "?(? ,? )" `433 
F N "_mul" 2 730 ""
V L "??65535" 2 730 "?" `437 
V L "??65535" 2 730 "?" `438 
F B "_mul" 2 730 "?(? ,? )" `436  "Memory Manipulation Prototypes:"
F N "strcpy" 2 733 ""
V L "dest" 2 733 "*sint8" `440 
V L "src" 2 733 "*sint8" `441 
F B "strcpy" 2 733 "void(*sint8 dest,*sint8 src)" `439 
F N "memset" 2 734 ""
V L "destination" 2 734 "*int8" `443 
V L "value" 2 734 "int8" `444 
V L "num" 2 734 "int16" `445 
F B "memset" 2 734 "void(*int8 destination,int8 value,int16 num)" `442 
F N "memcpy" 2 735 ""
V L "destination" 2 735 "*int8" `447 
V L "source" 2 735 "*int8" `448 
V L "num" 2 735 "int16" `449 
F B "memcpy" 2 735 "void(*int8 destination,*int8 source,int16 num)" `446  "Data Manipulators Prototypes:"
F N "shift_left" 2 738 ""
V L "address" 2 738 "*int8" `451 
V L "bytes" 2 738 "int8" `452 
V L "value" 2 738 "int8" `453 
F B "shift_left" 2 738 "int8(*int8 address,int8 bytes,int8 value)" `450 
F N "shift_right" 2 739 ""
V L "address" 2 739 "*int8" `455 
V L "bytes" 2 739 "int8" `456 
V L "value" 2 739 "int8" `457 
F B "shift_right" 2 739 "int8(*int8 address,int8 bytes,int8 value)" `454 
F N "rotate_left" 2 740 ""
V L "address" 2 740 "*int8" `459 
V L "bytes" 2 740 "int8" `460 
F B "rotate_left" 2 740 "void(*int8 address,int8 bytes)" `458 
F N "rotate_right" 2 741 ""
V L "address" 2 741 "*int8" `462 
V L "bytes" 2 741 "int8" `463 
F B "rotate_right" 2 741 "void(*int8 address,int8 bytes)" `461 
F N "swap" 2 742 ""
V L "value" 2 742 "int8" `465 
F B "swap" 2 742 "void(int8 value)" `464 
F N "make8" 2 743 ""
V L "var" 2 743 "int16" `467 
V L "offset" 2 743 "int8" `468 
F B "make8" 2 743 "int8(int16 var,int8 offset)" `466 
F N "make8" 2 744 ""
V L "var" 2 744 "int32" `470 
V L "offset" 2 744 "int8" `471 
F B "make8" 2 744 "int8(int32 var,int8 offset)" `469 
F N "make16" 2 745 ""
V L "varhigh" 2 745 "int8" `473 
V L "varlow" 2 745 "int8" `474 
F B "make16" 2 745 "int16(int8 varhigh,int8 varlow)" `472 
F N "make32" 2 746 ""
V L "var1" 2 746 "int16" `476 
F B "make32" 2 746 "int32(int16 var1)" `475 
F N "make32" 2 747 ""
V L "var1" 2 747 "int16" `478 
V L "var2" 2 747 "int16" `479 
F B "make32" 2 747 "int32(int16 var1,int16 var2)" `477 
F N "make32" 2 748 ""
V L "var1" 2 748 "int16" `481 
V L "var2" 2 748 "int8" `482 
F B "make32" 2 748 "int32(int16 var1,int8 var2)" `480 
F N "make32" 2 749 ""
V L "var1" 2 749 "int16" `484 
V L "var2" 2 749 "int8" `485 
V L "var3" 2 749 "int8" `486 
F B "make32" 2 749 "int32(int16 var1,int8 var2,int8 var3)" `483 
F N "make32" 2 750 ""
V L "var1" 2 750 "int8" `488 
F B "make32" 2 750 "int32(int8 var1)" `487 
F N "make32" 2 751 ""
V L "var1" 2 751 "int8" `490 
V L "var2" 2 751 "int8" `491 
F B "make32" 2 751 "int32(int8 var1,int8 var2)" `489 
F N "make32" 2 752 ""
V L "var1" 2 752 "int8" `493 
V L "var2" 2 752 "int8" `494 
V L "var3" 2 752 "int8" `495 
F B "make32" 2 752 "int32(int8 var1,int8 var2,int8 var3)" `492 
F N "make32" 2 753 ""
V L "var1" 2 753 "int8" `497 
V L "var2" 2 753 "int8" `498 
V L "var3" 2 753 "int8" `499 
V L "var4" 2 753 "int8" `500 
F B "make32" 2 753 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `496 
F N "make32" 2 754 ""
V L "var1" 2 754 "int8" `502 
V L "var2" 2 754 "int16" `503 
F B "make32" 2 754 "int32(int8 var1,int16 var2)" `501 
F N "make32" 2 755 ""
V L "var1" 2 755 "int8" `505 
V L "var2" 2 755 "int16" `506 
V L "var3" 2 755 "int8" `507 
F B "make32" 2 755 "int32(int8 var1,int16 var2,int8 var3)" `504 
F N "make32" 2 756 ""
V L "var1" 2 756 "int8" `509 
V L "var2" 2 756 "int8" `510 
V L "var3" 2 756 "int16" `511 
F B "make32" 2 756 "int32(int8 var1,int8 var2,int16 var3)" `508 
F N "bit_set" 2 757 ""
V L "var" 2 757 "int8" `513 
V L "bit" 2 757 "int8" `514 
F B "bit_set" 2 757 "void(int8 var,int8 bit)" `512 
F N "bit_set" 2 758 ""
V L "var" 2 758 "int16" `516 
V L "bit" 2 758 "int8" `517 
F B "bit_set" 2 758 "void(int16 var,int8 bit)" `515 
F N "bit_set" 2 759 ""
V L "var" 2 759 "int32" `519 
V L "bit" 2 759 "int8" `520 
F B "bit_set" 2 759 "void(int32 var,int8 bit)" `518 
F N "bit_clear" 2 760 ""
V L "var" 2 760 "int8" `522 
V L "bit" 2 760 "int8" `523 
F B "bit_clear" 2 760 "void(int8 var,int8 bit)" `521 
F N "bit_clear" 2 761 ""
V L "var" 2 761 "int16" `525 
V L "bit" 2 761 "int8" `526 
F B "bit_clear" 2 761 "void(int16 var,int8 bit)" `524 
F N "bit_clear" 2 762 ""
V L "var" 2 762 "int32" `528 
V L "bit" 2 762 "int8" `529 
F B "bit_clear" 2 762 "void(int32 var,int8 bit)" `527 
F N "bit_test" 2 763 ""
V L "var" 2 763 "int8" `531 
V L "bit" 2 763 "int8" `532 
F B "bit_test" 2 763 "int8(int8 var,int8 bit)" `530 
F N "bit_test" 2 764 ""
V L "var" 2 764 "int16" `534 
V L "bit" 2 764 "int8" `535 
F B "bit_test" 2 764 "int8(int16 var,int8 bit)" `533 
F N "bit_test" 2 765 ""
V L "var" 2 765 "int32" `537 
V L "bit" 2 765 "int8" `538 
F B "bit_test" 2 765 "int8(int32 var,int8 bit)" `536 
F N "bit_set" 2 766 ""
V L "var" 2 766 "?" `540 
V L "bit" 2 766 "int8" `541 
F B "bit_set" 2 766 "void(? var,int8 bit)" `539 
F N "bit_set" 2 767 ""
V L "var" 2 767 "?" `543 
V L "bit" 2 767 "int8" `544 
F B "bit_set" 2 767 "void(? var,int8 bit)" `542 
F N "bit_clear" 2 768 ""
V L "var" 2 768 "?" `546 
V L "bit" 2 768 "int8" `547 
F B "bit_clear" 2 768 "void(? var,int8 bit)" `545 
F N "bit_clear" 2 769 ""
V L "var" 2 769 "?" `549 
V L "bit" 2 769 "int8" `550 
F B "bit_clear" 2 769 "void(? var,int8 bit)" `548 
F N "bit_test" 2 770 ""
V L "var" 2 770 "?" `552 
V L "bit" 2 770 "int8" `553 
F B "bit_test" 2 770 "int8(? var,int8 bit)" `551 
F N "bit_test" 2 771 ""
V L "var" 2 771 "?" `555 
V L "bit" 2 771 "int8" `556 
F B "bit_test" 2 771 "int8(? var,int8 bit)" `554 
F N "bit_first" 2 772 ""
V L "value" 2 772 "int8" `558 
V L "var" 2 772 "int16" `559 
F B "bit_first" 2 772 "int8(int8 value,int16 var)" `557 
F N "bit_last" 2 773 ""
V L "var" 2 773 "sint16" `561 
F B "bit_last" 2 773 "int8(sint16 var)" `560 
F N "bit_last" 2 774 ""
V L "value" 2 774 "int8" `563 
V L "var" 2 774 "sint16" `564 
F B "bit_last" 2 774 "int8(int8 value,sint16 var)" `562  "#use delay() Prototypes:"
F N "delay_cycles" 2 777 ""
V L "count" 2 777 "int16" `566 
F B "delay_cycles" 2 777 "void(int16 count)" `565 
F N "delay_ms" 2 778 ""
V L "time" 2 778 "int16" `568 
F B "delay_ms" 2 778 "void(int16 time)" `567 
F N "delay_us" 2 779 ""
V L "time" 2 779 "int16" `570 
F B "delay_us" 2 779 "void(int16 time)" `569  "#use rs232() Prototypes:"
F N "putchar" 2 782 ""
V L "cdata" 2 782 "sint8" `572 
F B "putchar" 2 782 "void(sint8 cdata)" `571 
F N "putchar" 2 783 ""
V L "cdata" 2 783 "sint8" `574 
V L "stream" 2 783 "int8" `575 
F B "putchar" 2 783 "void(sint8 cdata,int8 stream)" `573 
F N "puts" 2 784 ""
V L "string" 2 784 "*sint8" `577 
F B "puts" 2 784 "void(*sint8 string)" `576 
F N "puts" 2 785 ""
V L "string" 2 785 "*sint8" `579 
V L "stream" 2 785 "int8" `580 
F B "puts" 2 785 "void(*sint8 string,int8 stream)" `578 
F N "getch" 2 786 ""
F B "getch" 2 786 "sint8()" `581 
F N "getch" 2 787 ""
V L "stream" 2 787 "int8" `583 
F B "getch" 2 787 "sint8(int8 stream)" `582 
F N "gets" 2 788 ""
V L "string" 2 788 "*sint8" `585 
F B "gets" 2 788 "void(*sint8 string)" `584 
F N "gets" 2 789 ""
V L "string" 2 789 "*sint8" `587 
V L "stream" 2 789 "int8" `588 
F B "gets" 2 789 "void(*sint8 string,int8 stream)" `586 
F N "kbhit" 2 790 ""
F B "kbhit" 2 790 "int8()" `589 
F N "kbhit" 2 791 ""
V L "stream" 2 791 "int8" `591 
F B "kbhit" 2 791 "int8(int8 stream)" `590 
F N "printf" 2 792 ""
V L "string" 2 792 "*sint8" `593 
F B "printf" 2 792 "void(*sint8 string,*int8 _VA_LIST)" `592 
F N "fprintf" 2 793 ""
V L "stream" 2 793 "int8" `596 
V L "string" 2 793 "*sint8" `597 
F B "fprintf" 2 793 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `595 
F N "putc_send" 2 794 ""
F B "putc_send" 2 794 "void()" `599 
F N "fputc_send" 2 795 ""
V L "stream" 2 795 "int8" `601 
F B "fputc_send" 2 795 "void(int8 stream)" `600 
F N "rcv_buffer_full" 2 796 ""
F B "rcv_buffer_full" 2 796 "int8()" `602 
F N "rcv_buffer_full" 2 797 ""
V L "stream" 2 797 "int8" `604 
F B "rcv_buffer_full" 2 797 "int8(int8 stream)" `603 
F N "rcv_buffer_bytes" 2 798 ""
F B "rcv_buffer_bytes" 2 798 "int16()" `605 
F N "rcv_buffer_bytes" 2 799 ""
V L "stream" 2 799 "int8" `607 
F B "rcv_buffer_bytes" 2 799 "int16(int8 stream)" `606 
F N "tx_buffer_full" 2 800 ""
F B "tx_buffer_full" 2 800 "int8()" `608 
F N "tx_buffer_full" 2 801 ""
V L "stream" 2 801 "int8" `610 
F B "tx_buffer_full" 2 801 "int8(int8 stream)" `609 
F N "tx_buffer_bytes" 2 802 ""
F B "tx_buffer_bytes" 2 802 "int16()" `611 
F N "tx_buffer_bytes" 2 803 ""
V L "stream" 2 803 "int8" `613 
F B "tx_buffer_bytes" 2 803 "int16(int8 stream)" `612 
F N "linbus_header" 2 804 ""
V L "identifier" 2 804 "int8" `615 
F B "linbus_header" 2 804 "int8(int8 identifier)" `614 
F N "linbus_header" 2 805 ""
V L "stream" 2 805 "int8" `617 
V L "identifier" 2 805 "int8" `618 
F B "linbus_header" 2 805 "int8(int8 stream,int8 identifier)" `616 
F N "linbus_header_hit" 2 806 ""
F B "linbus_header_hit" 2 806 "int8()" `619 
F N "linbus_header_hit" 2 807 ""
V L "stream" 2 807 "int8" `621 
F B "linbus_header_hit" 2 807 "int8(int8 stream)" `620 
F N "linbus_header_get" 2 808 ""
F B "linbus_header_get" 2 808 "int8()" `622 
F N "linbus_header_get" 2 809 ""
V L "stream" 2 809 "int8" `624 
F B "linbus_header_get" 2 809 "int8(int8 stream)" `623 
F N "linbus_rx_response" 2 810 ""
V L "DataPtr" 2 810 "*int8" `626 
V L "count" 2 810 "int8" `627 
F B "linbus_rx_response" 2 810 "int8(*int8 DataPtr,int8 count)" `625 
F N "linbus_rx_response" 2 811 ""
V L "stream" 2 811 "int8" `629 
V L "DataPtr" 2 811 "*int8" `630 
V L "count" 2 811 "int8" `631 
F B "linbus_rx_response" 2 811 "int8(int8 stream,*int8 DataPtr,int8 count)" `628 
F N "linbus_tx_response" 2 812 ""
V L "DataPtr" 2 812 "*int8" `633 
V L "count" 2 812 "int8" `634 
F B "linbus_tx_response" 2 812 "void(*int8 DataPtr,int8 count)" `632 
F N "linbus_tx_response" 2 813 ""
V L "stream" 2 813 "int8" `636 
V L "DataPtr" 2 813 "*int8" `637 
V L "count" 2 813 "int8" `638 
F B "linbus_tx_response" 2 813 "void(int8 stream,*int8 DataPtr,int8 count)" `635 
F N "linbus_checksum_type" 2 814 ""
V L "type" 2 814 "int8" `640 
F B "linbus_checksum_type" 2 814 "void(int8 type)" `639 
F N "linbus_checksum_type" 2 815 ""
V L "stream" 2 815 "int8" `642 
V L "type" 2 815 "int8" `643 
F B "linbus_checksum_type" 2 815 "void(int8 stream,int8 type)" `641  "#use i2c() Prototypes:"
F N "i2c_read" 2 818 ""
F B "i2c_read" 2 818 "int8()" `644 
F N "i2c_read" 2 819 ""
V L "ack" 2 819 "int8" `646 
F B "i2c_read" 2 819 "int8(int8 ack)" `645 
F N "i2c_read" 2 820 ""
V L "stream" 2 820 "int8" `648 
V L "ack" 2 820 "int8" `649 
F B "i2c_read" 2 820 "int8(int8 stream,int8 ack)" `647 
F N "i2c_write" 2 821 ""
V L "data" 2 821 "int8" `651 
F B "i2c_write" 2 821 "int8(int8 data)" `650 
F N "i2c_write" 2 822 ""
V L "stream" 2 822 "int8" `653 
V L "data" 2 822 "int8" `654 
F B "i2c_write" 2 822 "int8(int8 stream,int8 data)" `652 
F N "i2c_start" 2 823 ""
F B "i2c_start" 2 823 "void()" `655 
F N "i2c_start" 2 824 ""
V L "stream" 2 824 "int8" `657 
F B "i2c_start" 2 824 "void(int8 stream)" `656 
F N "i2c_start" 2 825 ""
V L "stream" 2 825 "int8" `659 
V L "restart" 2 825 "int8" `660 
F B "i2c_start" 2 825 "void(int8 stream,int8 restart)" `658 
F N "i2c_stop" 2 826 ""
F B "i2c_stop" 2 826 "void()" `661 
F N "i2c_stop" 2 827 ""
V L "stream" 2 827 "int8" `663 
F B "i2c_stop" 2 827 "void(int8 stream)" `662 
F N "i2c_isr_state" 2 828 ""
F B "i2c_isr_state" 2 828 "sint8()" `664 
F N "i2c_slaveaddr" 2 829 ""
V L "addr" 2 829 "int8" `666 
F B "i2c_slaveaddr" 2 829 "void(int8 addr)" `665 
F N "i2c_slaveaddr" 2 830 ""
V L "stream" 2 830 "int8" `668 
V L "addr" 2 830 "int8" `669 
F B "i2c_slaveaddr" 2 830 "void(int8 stream,int8 addr)" `667 
F N "i2c_poll" 2 831 ""
F B "i2c_poll" 2 831 "int8()" `670 
F N "i2c_poll" 2 832 ""
V L "stream" 2 832 "int8" `672 
F B "i2c_poll" 2 832 "int8(int8 stream)" `671 
F N "i2c_init" 2 833 ""
V L "baud" 2 833 "int32" `674 
F B "i2c_init" 2 833 "void(int32 baud)" `673 
F N "i2c_init" 2 834 ""
V L "stream" 2 834 "int8" `676 
V L "baud" 2 834 "int32" `677 
F B "i2c_init" 2 834 "void(int8 stream,int32 baud)" `675 
F N "i2c_transfer" 2 835 ""
V L "address" 2 835 "int8" `679 
V L "wData" 2 835 "*int8" `680 
V L "wCount" 2 835 "int8" `681 
F B "i2c_transfer" 2 835 "int8(int8 address,*int8 wData,int8 wCount)" `678 
F N "i2c_transfer" 2 836 ""
V L "address" 2 836 "int8" `683 
V L "wData" 2 836 "*int8" `684 
V L "wCount" 2 836 "int8" `685 
V L "rData" 2 836 "*int8" `686 
V L "rCount" 2 836 "*int8" `687 
F B "i2c_transfer" 2 836 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `682 
F N "i2c_transfer" 2 837 ""
V L "stream" 2 837 "int8" `689 
V L "address" 2 837 "int8" `690 
V L "wData" 2 837 "*int8" `691 
V L "wCount" 2 837 "int8" `692 
F B "i2c_transfer" 2 837 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `688 
F N "i2c_transfer" 2 838 ""
V L "stream" 2 838 "int8" `694 
V L "address" 2 838 "int8" `695 
V L "wData" 2 838 "*int8" `696 
V L "wCount" 2 838 "int8" `697 
V L "rData" 2 838 "*int8" `698 
V L "rCount" 2 838 "*int8" `699 
F B "i2c_transfer" 2 838 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `693 
F N "i2c_transfer_out" 2 839 ""
V L "address" 2 839 "int8" `701 
V L "wData" 2 839 "*int8" `702 
V L "wCount" 2 839 "int8" `703 
F B "i2c_transfer_out" 2 839 "int8(int8 address,*int8 wData,int8 wCount)" `700 
F N "i2c_transfer_out" 2 840 ""
V L "stream" 2 840 "int8" `705 
V L "address" 2 840 "int8" `706 
V L "wData" 2 840 "*int8" `707 
V L "wCount" 2 840 "int8" `708 
F B "i2c_transfer_out" 2 840 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `704 
F N "i2c_transfer_in" 2 841 ""
V L "address" 2 841 "int8" `710 
V L "rData" 2 841 "*int8" `711 
V L "rCount" 2 841 "int8" `712 
F B "i2c_transfer_in" 2 841 "int8(int8 address,*int8 rData,int8 rCount)" `709 
F N "i2c_transfer_in" 2 842 ""
V L "stream" 2 842 "int8" `714 
V L "address" 2 842 "int8" `715 
V L "rData" 2 842 "*int8" `716 
V L "rCount" 2 842 "int8" `717 
F B "i2c_transfer_in" 2 842 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `713  "#use spi() Prototypes:"
F N "spi_xfer" 2 845 ""
F B "spi_xfer" 2 845 "int8()" `718 
F N "spi_xfer" 2 846 ""
f G "spi_xfer" 2 846 "int16(int8 data)" `719 
F N "spi_xfer" 2 847 ""
f G "spi_xfer" 2 847 "int32(int8 data)" `719 
F N "spi_xfer" 2 848 ""
V L "data" 2 848 "int8" `720 
F B "spi_xfer" 2 848 "int8(int8 data)" `719 
F N "spi_xfer" 2 849 ""
V L "data" 2 849 "int16" `722 
F B "spi_xfer" 2 849 "int16(int16 data)" `721 
F N "spi_xfer" 2 850 ""
V L "data" 2 850 "int32" `724 
F B "spi_xfer" 2 850 "int32(int32 data)" `723 
F N "spi_xfer" 2 851 ""
V L "stream" 2 851 "int8" `726 
V L "data" 2 851 "int8" `727 
F B "spi_xfer" 2 851 "int8(int8 stream,int8 data)" `725 
F N "spi_xfer" 2 852 ""
V L "stream" 2 852 "int8" `729 
V L "data" 2 852 "int16" `730 
F B "spi_xfer" 2 852 "int16(int8 stream,int16 data)" `728 
F N "spi_xfer" 2 853 ""
V L "stream" 2 853 "int8" `732 
V L "data" 2 853 "int32" `733 
F B "spi_xfer" 2 853 "int32(int8 stream,int32 data)" `731 
F N "spi_xfer" 2 854 ""
V L "stream" 2 854 "int8" `735 
V L "data" 2 854 "int8" `736 
V L "bits" 2 854 "int8" `737 
F B "spi_xfer" 2 854 "int8(int8 stream,int8 data,int8 bits)" `734 
F N "spi_xfer" 2 855 ""
V L "stream" 2 855 "int8" `739 
V L "data" 2 855 "int16" `740 
V L "bits" 2 855 "int8" `741 
F B "spi_xfer" 2 855 "int16(int8 stream,int16 data,int8 bits)" `738 
F N "spi_xfer" 2 856 ""
V L "stream" 2 856 "int8" `743 
V L "data" 2 856 "int32" `744 
V L "bits" 2 856 "int8" `745 
F B "spi_xfer" 2 856 "int32(int8 stream,int32 data,int8 bits)" `742 
F N "spi_init" 2 857 ""
V L "baud" 2 857 "int32" `747 
F B "spi_init" 2 857 "void(int32 baud)" `746 
F N "spi_init" 2 858 ""
V L "stream" 2 858 "int8" `749 
V L "baud" 2 858 "int32" `750 
F B "spi_init" 2 858 "void(int8 stream,int32 baud)" `748 
F N "spi_speed" 2 859 ""
V L "baud" 2 859 "int32" `752 
F B "spi_speed" 2 859 "void(int32 baud)" `751 
F N "spi_speed" 2 860 ""
V L "stream" 2 860 "int8" `754 
V L "baud" 2 860 "int32" `755 
F B "spi_speed" 2 860 "void(int8 stream,int32 baud)" `753 
F N "spi_speed" 2 861 ""
V L "stream" 2 861 "int8" `757 
V L "baud" 2 861 "int32" `758 
V L "clock" 2 861 "int32" `759 
F B "spi_speed" 2 861 "void(int8 stream,int32 baud,int32 clock)" `756 
F N "spi_prewrite" 2 862 ""
V L "data" 2 862 "int8" `761 
F B "spi_prewrite" 2 862 "void(int8 data)" `760 
F N "spi_prewrite" 2 863 ""
V L "data" 2 863 "int16" `763 
F B "spi_prewrite" 2 863 "void(int16 data)" `762 
F N "spi_prewrite" 2 864 ""
V L "data" 2 864 "int32" `765 
F B "spi_prewrite" 2 864 "void(int32 data)" `764 
F N "spi_prewrite" 2 865 ""
V L "??65535" 2 865 "int8" `767 
V L "data" 2 865 "int8" `768 
F B "spi_prewrite" 2 865 "void(int8 ,int8 data)" `766 
F N "spi_prewrite" 2 866 ""
V L "??65535" 2 866 "int8" `770 
V L "data" 2 866 "int16" `771 
F B "spi_prewrite" 2 866 "void(int8 ,int16 data)" `769 
F N "spi_prewrite" 2 867 ""
V L "??65535" 2 867 "int8" `773 
V L "data" 2 867 "int32" `774 
F B "spi_prewrite" 2 867 "void(int8 ,int32 data)" `772 
F N "spi_xfer_in" 2 868 ""
F B "spi_xfer_in" 2 868 "int8()" `775 
F N "spi_xfer_in" 2 869 ""
f G "spi_xfer_in" 2 869 "int16(int8 bits)" `776 
F N "spi_xfer_in" 2 870 ""
f G "spi_xfer_in" 2 870 "int32(int8 bits)" `776 
F N "spi_xfer_in" 2 871 ""
V L "bits" 2 871 "int8" `777 
F B "spi_xfer_in" 2 871 "int8(int8 bits)" `776 
F N "spi_xfer_in" 2 872 ""
V L "bits" 2 872 "int8" `779 
f G "spi_xfer_in" 2 872 "int16(int8 bits,int8 bits)" `778 
F N "spi_xfer_in" 2 873 ""
V L "bits" 2 873 "int8" `779 
f G "spi_xfer_in" 2 873 "int32(int8 bits,int8 bits)" `778 
F N "spi_xfer_in" 2 874 ""
V L "stream" 2 874 "int8" `779 
V L "bits" 2 874 "int8" `780 
F B "spi_xfer_in" 2 874 "int8(int8 stream,int8 bits)" `778 
F N "spi_xfer_in" 2 875 ""
V L "stream" 2 875 "int8" `779 
V L "bits" 2 875 "int8" `783 
f G "spi_xfer_in" 2 875 "int16(int8 stream,int8 bits,int16 count)" `781 
F N "spi_xfer_in" 2 876 ""
V L "stream" 2 876 "int8" `779 
V L "bits" 2 876 "int8" `783 
f G "spi_xfer_in" 2 876 "int32(int8 stream,int8 bits,int16 count)" `781 
F N "spi_transfer" 2 877 ""
V L "wData" 2 877 "*int8" `782 
V L "rData" 2 877 "*int8" `783 
V L "count" 2 877 "int16" `784 
F B "spi_transfer" 2 877 "void(*int8 wData,*int8 rData,int16 count)" `781 
F N "spi_transfer" 2 878 ""
V L "stream" 2 878 "int8" `786 
V L "wData" 2 878 "*int8" `787 
V L "rData" 2 878 "*int8" `788 
V L "count" 2 878 "int16" `789 
F B "spi_transfer" 2 878 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `785 
F N "spi_transfer_write" 2 879 ""
V L "wData" 2 879 "*int8" `791 
V L "count" 2 879 "int16" `792 
F B "spi_transfer_write" 2 879 "void(*int8 wData,int16 count)" `790 
F N "spi_transfer_write" 2 880 ""
V L "stream" 2 880 "int8" `794 
V L "wData" 2 880 "*int8" `795 
V L "count" 2 880 "int16" `796 
F B "spi_transfer_write" 2 880 "void(int8 stream,*int8 wData,int16 count)" `793 
F N "spi_transfer_read" 2 881 ""
V L "rData" 2 881 "*int8" `798 
V L "count" 2 881 "int16" `799 
F B "spi_transfer_read" 2 881 "void(*int8 rData,int16 count)" `797 
F N "spi_transfer_read" 2 882 ""
V L "stream" 2 882 "int8" `801 
V L "rData" 2 882 "*int8" `802 
V L "count" 2 882 "int16" `803 
F B "spi_transfer_read" 2 882 "void(int8 stream,*int8 rData,int16 count)" `800 
F N "spi_transfer_done" 2 883 ""
F B "spi_transfer_done" 2 883 "int8()" `804 
F N "spi_transfer_done" 2 884 ""
V L "stream" 2 884 "int8" `806 
F B "spi_transfer_done" 2 884 "int8(int8 stream)" `805 
F N "spi_transfer_clear" 2 885 ""
F B "spi_transfer_clear" 2 885 "void()" `807 
F N "spi_transfer_clear" 2 886 ""
V L "stream" 2 886 "int8" `809 
F B "spi_transfer_clear" 2 886 "void(int8 stream)" `808  "#use rtos() Prototypes:"
F N "rtos_run" 2 889 ""
F B "rtos_run" 2 889 "void()" `810 
F N "rtos_yield" 2 890 ""
F B "rtos_yield" 2 890 "void()" `811 
F N "rtos_enable" 2 891 ""
V L "task" 2 891 "int8" `813 
F B "rtos_enable" 2 891 "void(int8 task)" `812 
F N "rtos_disable" 2 892 ""
V L "task" 2 892 "int8" `815 
F B "rtos_disable" 2 892 "void(int8 task)" `814 
F N "rtos_terminate" 2 893 ""
F B "rtos_terminate" 2 893 "void()" `816 
F N "rtos_await" 2 894 ""
V L "flag" 2 894 "int8" `818 
F B "rtos_await" 2 894 "void(int8 flag)" `817 
F N "rtos_wait" 2 895 ""
V L "sem" 2 895 "int8" `820 
F B "rtos_wait" 2 895 "void(int8 sem)" `819 
F N "rtos_signal" 2 896 ""
V L "sem" 2 896 "int8" `822 
F B "rtos_signal" 2 896 "void(int8 sem)" `821 
F N "rtos_msg_send" 2 897 ""
V L "task" 2 897 "int8" `824 
V L "msg" 2 897 "int8" `825 
F B "rtos_msg_send" 2 897 "void(int8 task,int8 msg)" `823 
F N "rtos_msg_read" 2 898 ""
F B "rtos_msg_read" 2 898 "int8()" `826 
F N "rtos_msg_poll" 2 899 ""
F B "rtos_msg_poll" 2 899 "int8()" `827 
F N "rtos_overrun" 2 900 ""
V L "task" 2 900 "int8" `829 
F B "rtos_overrun" 2 900 "int8(int8 task)" `828 
F N "rtos_stats" 2 901 ""
V L "task" 2 901 "int8" `831 
V L "stat" 2 901 "*int8" `832 
F B "rtos_stats" 2 901 "void(int8 task,*int8 stat)" `830  "#use timer() Prototypes:"
F N "get_ticks" 2 904 ""
F B "get_ticks" 2 904 "int8()" `833 
F N "get_ticks" 2 905 ""
f G "get_ticks" 2 905 "int16(int8 stream)" `834 
F N "get_ticks" 2 906 ""
f G "get_ticks" 2 906 "int32(int8 stream)" `834 
F N "get_ticks" 2 907 ""
f G "get_ticks" 2 907 "?(int8 stream)" `834 
F N "get_ticks" 2 908 ""
V L "stream" 2 908 "int8" `835 
F B "get_ticks" 2 908 "int8(int8 stream)" `834 
F N "get_ticks" 2 909 ""
V L "stream" 2 909 "int8" `837 
f G "get_ticks" 2 909 "int16(int8 stream)" `836 
F N "get_ticks" 2 910 ""
V L "stream" 2 910 "int8" `837 
f G "get_ticks" 2 910 "int32(int8 stream)" `836 
F N "get_ticks" 2 911 ""
V L "stream" 2 911 "int8" `837 
f G "get_ticks" 2 911 "?(int8 stream)" `836 
F N "set_ticks" 2 912 ""
V L "value" 2 912 "int8" `837 
F B "set_ticks" 2 912 "void(int8 value)" `836 
F N "set_ticks" 2 913 ""
V L "value" 2 913 "int16" `839 
F B "set_ticks" 2 913 "void(int16 value)" `838 
F N "set_ticks" 2 914 ""
V L "value" 2 914 "int32" `841 
F B "set_ticks" 2 914 "void(int32 value)" `840 
F N "set_ticks" 2 915 ""
V L "value" 2 915 "?" `843 
F B "set_ticks" 2 915 "void(? value)" `842 
F N "set_ticks" 2 916 ""
V L "stream" 2 916 "int8" `845 
V L "value" 2 916 "int8" `846 
F B "set_ticks" 2 916 "void(int8 stream,int8 value)" `844 
F N "set_ticks" 2 917 ""
V L "stream" 2 917 "int8" `848 
V L "value" 2 917 "int16" `849 
F B "set_ticks" 2 917 "void(int8 stream,int16 value)" `847 
F N "set_ticks" 2 918 ""
V L "stream" 2 918 "int8" `851 
V L "value" 2 918 "int32" `852 
F B "set_ticks" 2 918 "void(int8 stream,int32 value)" `850 
F N "set_ticks" 2 919 ""
V L "stream" 2 919 "int8" `854 
V L "value" 2 919 "?" `855 
F B "set_ticks" 2 919 "void(int8 stream,? value)" `853  "#use pwm() Prototypes:"
F N "pwm_on" 2 922 ""
F B "pwm_on" 2 922 "void()" `856 
F N "pwm_on" 2 923 ""
V L "stream" 2 923 "int8" `858 
F B "pwm_on" 2 923 "void(int8 stream)" `857 
F N "pwm_off" 2 924 ""
F B "pwm_off" 2 924 "void()" `859 
F N "pwm_off" 2 925 ""
V L "stream" 2 925 "int8" `861 
F B "pwm_off" 2 925 "void(int8 stream)" `860 
F N "pwm_set_duty" 2 926 ""
V L "duty" 2 926 "int16" `863 
F B "pwm_set_duty" 2 926 "void(int16 duty)" `862 
F N "pwm_set_duty" 2 927 ""
V L "stream" 2 927 "int8" `865 
V L "duty" 2 927 "int16" `866 
F B "pwm_set_duty" 2 927 "void(int8 stream,int16 duty)" `864 
F N "pwm_set_duty_percent" 2 928 ""
V L "percent" 2 928 "int16" `868 
F B "pwm_set_duty_percent" 2 928 "void(int16 percent)" `867 
F N "pwm_set_duty_percent" 2 929 ""
V L "stream" 2 929 "int8" `870 
V L "percent" 2 929 "int16" `871 
F B "pwm_set_duty_percent" 2 929 "void(int8 stream,int16 percent)" `869 
F N "pwm_set_frequency" 2 930 ""
V L "frequency" 2 930 "int32" `873 
F B "pwm_set_frequency" 2 930 "void(int32 frequency)" `872 
F N "pwm_set_frequency" 2 931 ""
V L "stream" 2 931 "int8" `875 
V L "frequency" 2 931 "int32" `876 
F B "pwm_set_frequency" 2 931 "void(int8 stream,int32 frequency)" `874 
F N "pwm_get_duty_period" 2 932 ""
F B "pwm_get_duty_period" 2 932 "int16()" `877 
F N "pwm_get_duty_period" 2 933 ""
V L "stream" 2 933 "int8" `879 
F B "pwm_get_duty_period" 2 933 "int16(int8 stream)" `878  "#use capture() Prototypes:"
F N "get_capture_time" 2 936 ""
F B "get_capture_time" 2 936 "int16()" `880 
F N "get_capture_time" 2 937 ""
V L "stream" 2 937 "int8" `882 
F B "get_capture_time" 2 937 "int16(int8 stream)" `881 
F N "get_capture_event" 2 938 ""
F B "get_capture_event" 2 938 "int8()" `883 
F N "get_capture_event" 2 939 ""
V L "stream" 2 939 "int8" `885 
F B "get_capture_event" 2 939 "int8(int8 stream)" `884  "Environment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
F N "goto_address" 2 948 ""
V L "address" 2 948 "int16" `887 
F B "goto_address" 2 948 "void(int16 address)" `886 
F N "label_address" 2 949 ""
V L "label" 2 949 "int16" `889 
F B "label_address" 2 949 "int16(int16 label)" `888  "Program Memory Prototypes:"
F N "read_program_memory" 2 952 ""
V L "address" 2 952 "int16" `891 
V L "DataPtr" 2 952 "*int8" `892 
V L "count" 2 952 "int16" `893 
F B "read_program_memory" 2 952 "void(int16 address,*int8 DataPtr,int16 count)" `890 
F N "erase_program_memory" 2 953 ""
V L "address" 2 953 "int16" `895 
F B "erase_program_memory" 2 953 "void(int16 address)" `894 
F N "write_program_memory" 2 954 ""
V L "address" 2 954 "int16" `897 
V L "DataPtr" 2 954 "*int8" `898 
V L "count" 2 954 "int16" `899 
F B "write_program_memory" 2 954 "void(int16 address,*int8 DataPtr,int16 count)" `896 
F N "read_configuration_memory" 2 955 ""
V L "DataPtr" 2 955 "*int8" `901 
V L "count" 2 955 "int8" `902 
F B "read_configuration_memory" 2 955 "void(*int8 DataPtr,int8 count)" `900 
F N "write_configuration_memory" 2 956 ""
V L "DataPtr" 2 956 "*int8" `904 
V L "count" 2 956 "int8" `905 
F B "write_configuration_memory" 2 956 "void(*int8 DataPtr,int8 count)" `903  "INT"
c L "write_configuration_memory" 2 1 4 "FUNCTION"
F N "enable_interrupts" 2 963 ""
V L "interrupt" 2 963 "int16" `907 
F B "enable_interrupts" 2 963 "void(int16 interrupt)" `906 
F N "disable_interrupts" 2 964 ""
V L "interrupt" 2 964 "int16" `909 
F B "disable_interrupts" 2 964 "void(int16 interrupt)" `908 
F N "clear_interrupt" 2 965 ""
V L "interrupt" 2 965 "int16" `911 
F B "clear_interrupt" 2 965 "void(int16 interrupt)" `910 
F N "interrupt_active" 2 966 ""
V L "interrupt" 2 966 "int16" `913 
F B "interrupt_active" 2 966 "int8(int16 interrupt)" `912 
F N "interrupt_enabled" 2 967 ""
V L "interrupt" 2 967 "int16" `915 
F B "interrupt_enabled" 2 967 "int8(int16 interrupt)" `914 
F N "ext_int_edge" 2 968 ""
V L "source" 2 968 "int8" `917 
V L "edge" 2 968 "int8" `918 
F B "ext_int_edge" 2 968 "void(int8 source,int8 edge)" `916 
F N "jump_to_isr" 2 969 ""
V L "address" 2 969 "int16" `920 
F B "jump_to_isr" 2 969 "void(int16 address)" `919  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 971 "0x40"
D G "H_TO_L" 2 972 "0"
D G "INTR_GLOBAL" 2 976 "0x0800"
D G "GLOBAL" 2 977 "0x0800" "For compatibility with PIC16/18"
D G "INTR_NORMAL" 2 978 "0x1000"
D G "INTR_ALTERNATE" 2 979 "0x2000"
D G "INTR_LEVEL0" 2 980 "0x3000"
D G "INTR_LEVEL1" 2 981 "0x3001"
D G "INTR_LEVEL2" 2 982 "0x3002"
D G "INTR_LEVEL3" 2 983 "0x3003"
D G "INTR_LEVEL4" 2 984 "0x3004"
D G "INTR_LEVEL5" 2 985 "0x3005"
D G "INTR_LEVEL6" 2 986 "0x3006"
D G "INTR_LEVEL7" 2 987 "0x3007"
D G "INTR_CN_PIN" 2 1003 "0x8000" "or in a PIN_xx constant (enable/disable only)"
D G "INT_OSCFAIL" 2 1005 "1"
D G "INT_ADDRERR" 2 1006 "2"
D G "INT_STACKERR" 2 1007 "3"
D G "INT_MATHERR" 2 1008 "4"
D G "INT_DMAERR" 2 1009 "5"
D G "INT_EXT0" 2 1010 "6"
D G "INT_IC1" 2 1011 "7"
D G "INT_OC1" 2 1012 "8"
D G "INT_TIMER1" 2 1013 "9"
D G "INT_DMA0" 2 1014 "69"
D G "INT_IC2" 2 1015 "70"
D G "INT_OC2" 2 1016 "71"
D G "INT_TIMER2" 2 1017 "72"
D G "INT_TIMER3" 2 1018 "73"
D G "INT_SPI1E" 2 1019 "74"
D G "INT_SPI1" 2 1020 "75"
D G "INT_RDA" 2 1021 "76"
D G "INT_TBE" 2 1022 "77"
D G "INT_ADC1" 2 1023 "78"
D G "INT_DMA1" 2 1024 "79"
D G "INT_SI2C" 2 1025 "81"
D G "INT_MI2C" 2 1026 "82"
D G "INT_CNI" 2 1027 "84"
D G "INT_EXT1" 2 1028 "85"
D G "INT_IC7" 2 1029 "87"
D G "INT_IC8" 2 1030 "88"
D G "INT_DMA2" 2 1031 "89"
D G "INT_OC3" 2 1032 "90"
D G "INT_OC4" 2 1033 "91"
D G "INT_TIMER4" 2 1034 "92"
D G "INT_TIMER5" 2 1035 "93"
D G "INT_EXT2" 2 1036 "94"
D G "INT_RDA2" 2 1037 "95"
D G "INT_TBE2" 2 1038 "96"
D G "INT_SPI2E" 2 1039 "97"
D G "INT_SPI2" 2 1040 "98"
D G "INT_DMA3" 2 1041 "101"
D G "INT_DMA4" 2 1042 "111"
D G "INT_DMA5" 2 1043 "126"
D G "INT_UART1E" 2 1044 "130"
D G "INT_UART2E" 2 1045 "131"
D G "INT_DMA6" 2 1046 "133"
D G "INT_DMA7" 2 1047 "134"
D G "INT_COMP" 2 1048 "152"
D G "INT_PMP" 2 1049 "164"
D G "INT_RTC" 2 1050 "173"
D G "INT_CRC" 2 1051 "174"
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint16 quot,sint16 rem}" `930 
T G "ldiv_t" 3 39 "{sint32 quot,sint32 rem}" `934  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 44 2 "FUNCTION"
C L "jump_to_isr" 3 47 1 "*"
C L "jump_to_isr" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*sint8" `936 
f G "atoi" 3 51 "sint16(*sint8 s)" `935  "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 3 57 "(s) atol(s)"
C L "atoi" 3 47 5 "FUNCTION"
F N "atoi48" 3 69 ""
V L "s" 3 69 "*sint8" `938 
f G "atoi48" 3 69 "?(*sint8 s)" `937  "Syntax: signed int64  atoi64(char * s)"
C L "atoi48" 3 47 2 "FUNCTION"
F N "atoi64" 3 74 ""
V L "s" 3 74 "*sint8" `940 
f G "atoi64" 3 74 "?(*sint8 s)" `939  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi64" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `942 
V L "base" 3 80 "int16" `943 
V L "s" 3 80 "*sint8" `944 
f G "itoa" 3 80 "*sint8(sint32 num,int16 base,*sint8 s)" `941  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*sint8" `946 
f G "atol" 3 86 "sint32(*sint8 s)" `945  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*sint8" `948 
V L "endptr" 3 94 "*sint8" `949 
V L "base" 3 94 "sint16" `950 
f G "strtol" 3 94 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `947  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*sint8" `952 
V L "endptr" 3 102 "*sint8" `953 
V L "base" 3 102 "sint16" `954 
f G "strtoul" 3 102 "int32(*sint8 s,*sint8 endptr,sint16 base)" `951  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*sint8" `956 
V L "endptr" 3 111 "??0 *" `957 
f G "strtof" 3 111 "float(*sint8 s,??0 * endptr)" `955 
F N "strtof48" 3 113 ""
V L "s" 3 113 "*sint8" `960 
V L "endptr" 3 113 "??0 *" `961 
f G "strtof48" 3 113 "?(*sint8 s,??0 * endptr)" `959 
F N "strtod" 3 114 ""
V L "s" 3 114 "*sint8" `964 
V L "endptr" 3 114 "??0 *" `965 
f G "strtod" 3 114 "?(*sint8 s,??0 * endptr)" `963  "Standard template: float32 atof(char * s)"
C L "strtod" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtod" 3 121 3 "FUNCTION"
C L "strtod" 3 131 1 "*"
D G "atof48" 3 135 "(s) strtof48(s, 0)"
C L "strtod" 3 131 1 "FUNCTION"
C L "strtod" 3 137 1 "*"
D G "atof64" 3 141 "(s) strtod(s, 0)"
C L "strtod" 3 137 1 "FUNCTION"
C L "strtod" 3 144 1 "*"
C L "strtod" 3 144 1 "*"
C L "strtod" 3 144 1 "*"
F N "atoe" 3 154 ""
V L "s" 3 154 "*sint8" `968 
f G "atoe" 3 154 "float(*sint8 s)" `967  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `969  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `971 
f G "srand" 3 192 "void(int32 seed)" `970  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*sint8" `973 
f G "system" 3 206 "sint8(*sint8 string)" `972  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint16" `975 
V L "denom" 3 252 "sint16" `976 
f G "div" 3 252 "div_t(sint16 numer,sint16 denom)" `974 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint32" `978 
V L "denom" 3 253 "sint32" `979 
f G "ldiv" 3 253 "ldiv_t(sint32 numer,sint32 denom)" `977  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `981 
V L "s2" 5 34 "*void" `982 
V L "n" 5 34 "int16" `983 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `980 
V L "sc1" 5 36 "*int8" `984 
V L "sc2" 5 37 "*int8" `985 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*sint8" `987 
V L "s2" 5 61 "*sint8" `988 
V L "n" 5 61 "int16" `989 
F G "strncpy" 5 62 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `986 
V L "s" 5 63 "*sint8" `990 
C L "strcat" 5 19 3 "FUNCTION"
F N "strcat" 5 78 ""
V L "s1" 5 78 "*sint8" `992 
V L "s2" 5 78 "*sint8" `993 
F G "strcat" 5 79 "*sint8(*sint8 s1,*sint8 s2)" `991 
V L "s" 5 80 "*int8" `994 
C L "strncat" 5 19 2 "FUNCTION"
F N "strncat" 5 96 ""
V L "s1" 5 96 "*sint8" `996 
V L "s2" 5 96 "*sint8" `997 
V L "n" 5 96 "int16" `998 
F G "strncat" 5 97 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `995 
V L "s" 5 98 "*sint8" `999 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `1001 
V L "s2" 5 120 "*void" `1002 
V L "n" 5 120 "int16" `1003 
F G "memcmp" 5 121 "sint16(*void s1,*void s2,int16 n)" `1000 
V L "su1" 5 122 "*int8" `1004 
V L "su2" 5 122 "*int8" `1005 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*sint8" `1007 
V L "s2" 5 134 "*sint8" `1008 
F G "strcmp" 5 135 "sint16(*sint8 s1,*sint8 s2)" `1006 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*sint8" `1010 
V L "s2" 5 144 "*sint8" `1011 
F G "strcoll" 5 145 "sint16(*sint8 s1,*sint8 s2)" `1009 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*sint8" `1013 
V L "s2" 5 157 "*sint8" `1014 
V L "n" 5 157 "int16" `1015 
F G "strncmp" 5 158 "sint16(*sint8 s1,*sint8 s2,int16 n)" `1012 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*sint8" `1017 
V L "s2" 5 170 "*sint8" `1018 
V L "n" 5 170 "int16" `1019 
F G "strxfrm" 5 171 "int16(*sint8 s1,*sint8 s2,int16 n)" `1016 
V L "c" 5 172 "sint8" `1020 
V L "n1" 5 173 "int16" `1021 
C L "strxfrm" 5 19 1 "FUNCTION"
C L "memchr" 5 19 3 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `1023 
V L "c" 5 201 "int8" `1024 
V L "n" 5 201 "int16" `1025 
F G "memchr" 5 202 "*sint8(*void s,int8 c,int16 n)" `1022 
V L "uc" 5 203 "sint8" `1026 
V L "su" 5 204 "*sint8" `1027 
C L "strchr" 5 19 2 "FUNCTION"
F N "strchr" 5 215 ""
V L "s" 5 215 "*sint8" `1029 
V L "c" 5 215 "sint8" `1030 
F G "strchr" 5 216 "*sint8(*sint8 s,sint8 c)" `1028 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*sint8" `1032 
V L "s2" 5 227 "*sint8" `1033 
F G "strcspn" 5 228 "int16(*sint8 s1,*sint8 s2)" `1031 
V L "sc1" 5 229 "*sint8" `1034 
V L "sc2" 5 229 "*sint8" `1035 
C L "strpbrk" 5 19 4 "FUNCTION"
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*sint8" `1037 
V L "s2" 5 242 "*sint8" `1038 
F G "strpbrk" 5 243 "*sint8(*sint8 s1,*sint8 s2)" `1036 
V L "sc1" 5 244 "*sint8" `1039 
V L "sc2" 5 244 "*sint8" `1040 
C L "strrchr" 5 19 2 "FUNCTION"
F N "strrchr" 5 257 ""
V L "s" 5 257 "*sint8" `1042 
V L "c" 5 257 "sint8" `1043 
F G "strrchr" 5 258 "*sint8(*sint8 s,sint8 c)" `1041 
V L "p" 5 259 "*sint8" `1044 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*sint8" `1046 
V L "s2" 5 272 "*sint8" `1047 
F G "strspn" 5 273 "int16(*sint8 s1,*sint8 s2)" `1045 
V L "sc1" 5 274 "*sint8" `1048 
V L "sc2" 5 274 "*sint8" `1049 
C L "strstr" 5 19 6 "FUNCTION"
F N "strstr" 5 291 ""
V L "s1" 5 291 "*sint8" `1051 
V L "s2" 5 291 "*sint8" `1052 
F G "strstr" 5 292 "*sint8(*sint8 s1,*sint8 s2)" `1050 
V L "s" 5 293 "*sint8" `1053 
V L "t" 5 293 "*sint8" `1054 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*sint8" `1056 
F G "strlen" 5 319 "int16(*sint8 s)" `1055 
V L "sc" 5 320 "*sint8" `1057 
C L "strtok" 5 19 13 "FUNCTION"
F N "strtok" 5 341 ""
V L "s1" 5 341 "*sint8" `1059 
V L "s2" 5 341 "*sint8" `1060 
F G "strtok" 5 342 "*sint8(*sint8 s1,*sint8 s2)" `1058 
V L "beg" 5 343 "*sint8" `1061 
V L "end" 5 343 "*sint8" `1062 
V L "save" 5 344 "*sint8" `1063 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*sint8" `1065 
V L "s2" 5 392 "*sint8" `1066 
F G "stricmp" 5 393 "sint16(*sint8 s1,*sint8 s2)" `1064 
C L "strlwr" 5 19 3 "FUNCTION"
F N "strlwr" 5 406 ""
V L "s" 5 406 "*sint8" `1070 
F G "strlwr" 5 407 "*sint8(*sint8 s)" `1069 
V L "p" 5 408 "*sint8" `1071 
C L "strupr" 5 19 3 "FUNCTION"
F N "strupr" 5 420 ""
V L "s" 5 420 "*sint8" `1073 
F G "strupr" 5 421 "*sint8(*sint8 s)" `1072 
V L "p" 5 422 "*sint8" `1074 
F N "div" 3 275 ""
V L "numer" 3 275 "sint16" `975 
V L "denom" 3 275 "sint16" `1077 
F G "div" 3 276 "div_t(sint16 numer,sint16 denom)" `974 
V L "val" 3 277 "div_t" `1075 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint32" `978 
V L "denom" 3 283 "sint32" `1078 
F G "ldiv" 3 284 "ldiv_t(sint32 numer,sint32 denom)" `977 
V L "val" 3 285 "ldiv_t" `1076 
F N "atoe" 3 293 ""
V L "s" 3 293 "*sint8" `1084 
F G "atoe" 3 294 "float(*sint8 s)" `967 
V L "pow10" 3 295 "float" `1083 
V L "result" 3 296 "float" `1084 
V L "sign" 3 297 "int8" `1085 
V L "expsign" 3 298 "int8" `1086 
V L "c" 3 299 "sint8" `1087 
V L "ptr" 3 300 "int8" `1088 
V L "i" 3 301 "int8" `1089 
V L "exp" 3 302 "float" `1090 
V L "expcnt" 3 303 "int8" `1091 
C L "atoe" 3 329 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*sint8" `1104 
F G "atoi" 3 431 "sint16(*sint8 s)" `935 
V L "result" 3 432 "sint16" `1103 
V L "sign" 3 433 "int16" `1104 
V L "base" 3 433 "int16" `1105 
V L "index" 3 433 "int16" `1106 
V L "c" 3 434 "sint8" `1107 
C L "atoi" 3 329 1 "FUNCTION"
C L "atoi" 3 329 1 "FUNCTION"
C L "atoi" 3 329 1 "FUNCTION"
C L "atoi" 3 329 1 "FUNCTION"
C L "atoi" 3 329 1 "FUNCTION"
C L "atoi" 3 329 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*sint8" `1109 
F G "atol" 3 500 "sint32(*sint8 s)" `945 
V L "result" 3 501 "sint32" `1108 
V L "sign" 3 502 "int16" `1109 
V L "base" 3 502 "int16" `1110 
V L "index" 3 502 "int16" `1111 
V L "c" 3 503 "sint8" `1112 
C L "atol" 3 329 1 "FUNCTION"
C L "atol" 3 329 1 "FUNCTION"
C L "atol" 3 329 1 "FUNCTION"
C L "atol" 3 329 1 "FUNCTION"
C L "mult_with10" 3 329 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "sint32" `1114 
F G "mult_with10" 3 567 "sint32(sint32 num)" `1113 
F N "atoi48" 3 640 ""
V L "s" 3 640 "*sint8" `1116 
F G "atoi48" 3 641 "?(*sint8 s)" `937 
V L "result" 3 642 "?" `1115 
V L "sign" 3 643 "sint8" `1116 
V L "base" 3 643 "sint8" `1117 
V L "index" 3 643 "sint8" `1118 
V L "c" 3 644 "sint8" `1119 
C L "atoi48" 3 329 1 "FUNCTION"
C L "atoi48" 3 329 1 "FUNCTION"
C L "atoi48" 3 329 1 "FUNCTION"
C L "atoi48" 3 329 1 "FUNCTION"
C L "atoi48" 3 329 1 "FUNCTION"
F N "atoi64" 3 705 ""
V L "s" 3 705 "*sint8" `1121 
F G "atoi64" 3 706 "?(*sint8 s)" `939 
V L "result" 3 707 "?" `1120 
V L "sign" 3 708 "sint8" `1121 
V L "base" 3 708 "sint8" `1122 
V L "index" 3 708 "sint8" `1123 
V L "c" 3 709 "sint8" `1124 
C L "atoi64" 3 329 1 "FUNCTION"
C L "atoi64" 3 329 1 "FUNCTION"
C L "atoi64" 3 329 1 "FUNCTION"
C L "atoi64" 3 329 1 "FUNCTION"
C L "atoi64" 3 329 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `942 
V L "base" 3 771 "int16" `943 
V L "s" 3 771 "*sint8" `1128 
F G "itoa" 3 772 "*sint8(sint32 num,int16 base,*sint8 s)" `941 
V L "temp" 3 773 "int32" `1125 
V L "i" 3 774 "int8" `1126 
V L "sign" 3 774 "int8" `1127 
V L "cnt" 3 774 "int8" `1128 
V L "c" 3 775 "sint8" `1129 
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
F N "itoa" 3 810 ""
V L "num" 3 810 "?" `1131 
V L "base" 3 810 "int16" `1132 
V L "s" 3 810 "*sint8" `1133 
F G "itoa" 3 811 "*sint8(? num,int16 base,*sint8 s)" `1130 
V L "temp" 3 812 "?" `1134 
V L "i" 3 813 "int8" `1135 
V L "sign" 3 813 "int8" `1136 
V L "cnt" 3 813 "int8" `1137 
V L "c" 3 814 "sint8" `1138 
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
F N "itoa" 3 847 ""
V L "num" 3 847 "?" `1146 
V L "base" 3 847 "int16" `1147 
V L "s" 3 847 "*sint8" `1148 
F G "itoa" 3 848 "*sint8(? num,int16 base,*sint8 s)" `1145 
V L "temp" 3 849 "?" `1149 
V L "i" 3 850 "int8" `1150 
V L "sign" 3 850 "int8" `1151 
V L "cnt" 3 850 "int8" `1152 
V L "c" 3 851 "sint8" `1153 
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
C L "itoa" 3 329 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*sint8" `956 
V L "endptr" 3 886 "??0 *" `1162 
F G "strtof" 3 887 "float(*sint8 s,??0 * endptr)" `955 
V L "pow10" 3 888 "float" `1160 
V L "result" 3 889 "float" `1161 
V L "skip" 3 890 "int1" `1162 
V L "sign" 3 890 "int1" `1163 
V L "point" 3 890 "int1" `1164 
V L "c" 3 891 "sint8" `1165 
V L "ptr" 3 892 "int8" `1166 
F N "strtof48" 3 959 ""
V L "s" 3 959 "*sint8" `960 
V L "endptr" 3 959 "??0 *" `1170 
F G "strtof48" 3 960 "?(*sint8 s,??0 * endptr)" `959 
V L "pow10" 3 961 "?" `1168 
V L "result" 3 962 "?" `1169 
V L "skip" 3 963 "int1" `1170 
V L "sign" 3 963 "int1" `1171 
V L "point" 3 963 "int1" `1172 
V L "c" 3 964 "sint8" `1173 
V L "ptr" 3 965 "int8" `1174 
F N "strtod" 3 1031 ""
V L "s" 3 1031 "*sint8" `964 
V L "endptr" 3 1031 "??0 *" `1189 
F G "strtod" 3 1032 "?(*sint8 s,??0 * endptr)" `963 
V L "pow10" 3 1033 "?" `1187 
V L "result" 3 1034 "?" `1188 
V L "skip" 3 1035 "int1" `1189 
V L "sign" 3 1035 "int1" `1190 
V L "point" 3 1035 "int1" `1191 
V L "c" 3 1036 "sint8" `1192 
V L "ptr" 3 1037 "int8" `1193 
F N "strtoul" 3 1105 ""
V L "s" 3 1105 "*sint8" `952 
V L "endptr" 3 1105 "*sint8" `953 
V L "base" 3 1105 "sint16" `1209 
F G "strtoul" 3 1106 "int32(*sint8 s,*sint8 endptr,sint16 base)" `951 
V L "sc" 3 1107 "*sint8" `1206 
V L "s1" 3 1107 "*sint8" `1207 
V L "sd" 3 1107 "*sint8" `1208 
V L "x" 3 1108 "int32" `1209 
V L "sign" 3 1109 "sint8" `1210 
V L "digits" 3 1110 "sint8[1]" `1211 
C L "strtoul" 3 329 1 "FUNCTION"
C L "strtoul" 3 329 1 "FUNCTION"
C L "strtoul" 3 329 1 "FUNCTION"
F N "strtol" 3 1167 ""
V L "s" 3 1167 "*sint8" `948 
V L "endptr" 3 1167 "*sint8" `949 
V L "base" 3 1167 "sint16" `1216 
F G "strtol" 3 1168 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `947 
V L "sc" 3 1169 "*sint8" `1213 
V L "s1" 3 1169 "*sint8" `1214 
V L "sd" 3 1169 "*sint8" `1215 
V L "x" 3 1170 "sint32" `1216 
V L "sign" 3 1171 "sint8" `1217 
V L "digits" 3 1172 "sint8[1]" `1218 
C L "strtol" 3 329 1 "FUNCTION"
C L "strtol" 3 329 1 "FUNCTION"
C L "strtol" 3 329 1 "FUNCTION"
F N "system" 3 1231 ""
V L "string" 3 1231 "*sint8" `1221 
F G "system" 3 1232 "sint8(*sint8 string)" `972 
F N "mblen" 3 1236 ""
V L "s" 3 1236 "*sint8" `1221 
V L "n" 3 1236 "int16" `1222 
F G "mblen" 3 1237 "int16(*sint8 s,int16 n)" `1220 
F N "mbtowc" 3 1241 ""
V L "pwc" 3 1241 "*int8" `1224 
V L "s" 3 1241 "*sint8" `1225 
V L "n" 3 1241 "int16" `1226 
F G "mbtowc" 3 1242 "sint8(*int8 pwc,*sint8 s,int16 n)" `1223 
F N "wctomb" 3 1247 ""
V L "s" 3 1247 "*sint8" `1228 
V L "wchar" 3 1247 "int8" `1229 
F G "wctomb" 3 1248 "sint8(*sint8 s,int8 wchar)" `1227 
F N "mbstowcs" 3 1253 ""
V L "pwcs" 3 1253 "*int8" `1231 
V L "s" 3 1253 "*sint8" `1232 
V L "n" 3 1253 "int16" `1233 
F G "mbstowcs" 3 1254 "int16(*int8 pwcs,*sint8 s,int16 n)" `1230 
F N "wcstombs" 3 1259 ""
V L "s" 3 1259 "*sint8" `1235 
V L "pwcs" 3 1259 "*int8" `1236 
V L "n" 3 1259 "int16" `1237 
F G "wcstombs" 3 1260 "int16(*sint8 s,*int8 pwcs,int16 n)" `1234 
V G "_Randseed" 3 1269 "int32" `1238 
F N "rand" 3 1271 ""
F G "rand" 3 1272 "int16()" `969 
F N "srand" 3 1277 ""
V L "seed" 3 1277 "int32" `1243 
F G "srand" 3 1278 "void(int32 seed)" `970 
F N "*_Cmpfun" 3 1289 ""
V L "p1" 3 1289 "*sint8" `1243 
V L "p2" 3 1289 "*sint8" `1244 
T G "*_Cmpfun" 3 1289 "sint16(*sint8 p1,*sint8 p2)" `1242 
F N "qsort" 3 1294 ""
V L "qdata" 3 1294 "*sint8" `1247 
V L "qitems" 3 1294 "int16" `1248 
V L "qsize" 3 1294 "int16" `1249 
V L "cmp" 3 1294 "_Cmpfun" `1250 
F G "qsort" 3 1294 "void(*sint8 qdata,int16 qitems,int16 qsize,_Cmpfun cmp)" `1246 
V L "m" 3 1295 "int16" `1251 
V L "j" 3 1295 "int16" `1252 
V L "i" 3 1295 "int16" `1253 
V L "l" 3 1295 "int16" `1254 
V L "done" 3 1296 "int1" `1255 
V L "t" 3 1297 "int8[16]" `1256 
F N "bsearch" 3 1322 ""
V L "key" 3 1322 "*sint8" `1259 
V L "base" 3 1322 "*sint8" `1260 
V L "num" 3 1322 "int16" `1261 
V L "width" 3 1322 "int16" `1262 
V L "cmp" 3 1322 "_Cmpfun" `1263 
F G "bsearch" 3 1323 "*sint8(*sint8 key,*sint8 base,int16 num,int16 width,_Cmpfun cmp)" `1258 
V L "p" 3 1324 "*sint8" `1264 
V L "q" 3 1324 "*sint8" `1265 
V L "n" 3 1325 "int16" `1266 
V L "pivot" 3 1326 "int16" `1267 
V L "val" 3 1327 "sint16" `1268 
C L "bsearch" 3 329 1 "FUNCTION"
D G "_STDINT" 7 19 ""
T G "int8_t" 7 23 "sint8" `1269 
T G "uint8_t" 7 24 "int8" `1270 
T G "int16_t" 7 25 "sint16" `1271 
T G "uint16_t" 7 26 "int16" `1272 
T G "int32_t" 7 27 "sint32" `1273 
T G "uint32_t" 7 28 "int32" `1274  "typedef signed int24 int24_t;"
T G "int64_t" 7 33 "?" `1275 
T G "uint64_t" 7 34 "?" `1276 
D G "INT8_MAX" 7 37 " (127)"
D G "INT8_MIN" 7 38 " (-128)"
D G "UINT8_MAX" 7 39 " (255)"
D G "INT16_MAX" 7 41 " (32767)"
D G "INT16_MIN" 7 42 " (-32768)"
D G "UINT16_MAX" 7 43 " (65535)"
D G "INT32_MAX" 7 45 " (2147483647)"
D G "INT32_MIN" 7 46 " (-2147483648)"
D G "UINT32_MAX" 7 47 " (4294967295)"
D G "INT64_MAX" 7 54 " (9223372036854775807)"
D G "INT64_MIN" 7 55 " (-9223372036854775808)"
D G "UINT64_MAX" 7 56 " (18446744073709551615)"
T G "int_least8_t" 7 61 "sint8" `1277 
T G "uint_least8_t" 7 62 "int8" `1278 
T G "int_least16_t" 7 63 "sint16" `1279 
T G "uint_least16_t" 7 64 "int16" `1280 
T G "int_least32_t" 7 65 "sint32" `1281 
T G "uint_least32_t" 7 66 "int32" `1282  "typedef signed int24 int_least24_t;"
T G "int_least64_t" 7 71 "?" `1283 
T G "uint_least64_t" 7 72 "?" `1284 
D G "INT_LEAST8_MAX" 7 75 " (127)"
D G "INT_LEAST8_MIN" 7 76 " (-128)"
D G "UINT_LEAST8_MAX" 7 77 " (255)"
D G "INT_LEAST16_MAX" 7 79 " (32767)"
D G "INT_LEAST16_MIN" 7 80 " (-32768)"
D G "UINT_LEAST16_MAX" 7 81 " (65535)"
D G "INT_LEAST32_MAX" 7 83 " (2147483647)"
D G "INT_LEAST32_MIN" 7 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 7 85 " (4294967295)"
D G "INT_LEAST64_MAX" 7 92 " (9223372036854775807)"
D G "INT_LEAST64_MIN" 7 93 " (-9223372036854775808)"
D G "UINT_LEAST64_MAX" 7 94 " (18446744073709551615)"
T G "int_fast8_t" 7 100 "sint16" `1285 
T G "uint_fast8_t" 7 101 "int16" `1286 
D G "INT_FAST8_MAX" 7 102 " (32767)"
D G "INT_FAST8_MIN" 7 103 " (-32768)"
D G "UINT_FAST8_MAX" 7 104 " (65535)"
T G "int_fast16_t" 7 105 "sint16" `1287 
T G "uint_fast16_t" 7 106 "int16" `1288  "typedef signed int24 int_fast24_t;"
T G "int_fast64_t" 7 109 "?" `1289 
T G "uint_fast64_t" 7 110 "?" `1290 
T G "int_fast32_t" 7 121 "sint32" `1291 
T G "uint_fast32_t" 7 122 "int32" `1292 
D G "INT_FAST16_MAX" 7 124 " (32767)"
D G "INT_FAST16_MIN" 7 125 " (-32768)"
D G "UINT_FAST16_MAX" 7 126 " (65535)"
D G "INT_FAST32_MAX" 7 128 " (2147483647)"
D G "INT_FAST32_MIN" 7 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 7 130 " (4294967295)"
D G "INT_FAST64_MAX" 7 137 " (9223372036854775807)"
D G "INT_FAST64_MIN" 7 138 " (-9223372036854775808)"
D G "UINT_FAST64_MAX" 7 139 " (18446744073709551615)"
T G "uintptr_t" 7 145 "int32" `1293 
T G "intptr_t" 7 146 "sint32" `1294 
D G "INT8_C" 7 152 "(val) ((int8_t)val)"
D G "UINT8_C" 7 153 "(val) ((uint8_t)val)"
D G "INT16_C" 7 154 "(val) ((int16_t)val)"
D G "UINT16_C" 7 155 "(val) ((uint16_t)val)"
D G "INT32_C" 7 156 "(val) ((int32_t)val)"
D G "UINT32_C" 7 157 "(val) ((uint32_t)val)"
D G "INT64_C" 7 160 "(val) ((int64_t)val)"
D G "UINT64_C" 7 161 "(val) ((uint64_t)val)"
T G "intmax_t" 7 171 "?" `1295 
T G "uintmax_t" 7 172 "?" `1296 
D G "INTMAXN_MAX" 7 174 " (9223372036854775807)"
D G "INTMAXN_MIN" 7 175 " (-9223372036854775808)"
D G "UINTMAXN_MAX" 7 176 " (18446744073709551615)"
D G "INTMAX_C" 7 178 "(value) ((signed int64)val)"
D G "UINTMAX_C" 7 179 "(value) ((unsigned int64)val)"
D G "_STDIO" 8 12 ""
D G "SH" 0 36 "PIN_B10" "DO, active low to sample"
D G "SYNC" 0 37 "PIN_B11" "DO. active high when VI data can be sampled"
D G "SCLK" 0 38 "PIN_B5" "DO, SPI clock"
D G "CS" 0 39 "PIN_A4" "DO. active low chip select"
D G "MOSI" 0 40 "PIN_B7" "DO, MOSI"
D G "LED" 0 41 "PIN_A2" "DO, active high LED"
V G "DLAY" 0 44 "uint8_t" `1297 
V G "LONG_DLAY" 0 45 "uint8_t" `1299 
V G "HIGH" 0 46 "uint8_t" `1301 
V G "LOW" 0 47 "uint8_t" `1303 
V G "g_Phase" 0 48 "uint8_t" `1305 
C L "MAIN" 0 34 2 "FUNCTION"
F N "MAIN" 0 54 ""
F G "MAIN" 0 55 "void()" `1306 
V L "PHase_Count" 0 56 "uint16_t" `1307  "setup_timer1(TMR_INTERNAL | TMR_DIV_BY_256, 16);"
C L "MAIN" 0 34 4 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 2 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 2 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
C L "MAIN" 0 34 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "real_address" 1 0
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 4
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_comparator" 1 2
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "set_analog_pins" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc16" 1 3
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "setup_dma" 3 0
F B "dma_start" 3 5
F B "dma_status" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
