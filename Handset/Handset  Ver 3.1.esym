D G "__PCH__" 0 0 ""5.107""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""24-Jul-23""
D G "__TIME__" 0 0 ""09:17:23""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Example program to use the custom RN487x driver"
c L "set_tris_a" 1 1 26 "FUNCTION"
F N "set_tris_a" 1 73 ""
V L "value" 1 73 "int8" `55 
F B "set_tris_a" 1 73 "void(int8 value)" `54 
F N "set_tris_b" 1 74 ""
V L "value" 1 74 "int8" `57 
F B "set_tris_b" 1 74 "void(int8 value)" `56 
F N "set_tris_c" 1 75 ""
V L "value" 1 75 "int8" `59 
F B "set_tris_c" 1 75 "void(int8 value)" `58 
F N "set_tris_d" 1 76 ""
V L "value" 1 76 "int8" `61 
F B "set_tris_d" 1 76 "void(int8 value)" `60 
F N "set_tris_e" 1 77 ""
V L "value" 1 77 "int8" `63 
F B "set_tris_e" 1 77 "void(int8 value)" `62 
F N "set_input_level_a" 1 78 ""
V L "value" 1 78 "int8" `65 
F B "set_input_level_a" 1 78 "void(int8 value)" `64 
F N "set_input_level_b" 1 79 ""
V L "value" 1 79 "int8" `67 
F B "set_input_level_b" 1 79 "void(int8 value)" `66 
F N "set_input_level_c" 1 80 ""
V L "value" 1 80 "int8" `69 
F B "set_input_level_c" 1 80 "void(int8 value)" `68 
F N "set_input_level_d" 1 81 ""
V L "value" 1 81 "int8" `71 
F B "set_input_level_d" 1 81 "void(int8 value)" `70 
F N "set_input_level_e" 1 82 ""
V L "value" 1 82 "int8" `73 
F B "set_input_level_e" 1 82 "void(int8 value)" `72 
F N "set_open_drain_a" 1 83 ""
V L "value" 1 83 "int8" `75 
F B "set_open_drain_a" 1 83 "void(int8 value)" `74 
F N "set_open_drain_b" 1 84 ""
V L "value" 1 84 "int8" `77 
F B "set_open_drain_b" 1 84 "void(int8 value)" `76 
F N "set_open_drain_c" 1 85 ""
V L "value" 1 85 "int8" `79 
F B "set_open_drain_c" 1 85 "void(int8 value)" `78 
F N "set_open_drain_d" 1 86 ""
V L "value" 1 86 "int8" `81 
F B "set_open_drain_d" 1 86 "void(int8 value)" `80 
F N "set_open_drain_e" 1 87 ""
V L "value" 1 87 "int8" `83 
F B "set_open_drain_e" 1 87 "void(int8 value)" `82 
F N "get_tris_a" 1 88 ""
F B "get_tris_a" 1 88 "int8()" `84 
F N "get_tris_b" 1 89 ""
F B "get_tris_b" 1 89 "int8()" `85 
F N "get_tris_c" 1 90 ""
F B "get_tris_c" 1 90 "int8()" `86 
F N "get_tris_d" 1 91 ""
F B "get_tris_d" 1 91 "int8()" `87 
F N "get_tris_e" 1 92 ""
F B "get_tris_e" 1 92 "int8()" `88 
F N "output_a" 1 93 ""
V L "value" 1 93 "int8" `90 
F B "output_a" 1 93 "void(int8 value)" `89 
F N "output_b" 1 94 ""
V L "value" 1 94 "int8" `92 
F B "output_b" 1 94 "void(int8 value)" `91 
F N "output_c" 1 95 ""
V L "value" 1 95 "int8" `94 
F B "output_c" 1 95 "void(int8 value)" `93 
F N "output_d" 1 96 ""
V L "value" 1 96 "int8" `96 
F B "output_d" 1 96 "void(int8 value)" `95 
F N "output_e" 1 97 ""
V L "value" 1 97 "int8" `98 
F B "output_e" 1 97 "void(int8 value)" `97 
F N "input_a" 1 98 ""
F B "input_a" 1 98 "int8()" `99 
F N "input_b" 1 99 ""
F B "input_b" 1 99 "int8()" `100 
F N "input_c" 1 100 ""
F B "input_c" 1 100 "int8()" `101 
F N "input_d" 1 101 ""
F B "input_d" 1 101 "int8()" `102 
F N "input_e" 1 102 ""
F B "input_e" 1 102 "int8()" `103 
F N "input_change_a" 1 103 ""
F B "input_change_a" 1 103 "int8()" `104 
F N "input_change_b" 1 104 ""
F B "input_change_b" 1 104 "int8()" `105 
F N "input_change_c" 1 105 ""
F B "input_change_c" 1 105 "int8()" `106 
F N "input_change_d" 1 106 ""
F B "input_change_d" 1 106 "int8()" `107 
F N "input_change_e" 1 107 ""
F B "input_change_e" 1 107 "int8()" `108 
F N "port_a_pullups" 1 108 ""
V L "upmask" 1 108 "int8" `110 
F B "port_a_pullups" 1 108 "void(int8 upmask)" `109 
F N "port_b_pullups" 1 109 ""
V L "upmask" 1 109 "int8" `112 
F B "port_b_pullups" 1 109 "void(int8 upmask)" `111 
F N "port_c_pullups" 1 110 ""
V L "upmask" 1 110 "int8" `114 
F B "port_c_pullups" 1 110 "void(int8 upmask)" `113 
F N "port_d_pullups" 1 111 ""
V L "upmask" 1 111 "int8" `116 
F B "port_d_pullups" 1 111 "void(int8 upmask)" `115 
F N "port_e_pullups" 1 112 ""
V L "upmask" 1 112 "int8" `118 
F B "port_e_pullups" 1 112 "void(int8 upmask)" `117 
F N "set_slow_slew_a" 1 113 ""
V L "value" 1 113 "int8" `120 
F B "set_slow_slew_a" 1 113 "void(int8 value)" `119 
F N "set_slow_slew_b" 1 114 ""
V L "value" 1 114 "int8" `122 
F B "set_slow_slew_b" 1 114 "void(int8 value)" `121 
F N "set_slow_slew_c" 1 115 ""
V L "value" 1 115 "int8" `124 
F B "set_slow_slew_c" 1 115 "void(int8 value)" `123 
F N "set_slow_slew_d" 1 116 ""
V L "value" 1 116 "int8" `126 
F B "set_slow_slew_d" 1 116 "void(int8 value)" `125 
F N "set_slow_slew_e" 1 117 ""
V L "value" 1 117 "int8" `128 
F B "set_slow_slew_e" 1 117 "void(int8 value)" `127 
F N "input" 1 118 ""
V L "pin" 1 118 "int32" `130 
F B "input" 1 118 "int8(int32 pin)" `129 
F N "input_state" 1 119 ""
V L "pin" 1 119 "int32" `132 
F B "input_state" 1 119 "int8(int32 pin)" `131 
F N "output_low" 1 120 ""
V L "pin" 1 120 "int32" `134 
F B "output_low" 1 120 "void(int32 pin)" `133 
F N "output_high" 1 121 ""
V L "pin" 1 121 "int32" `136 
F B "output_high" 1 121 "void(int32 pin)" `135 
F N "output_toggle" 1 122 ""
V L "pin" 1 122 "int32" `138 
F B "output_toggle" 1 122 "void(int32 pin)" `137 
F N "output_bit" 1 123 ""
V L "pin" 1 123 "int32" `140 
V L "level" 1 123 "int8" `141 
F B "output_bit" 1 123 "void(int32 pin,int8 level)" `139 
F N "output_float" 1 124 ""
V L "pin" 1 124 "int32" `143 
F B "output_float" 1 124 "void(int32 pin)" `142 
F N "output_drive" 1 125 ""
V L "pin" 1 125 "int32" `145 
F B "output_drive" 1 125 "void(int32 pin)" `144  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 129 "130640"
D G "PIN_A1" 1 130 "130641"
D G "PIN_A2" 1 131 "130642"
D G "PIN_A3" 1 132 "130643"
D G "PIN_A4" 1 133 "130644"
D G "PIN_A5" 1 134 "130645"
D G "PIN_A6" 1 135 "130646"
D G "PIN_A7" 1 136 "130647"
D G "PIN_B0" 1 138 "130648"
D G "PIN_B1" 1 139 "130649"
D G "PIN_B2" 1 140 "130650"
D G "PIN_B3" 1 141 "130651"
D G "PIN_B4" 1 142 "130652"
D G "PIN_B5" 1 143 "130653"
D G "PIN_B6" 1 144 "130654"
D G "PIN_B7" 1 145 "130655"
D G "PIN_C0" 1 147 "130656"
D G "PIN_C1" 1 148 "130657"
D G "PIN_C2" 1 149 "130658"
D G "PIN_C3" 1 150 "130659"
D G "PIN_C4" 1 151 "130660"
D G "PIN_C5" 1 152 "130661"
D G "PIN_C6" 1 153 "130662"
D G "PIN_C7" 1 154 "130663"
D G "PIN_D0" 1 156 "130664"
D G "PIN_D1" 1 157 "130665"
D G "PIN_D2" 1 158 "130666"
D G "PIN_D3" 1 159 "130667"
D G "PIN_D4" 1 160 "130668"
D G "PIN_D5" 1 161 "130669"
D G "PIN_D6" 1 162 "130670"
D G "PIN_D7" 1 163 "130671"
D G "PIN_E0" 1 165 "130672"
D G "PIN_E1" 1 166 "130673"
D G "PIN_E2" 1 167 "130674"
D G "PIN_E3" 1 168 "130675"
D G "FALSE" 1 171 "0"
D G "TRUE" 1 172 "1"
D G "BYTE" 1 174 "int8"
D G "BOOLEAN" 1 175 "int1"
D G "getc" 1 177 "getch"
D G "fgetc" 1 178 "getch"
D G "getchar" 1 179 "getch"
D G "putc" 1 180 "putchar"
D G "fputc" 1 181 "putchar"
D G "fgets" 1 182 "gets"
D G "fputs" 1 183 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
F N "restart_cause" 1 188 ""
F B "restart_cause" 1 188 "int16()" `146 
F N "reset_cpu" 1 189 ""
F B "reset_cpu" 1 189 "void()" `147 
F N "sleep" 1 190 ""
F B "sleep" 1 190 "void()" `148 
F N "sleep" 1 191 ""
V L "type" 1 191 "int8" `150 
F B "sleep" 1 191 "void(int8 type)" `149  "Constants returned from RESTART_CAUSE() are:"
D G "NORMAL_POWER_UP" 1 193 "0x73C"
D G "BROWNOUT_RESTART" 1 194 "0x73E"
D G "MCLR_FROM_SLEEP" 1 195 "0x637"
D G "WDT_TIMEOUT" 1 196 "0x52F"
D G "WDT_FROM_SLEEP" 1 197 "0x43F"
D G "INTERRUPT_FROM_SLEEP" 1 198 "0x63F"
D G "MCLR_FROM_RUN" 1 199 "0x737"
D G "RESET_INSTRUCTION" 1 200 "0x73B"
D G "STACK_OVERFLOW" 1 201 "0x7BF"
D G "STACK_UNDERFLOW" 1 202 "0x77F"
D G "WDT_WINDOW_VIOLATION" 1 203 "0x71F"
D G "MEMORY_VIOLATION" 1 204 "0x33F"
D G "REG_LOW_POWER" 1 207 "2"
D G "REG_NORMAL" 1 208 "0" "default"
D G "SLEEP_FULL" 1 211 "0" "Default"
D G "SLEEP_IDLE" 1 212 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 6 "FUNCTION"
F N "setup_timer_0" 1 220 ""
V L "mode" 1 220 "int16" `152 
F B "setup_timer_0" 1 220 "void(int16 mode)" `151 
F N "setup_timer_0" 1 221 ""
V L "mode" 1 221 "int16" `154 
V L "postscale" 1 221 "int8" `155 
F B "setup_timer_0" 1 221 "void(int16 mode,int8 postscale)" `153 
F N "setup_timer_0" 1 222 ""
V L "mode" 1 222 "int16" `157 
V L "period" 1 222 "int8" `158 
V L "postscale" 1 222 "int8" `159 
F B "setup_timer_0" 1 222 "void(int16 mode,int8 period,int8 postscale)" `156  "8-bit mode only"
F N "set_timer0" 1 223 ""
V L "value" 1 223 "int8" `161 
F B "set_timer0" 1 223 "void(int8 value)" `160 
F N "set_timer0" 1 224 ""
V L "value" 1 224 "int16" `163 
F B "set_timer0" 1 224 "void(int16 value)" `162 
F N "get_timer0" 1 225 ""
F B "get_timer0" 1 225 "int8()" `164 
F N "get_timer0" 1 226 ""
f G "get_timer0" 1 226 "int16()" `165 
F N "setup_counters" 1 227 ""
V L "mode" 1 227 "int8" `166 
V L "prescaler" 1 227 "int8" `167 
F B "setup_counters" 1 227 "void(int8 mode,int8 prescaler)" `165 
F N "set_rtcc" 1 228 ""
V L "value" 1 228 "int8" `169 
F B "set_rtcc" 1 228 "void(int8 value)" `168 
F N "set_rtcc" 1 229 ""
V L "value" 1 229 "int16" `171 
F B "set_rtcc" 1 229 "void(int16 value)" `170 
F N "get_rtcc" 1 230 ""
F B "get_rtcc" 1 230 "int8()" `172 
F N "get_rtcc" 1 231 ""
f G "get_rtcc" 1 231 "int16()" `173  "Constants used for SETUP_TIMER_0() first parameter are:"
D G "T0_INTERNAL" 1 233 "0x8040"
D G "T0_HFINTOSC" 1 234 "0x8060"
D G "T0_LFINTOSC" 1 235 "0x8080"
D G "T0_MFINTOSC" 1 236 "0x80A0" "500 kHz"
D G "T0_SOSC" 1 237 "0x80C0"
D G "T0_CLC1" 1 238 "0x80E0"
D G "T0_EXT_L_TO_H" 1 239 "0x8000"
D G "T0_EXT_H_TO_L" 1 240 "0x8020"
D G "T0_OFF" 1 241 "0"
D G "T0_INPUT_SYNCRONIZED" 1 243 "0x0000"
D G "T0_INPUT_NOT_SYNCRONIZED" 1 244 "0x0010"
D G "T0_DIV_1" 1 246 "0x0000"
D G "T0_DIV_2" 1 247 "0x0001"
D G "T0_DIV_4" 1 248 "0x0002"
D G "T0_DIV_8" 1 249 "0x0003"
D G "T0_DIV_16" 1 250 "0x0004"
D G "T0_DIV_32" 1 251 "0x0005"
D G "T0_DIV_64" 1 252 "0x0006"
D G "T0_DIV_128" 1 253 "0x0007"
D G "T0_DIV_256" 1 254 "0x0008"
D G "T0_DIV_512" 1 255 "0x0009"
D G "T0_DIV_1024" 1 256 "0x000A"
D G "T0_DIV_2048" 1 257 "0x000B"
D G "T0_DIV_4096" 1 258 "0x000C"
D G "T0_DIV_8192" 1 259 "0x000D"
D G "T0_DIV_16384" 1 260 "0x000E"
D G "T0_DIV_32768" 1 261 "0x000F"
D G "T0_8_BIT" 1 263 "0x1000"
D G "T0_16_BIT" 1 264 "0x0000"
D G "RTCC_INTERNAL" 1 269 "0x8040"
D G "RTCC_EXT_L_TO_H" 1 270 "0x8000"
D G "RTCC_EXT_H_TO_L" 1 271 "0x8020"
D G "RTCC_OFF" 1 272 "0x0000"
D G "RTCC_8_BIT" 1 273 "0x1000"
D G "RTCC_DIV_1" 1 275 "0x0000"
D G "RTCC_DIV_2" 1 276 "0x0001"
D G "RTCC_DIV_4" 1 277 "0x0002"
D G "RTCC_DIV_8" 1 278 "0x0003"
D G "RTCC_DIV_16" 1 279 "0x0004"
D G "RTCC_DIV_32" 1 280 "0x0005"
D G "RTCC_DIV_64" 1 281 "0x0006"
D G "RTCC_DIV_128" 1 282 "0x0007"
D G "RTCC_DIV_256" 1 283 "0x0008"
c L "get_rtcc" 1 1 6 "FUNCTION"
F N "setup_wdt" 1 291 ""
V L "mode" 1 291 "int16" `174 
F B "setup_wdt" 1 291 "void(int16 mode)" `173 
F N "restart_wdt" 1 292 ""
F B "restart_wdt" 1 292 "void()" `175 
F N "get_wdt" 1 293 ""
F B "get_wdt" 1 293 "int8()" `176  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 296 "0x8000"
D G "WDT_OFF" 1 297 "0x0000"
D G "WDT_1MS" 1 300 "0x0001"
D G "WDT_2MS" 1 301 "0x0003"
D G "WDT_4MS" 1 302 "0x0005"
D G "WDT_8MS" 1 303 "0x0007"
D G "WDT_16MS" 1 304 "0x0009"
D G "WDT_32MS" 1 305 "0x000B"
D G "WDT_64MS" 1 306 "0x000D"
D G "WDT_128MS" 1 307 "0x000F"
D G "WDT_256MS" 1 308 "0x0011"
D G "WDT_512MS" 1 309 "0x0013"
D G "WDT_1S" 1 310 "0x0015"
D G "WDT_2S" 1 311 "0x0017"
D G "WDT_4S" 1 312 "0x0019"
D G "WDT_8S" 1 313 "0x001B"
D G "WDT_16S" 1 314 "0x001D"
D G "WDT_32S" 1 315 "0x001F"
D G "WDT_64S" 1 316 "0x0021"
D G "WDT_128S" 1 317 "0x0023"
D G "WDT_256S" 1 318 "0x0025"
D G "WDT_WINDOW_12_PERCENT" 1 321 "0x0800"
D G "WDT_WINDOW_25_PERCENT" 1 322 "0x0100"
D G "WDT_WINDOW_37_PERCENT" 1 323 "0x0200"
D G "WDT_WINDOW_50_PERCENT" 1 324 "0x0300"
D G "WDT_WINDOW_62_PERCENT" 1 325 "0x0400"
D G "WDT_WINDOW_75_PERCENT" 1 326 "0x0500"
D G "WDT_WINDOW_87_PERCENT" 1 327 "0x0600"
D G "WDT_WINDOW_100_PERCENT" 1 328 "0x0700"
D G "WDT_CLK_31000" 1 331 "0x0000"
D G "WDT_CLK_31250" 1 332 "0x1000"
c L "get_wdt" 1 1 3 "FUNCTION"
F N "setup_timer_1" 1 339 ""
V L "mode" 1 339 "int32" `179 
F B "setup_timer_1" 1 339 "void(int32 mode)" `178 
F N "get_timer1" 1 340 ""
F B "get_timer1" 1 340 "int16()" `180 
F N "set_timer1" 1 341 ""
V L "value" 1 341 "int16" `182 
F B "set_timer1" 1 341 "void(int16 value)" `181  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 344 "0"
D G "T1_EXTERNAL" 1 345 "0x0003"
D G "T1_INTERNAL" 1 346 "0x0103"
D G "T1_FOSC" 1 347 "0x0203"
D G "T1_HFINTRC" 1 348 "0x0303"
D G "T1_LFINTRC" 1 349 "0x0403"
D G "T1_MFINTRC" 1 350 "0x0503"
D G "T1_MFINTRC_32KHZ" 1 351 "0x0603"
D G "T1_SOSC" 1 352 "0x0703"
D G "T1_CLKREF" 1 353 "0x0803"
D G "T1_TIMER0" 1 354 "0x0903"
D G "T1_TIMER3" 1 355 "0x0B03"
D G "T1_TIMER5" 1 356 "0x0C03"
D G "T1_CLC1" 1 357 "0x0D03"
D G "T1_CLC2" 1 358 "0x0E03"
D G "T1_CLC3" 1 359 "0x0F03"
D G "T1_CLC4" 1 360 "0x1003"
D G "T1_SYNC" 1 362 "0x04"
D G "T1_DIV_BY_1" 1 364 "0"
D G "T1_DIV_BY_2" 1 365 "0x10"
D G "T1_DIV_BY_4" 1 366 "0x20"
D G "T1_DIV_BY_8" 1 367 "0x30"
D G "T1_GATE" 1 369 "0x8000"
D G "T1_GATE_INVERTED" 1 370 "0xC000"
D G "T1_GATE_TOGGLE" 1 371 "0xA000"
D G "T1_GATE_SINGLE" 1 372 "0x9000"
D G "T1_GATE_TIMER0" 1 373 "0x018000"
D G "T1_GATE_TIMER2" 1 374 "0x038000"
D G "T1_GATE_TIMER3" 1 375 "0x048000"
D G "T1_GATE_TIMER4" 1 376 "0x058000"
D G "T1_GATE_TIMER5" 1 377 "0x068000"
D G "T1_GATE_TIMER6" 1 378 "0x078000"
D G "T1_GATE_SMT1" 1 379 "0x088000"
D G "T1_GATE_CCP1" 1 380 "0x098000"
D G "T1_GATE_CCP2" 1 381 "0x0A8000"
D G "T1_GATE_CCP3" 1 382 "0x0B8000"
D G "T1_GATE_CCP4" 1 383 "0x0C8000"
D G "T1_GATE_PWM5" 1 384 "0x0D8000"
D G "T1_GATE_PWM6" 1 385 "0x0E8000"
D G "T1_GATE_PWM7" 1 386 "0x0F8000"
D G "T1_GATE_PWM8" 1 387 "0x108000"
D G "T1_GATE_NCO1" 1 388 "0x138000"
D G "T1_GATE_COMP1" 1 389 "0x148000"
D G "T1_GATE_COMP2" 1 390 "0x158000"
D G "T1_GATE_ZCD" 1 391 "0x168000"
D G "T1_GATE_CLC1" 1 392 "0x178000"
D G "T1_GATE_CLC2" 1 393 "0x188000"
D G "T1_GATE_CLC3" 1 394 "0x198000"
D G "T1_GATE_CLC4" 1 395 "0x1A8000"
c L "set_timer1" 1 1 3 "FUNCTION"
F N "setup_timer_2" 1 400 ""
V L "mode" 1 400 "int32" `184 
V L "period" 1 400 "int8" `185 
V L "postscaler" 1 400 "int8" `186 
F B "setup_timer_2" 1 400 "void(int32 mode,int8 period,int8 postscaler)" `183 
F N "get_timer2" 1 401 ""
F B "get_timer2" 1 401 "int8()" `187 
F N "set_timer2" 1 402 ""
V L "value" 1 402 "int8" `189 
F B "set_timer2" 1 402 "void(int8 value)" `188  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 404 "0"
D G "T2_DIV_BY_1" 1 405 "0x80"
D G "T2_DIV_BY_2" 1 406 "0x90"
D G "T2_DIV_BY_4" 1 407 "0xA0"
D G "T2_DIV_BY_8" 1 408 "0xB0"
D G "T2_DIV_BY_16" 1 409 "0xC0"
D G "T2_DIV_BY_32" 1 410 "0xD0"
D G "T2_DIV_BY_64" 1 411 "0xE0"
D G "T2_DIV_BY_128" 1 412 "0xF0"
D G "T2_CLK_T2IN" 1 414 "0"
D G "T2_CLK_INTERNAL" 1 415 "0x0100" "FOSC/4"
D G "T2_CLK_FOSC" 1 416 "0x0200"
D G "T2_CLK_HFINTRC" 1 417 "0x0300"
D G "T2_CLK_LFINTRC" 1 418 "0x0400"
D G "T2_CLK_MFINTRC_500KHZ" 1 419 "0x0500"
D G "T2_CLK_MFINTRC_32KHZ" 1 420 "0x0600"
D G "T2_CLK_SOSC" 1 421 "0x0700"
D G "T2_CLK_CLKR" 1 422 "0x0800"
D G "T2_CLK_NCO1" 1 423 "0x0900"
D G "T2_CLK_ZCD" 1 424 "0x0A00"
D G "T2_CLK_CLC1" 1 425 "0x0B00"
D G "T2_CLK_CLC2" 1 426 "0x0C00"
D G "T2_CLK_CLC3" 1 427 "0x0D00"
D G "T2_CLK_CLC4" 1 428 "0x0E00"
D G "T2_START_IMMEDIATELY" 1 431 "0"
D G "T2_START_WHEN_HIGH" 1 432 "0x010000"
D G "T2_START_WHEN_LOW" 1 433 "0x020000"
D G "T2_RESET_ON_BOTH_EDGES" 1 434 "0x030000"
D G "T2_RESET_ON_RE" 1 435 "0x040000"
D G "T2_RESET_ON_FE" 1 436 "0x050000"
D G "T2_RESET_WHEN_LOW" 1 437 "0x060000"
D G "T2_RESET_WHEN_HIGH" 1 438 "0x070000"
D G "T2_ONE_SHOT_START_IMMEDIATELY" 1 439 "0x080000"
D G "T2_ONE_SHOT_START_ON_RE" 1 440 "0x090000"
D G "T2_ONE_SHOT_START_ON_FE" 1 441 "0x0A0000"
D G "T2_ONE_SHOT_START_ON_BOTH_EDGES" 1 442 "0x0B0000"
D G "T2_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 443 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T2_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 444 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T2_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 445 "0x0E0000"
D G "T2_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 446 "0x0F0000"
D G "T2_MONO_STABLE_START_ON_RE" 1 447 "0x110000"
D G "T2_MONO_STABLE_START_ON_FE" 1 448 "0x120000"
D G "T2_MONO_STABLE_START_ON_EE" 1 449 "0x130000"
D G "T2_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 450 "0x160000"
D G "T2_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 451 "0x170000"
D G "T2_SYNC_ON_WITH_T2CLK" 1 453 "0x200000"
D G "T2_INVERTED" 1 454 "0x400000"
D G "T2_SYNC_PRESCALER_WITH_CLK" 1 455 "0x800000"
D G "T2_RESET_FROM_T2IN" 1 458 "0"
D G "T2_RESET_FROM_TMR4" 1 459 "0x02000000"
D G "T2_RESET_FROM_TMR6" 1 460 "0x03000000"
D G "T2_RESET_FROM_CCP1" 1 461 "0x04000000"
D G "T2_RESET_FROM_CCP2" 1 462 "0x05000000"
D G "T2_RESET_FROM_CCP3" 1 463 "0x06000000"
D G "T2_RESET_FROM_CCP4" 1 464 "0x07000000"
D G "T2_RESET_FROM_PWM5" 1 465 "0x08000000"
D G "T2_RESET_FROM_PWM6" 1 466 "0x09000000"
D G "T2_RESET_FROM_PWM7" 1 467 "0x0A000000"
D G "T2_RESET_FROM_PWM8" 1 468 "0x0B000000"
D G "T2_RESET_FROM_C1OUT" 1 469 "0x0E000000"
D G "T2_RESET_FROM_C2OUT" 1 470 "0x0F000000"
D G "T2_RESET_FROM_ZCD" 1 471 "0x10000000"
D G "T2_RESET_FROM_CLC1" 1 472 "0x11000000"
D G "T2_RESET_FROM_CLC2" 1 473 "0x12000000"
D G "T2_RESET_FROM_CLC3" 1 474 "0x13000000"
D G "T2_RESET_FROM_CLC4" 1 475 "0x14000000"
D G "T2_RESET_FROM_U1RX" 1 476 "0x15000000"
D G "T2_RESET_FROM_U1TX" 1 477 "0x16000000"
D G "T2_RESET_FROM_U2RX" 1 478 "0x17000000"
D G "T2_RESET_FROM_U2TX" 1 479 "0x18000000"
c L "set_timer2" 1 1 3 "FUNCTION"
F N "setup_timer_3" 1 484 ""
V L "mode" 1 484 "int32" `191 
F B "setup_timer_3" 1 484 "void(int32 mode)" `190 
F N "get_timer3" 1 485 ""
F B "get_timer3" 1 485 "int16()" `192 
F N "set_timer3" 1 486 ""
V L "value" 1 486 "int16" `194 
F B "set_timer3" 1 486 "void(int16 value)" `193  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 489 "0"
D G "T3_EXTERNAL" 1 490 "0x0003"
D G "T3_INTERNAL" 1 491 "0x0103"
D G "T3_FOSC" 1 492 "0x0203"
D G "T3_HFINTRC" 1 493 "0x0303"
D G "T3_LFINTRC" 1 494 "0x0403"
D G "T3_MFINTRC" 1 495 "0x0503"
D G "T3_MFINTRC_32KHZ" 1 496 "0x0603"
D G "T3_SOSC" 1 497 "0x0703"
D G "T3_CLKREF" 1 498 "0x0803"
D G "T3_TIMER0" 1 499 "0x0903"
D G "T3_TIMER1" 1 500 "0x0A03"
D G "T3_TIMER5" 1 501 "0x0C03"
D G "T3_CLC1" 1 502 "0x0D03"
D G "T3_CLC2" 1 503 "0x0E03"
D G "T3_CLC3" 1 504 "0x0F03"
D G "T3_CLC4" 1 505 "0x1003"
D G "T3_SYNC" 1 507 "0x04"
D G "T3_DIV_BY_1" 1 509 "0"
D G "T3_DIV_BY_2" 1 510 "0x10"
D G "T3_DIV_BY_4" 1 511 "0x20"
D G "T3_DIV_BY_8" 1 512 "0x30"
D G "T3_GATE" 1 514 "0x8000"
D G "T3_GATE_INVERTED" 1 515 "0xC000"
D G "T3_GATE_TOGGLE" 1 516 "0xA000"
D G "T3_GATE_SINGLE" 1 517 "0x9000"
D G "T3_GATE_TIMER0" 1 518 "0x018000"
D G "T3_GATE_TIMER1" 1 519 "0x028000"
D G "T3_GATE_TIMER2" 1 520 "0x038000"
D G "T3_GATE_TIMER4" 1 521 "0x058000"
D G "T3_GATE_TIMER5" 1 522 "0x068000"
D G "T3_GATE_TIMER6" 1 523 "0x078000"
D G "T3_GATE_SMT1" 1 524 "0x088000"
D G "T3_GATE_CCP1" 1 525 "0x098000"
D G "T3_GATE_CCP2" 1 526 "0x0A8000"
D G "T3_GATE_CCP3" 1 527 "0x0B8000"
D G "T3_GATE_CCP4" 1 528 "0x0C8000"
D G "T3_GATE_PWM5" 1 529 "0x0D8000"
D G "T3_GATE_PWM6" 1 530 "0x0E8000"
D G "T3_GATE_PWM7" 1 531 "0x0F8000"
D G "T3_GATE_PWM8" 1 532 "0x108000"
D G "T3_GATE_NCO1" 1 533 "0x138000"
D G "T3_GATE_COMP1" 1 534 "0x148000"
D G "T3_GATE_COMP2" 1 535 "0x158000"
D G "T3_GATE_ZCD" 1 536 "0x168000"
D G "T3_GATE_CLC1" 1 537 "0x178000"
D G "T3_GATE_CLC2" 1 538 "0x188000"
D G "T3_GATE_CLC3" 1 539 "0x198000"
D G "T3_GATE_CLC4" 1 540 "0x1A8000"
c L "set_timer3" 1 1 3 "FUNCTION"
F N "setup_timer_4" 1 545 ""
V L "mode" 1 545 "int32" `196 
V L "period" 1 545 "int8" `197 
V L "postscaler" 1 545 "int8" `198 
F B "setup_timer_4" 1 545 "void(int32 mode,int8 period,int8 postscaler)" `195 
F N "get_timer4" 1 546 ""
F B "get_timer4" 1 546 "int8()" `199 
F N "set_timer4" 1 547 ""
V L "value" 1 547 "int8" `201 
F B "set_timer4" 1 547 "void(int8 value)" `200  "Constants used for SETUP_TIMER_4() are:"
D G "T4_DISABLED" 1 549 "0"
D G "T4_DIV_BY_1" 1 550 "0x80"
D G "T4_DIV_BY_2" 1 551 "0x90"
D G "T4_DIV_BY_4" 1 552 "0xA0"
D G "T4_DIV_BY_8" 1 553 "0xB0"
D G "T4_DIV_BY_16" 1 554 "0xC0"
D G "T4_DIV_BY_32" 1 555 "0xD0"
D G "T4_DIV_BY_64" 1 556 "0xE0"
D G "T4_DIV_BY_128" 1 557 "0xF0"
D G "T4_CLK_T4IN" 1 559 "0"
D G "T4_CLK_INTERNAL" 1 560 "0x0100" "FOSC/4"
D G "T4_CLK_FOSC" 1 561 "0x0200"
D G "T4_CLK_HFINTRC" 1 562 "0x0300"
D G "T4_CLK_LFINTRC" 1 563 "0x0400"
D G "T4_CLK_MFINTRC_500KHZ" 1 564 "0x0500"
D G "T4_CLK_MFINTRC_32KHZ" 1 565 "0x0600"
D G "T4_CLK_SOSC" 1 566 "0x0700"
D G "T4_CLK_CLKR" 1 567 "0x0800"
D G "T4_CLK_NCO1" 1 568 "0x0900"
D G "T4_CLK_ZCD" 1 569 "0x0A00"
D G "T4_CLK_CLC1" 1 570 "0x0B00"
D G "T4_CLK_CLC2" 1 571 "0x0C00"
D G "T4_CLK_CLC3" 1 572 "0x0D00"
D G "T4_CLK_CLC4" 1 573 "0x0E00"
D G "T4_START_IMMEDIATELY" 1 576 "0"
D G "T4_START_WHEN_HIGH" 1 577 "0x010000"
D G "T4_START_WHEN_LOW" 1 578 "0x020000"
D G "T4_RESET_ON_BOTH_EDGES" 1 579 "0x030000"
D G "T4_RESET_ON_RE" 1 580 "0x040000"
D G "T4_RESET_ON_FE" 1 581 "0x050000"
D G "T4_RESET_WHEN_LOW" 1 582 "0x060000"
D G "T4_RESET_WHEN_HIGH" 1 583 "0x070000"
D G "T4_ONE_SHOT_START_IMMEDIATELY" 1 584 "0x080000"
D G "T4_ONE_SHOT_START_ON_RE" 1 585 "0x090000"
D G "T4_ONE_SHOT_START_ON_FE" 1 586 "0x0A0000"
D G "T4_ONE_SHOT_START_ON_BOTH_EDGES" 1 587 "0x0B0000"
D G "T4_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 588 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T4_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 589 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T4_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 590 "0x0E0000"
D G "T4_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 591 "0x0F0000"
D G "T4_MONO_STABLE_START_ON_RE" 1 592 "0x110000"
D G "T4_MONO_STABLE_START_ON_FE" 1 593 "0x120000"
D G "T4_MONO_STABLE_START_ON_EE" 1 594 "0x130000"
D G "T4_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 595 "0x160000"
D G "T4_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 596 "0x170000"
D G "T4_SYNC_ON_WITH_T2CLK" 1 599 "0x200000"
D G "T4_INVERTED" 1 600 "0x400000"
D G "T4_SYNC_PRESCALER_WITH_CLK" 1 601 "0x800000"
D G "T4_RESET_FROM_T4IN" 1 604 "0"
D G "T4_RESET_FROM_TMR2" 1 605 "0x01000000"
D G "T4_RESET_FROM_TMR6" 1 606 "0x03000000"
D G "T4_RESET_FROM_CCP1" 1 607 "0x04000000"
D G "T4_RESET_FROM_CCP2" 1 608 "0x05000000"
D G "T4_RESET_FROM_CCP3" 1 609 "0x06000000"
D G "T4_RESET_FROM_CCP4" 1 610 "0x07000000"
D G "T4_RESET_FROM_PWM5" 1 611 "0x08000000"
D G "T4_RESET_FROM_PWM6" 1 612 "0x09000000"
D G "T4_RESET_FROM_PWM7" 1 613 "0x0A000000"
D G "T4_RESET_FROM_PWM8" 1 614 "0x0B000000"
D G "T4_RESET_FROM_C1OUT" 1 615 "0x0E000000"
D G "T4_RESET_FROM_C2OUT" 1 616 "0x0F000000"
D G "T4_RESET_FROM_ZCD" 1 617 "0x10000000"
D G "T4_RESET_FROM_CLC1" 1 618 "0x11000000"
D G "T4_RESET_FROM_CLC2" 1 619 "0x12000000"
D G "T4_RESET_FROM_CLC3" 1 620 "0x13000000"
D G "T4_RESET_FROM_CLC4" 1 621 "0x14000000"
D G "T4_RESET_FROM_U1RX" 1 622 "0x15000000"
D G "T4_RESET_FROM_U1TX" 1 623 "0x16000000"
D G "T4_RESET_FROM_U2RX" 1 624 "0x17000000"
D G "T4_RESET_FROM_U2TX" 1 625 "0x18000000"
c L "set_timer4" 1 1 3 "FUNCTION"
F N "setup_timer_5" 1 630 ""
V L "mode" 1 630 "int32" `203 
F B "setup_timer_5" 1 630 "void(int32 mode)" `202 
F N "get_timer5" 1 631 ""
F B "get_timer5" 1 631 "int16()" `204 
F N "set_timer5" 1 632 ""
V L "value" 1 632 "int16" `206 
F B "set_timer5" 1 632 "void(int16 value)" `205  "Constants used for SETUP_TIMER_5() are:"
D G "T5_DISABLED" 1 635 "0"
D G "T5_EXTERNAL" 1 636 "0x0003"
D G "T5_INTERNAL" 1 637 "0x0103"
D G "T5_FOSC" 1 638 "0x0203"
D G "T5_HFINTRC" 1 639 "0x0303"
D G "T5_LFINTRC" 1 640 "0x0403"
D G "T5_MFINTRC" 1 641 "0x0503"
D G "T5_MFINTRC_32KHZ" 1 642 "0x0603"
D G "T5_SOSC" 1 643 "0x0703"
D G "T5_CLKREF" 1 644 "0x0803"
D G "T5_TIMER0" 1 645 "0x0903"
D G "T5_TIMER1" 1 646 "0x0A03"
D G "T5_TIMER3" 1 647 "0x0B03"
D G "T5_CLC1" 1 648 "0x0D03"
D G "T5_CLC2" 1 649 "0x0E03"
D G "T5_CLC3" 1 650 "0x0F03"
D G "T5_CLC4" 1 651 "0x1003"
D G "T5_SYNC" 1 653 "0x04"
D G "T5_DIV_BY_1" 1 655 "0"
D G "T5_DIV_BY_2" 1 656 "0x10"
D G "T5_DIV_BY_4" 1 657 "0x20"
D G "T5_DIV_BY_8" 1 658 "0x30"
D G "T5_GATE" 1 660 "0x8000"
D G "T5_GATE_INVERTED" 1 661 "0xC000"
D G "T5_GATE_TOGGLE" 1 662 "0xA000"
D G "T5_GATE_SINGLE" 1 663 "0x9000"
D G "T5_GATE_TIMER0" 1 664 "0x018000"
D G "T5_GATE_TIMER1" 1 665 "0x028000"
D G "T5_GATE_TIMER2" 1 666 "0x038000"
D G "T5_GATE_TIMER3" 1 667 "0x048000"
D G "T5_GATE_TIMER4" 1 668 "0x058000"
D G "T5_GATE_TIMER6" 1 669 "0x078000"
D G "T5_GATE_SMT1" 1 670 "0x088000"
D G "T5_GATE_CCP1" 1 671 "0x098000"
D G "T5_GATE_CCP2" 1 672 "0x0A8000"
D G "T5_GATE_CCP3" 1 673 "0x0B8000"
D G "T5_GATE_CCP4" 1 674 "0x0C8000"
D G "T5_GATE_PWM5" 1 675 "0x0D8000"
D G "T5_GATE_PWM6" 1 676 "0x0E8000"
D G "T5_GATE_PWM7" 1 677 "0x0F8000"
D G "T5_GATE_PWM8" 1 678 "0x108000"
D G "T5_GATE_NCO1" 1 679 "0x138000"
D G "T5_GATE_COMP1" 1 680 "0x148000"
D G "T5_GATE_COMP2" 1 681 "0x158000"
D G "T5_GATE_ZCD" 1 682 "0x168000"
D G "T5_GATE_CLC1" 1 683 "0x178000"
D G "T5_GATE_CLC2" 1 684 "0x188000"
D G "T5_GATE_CLC3" 1 685 "0x198000"
D G "T5_GATE_CLC4" 1 686 "0x1A8000"
c L "set_timer5" 1 1 3 "FUNCTION"
F N "setup_timer_6" 1 691 ""
V L "mode" 1 691 "int32" `208 
V L "period" 1 691 "int8" `209 
V L "postscaler" 1 691 "int8" `210 
F B "setup_timer_6" 1 691 "void(int32 mode,int8 period,int8 postscaler)" `207 
F N "get_timer6" 1 692 ""
F B "get_timer6" 1 692 "int8()" `211 
F N "set_timer6" 1 693 ""
V L "value" 1 693 "int8" `213 
F B "set_timer6" 1 693 "void(int8 value)" `212  "Constants used for SETUP_TIMER_6() are:"
D G "T6_DISABLED" 1 695 "0"
D G "T6_DIV_BY_1" 1 696 "0x80"
D G "T6_DIV_BY_2" 1 697 "0x90"
D G "T6_DIV_BY_4" 1 698 "0xA0"
D G "T6_DIV_BY_8" 1 699 "0xB0"
D G "T6_DIV_BY_16" 1 700 "0xC0"
D G "T6_DIV_BY_32" 1 701 "0xD0"
D G "T6_DIV_BY_64" 1 702 "0xE0"
D G "T6_DIV_BY_128" 1 703 "0xF0"
D G "T6_CLK_T6IN" 1 705 "0"
D G "T6_CLK_INTERNAL" 1 706 "0x0100" "FOSC/4"
D G "T6_CLK_FOSC" 1 707 "0x0200"
D G "T6_CLK_HFINTRC" 1 708 "0x0300"
D G "T6_CLK_LFINTRC" 1 709 "0x0400"
D G "T6_CLK_MFINTRC_500KHZ" 1 710 "0x0500"
D G "T6_CLK_MFINTRC_32KHZ" 1 711 "0x0600"
D G "T6_CLK_SOSC" 1 712 "0x0700"
D G "T6_CLK_CLKR" 1 713 "0x0800"
D G "T6_CLK_NCO1" 1 714 "0x0900"
D G "T6_CLK_ZCD" 1 715 "0x0A00"
D G "T6_CLK_CLC1" 1 716 "0x0B00"
D G "T6_CLK_CLC2" 1 717 "0x0C00"
D G "T6_CLK_CLC3" 1 718 "0x0D00"
D G "T6_CLK_CLC4" 1 719 "0x0E00"
D G "T6_START_IMMEDIATELY" 1 722 "0"
D G "T6_START_WHEN_HIGH" 1 723 "0x010000"
D G "T6_START_WHEN_LOW" 1 724 "0x020000"
D G "T6_RESET_ON_BOTH_EDGES" 1 725 "0x030000"
D G "T6_RESET_ON_RE" 1 726 "0x040000"
D G "T6_RESET_ON_FE" 1 727 "0x050000"
D G "T6_RESET_WHEN_LOW" 1 728 "0x060000"
D G "T6_RESET_WHEN_HIGH" 1 729 "0x070000"
D G "T6_ONE_SHOT_START_IMMEDIATELY" 1 730 "0x080000"
D G "T6_ONE_SHOT_START_ON_RE" 1 731 "0x090000"
D G "T6_ONE_SHOT_START_ON_FE" 1 732 "0x0A0000"
D G "T6_ONE_SHOT_START_ON_BOTH_EDGES" 1 733 "0x0B0000"
D G "T6_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 734 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T6_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 735 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T6_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 736 "0x0E0000"
D G "T6_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 737 "0x0F0000"
D G "T6_MONO_STABLE_START_ON_RE" 1 738 "0x110000"
D G "T6_MONO_STABLE_START_ON_FE" 1 739 "0x120000"
D G "T6_MONO_STABLE_START_ON_EE" 1 740 "0x130000"
D G "T6_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 741 "0x160000"
D G "T6_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 742 "0x170000"
D G "T6_SYNC_ON_WITH_T2CLK" 1 744 "0x200000"
D G "T6_INVERTED" 1 745 "0x400000"
D G "T6_SYNC_PRESCALER_WITH_CLK" 1 746 "0x800000"
D G "T6_RESET_FROM_T6IN" 1 749 "0"
D G "T6_RESET_FROM_TMR2" 1 750 "0x01000000"
D G "T6_RESET_FROM_TMR4" 1 751 "0x02000000"
D G "T6_RESET_FROM_CCP1" 1 752 "0x04000000"
D G "T6_RESET_FROM_CCP2" 1 753 "0x05000000"
D G "T6_RESET_FROM_CCP3" 1 754 "0x06000000"
D G "T6_RESET_FROM_CCP4" 1 755 "0x07000000"
D G "T6_RESET_FROM_PWM5" 1 756 "0x08000000"
D G "T6_RESET_FROM_PWM6" 1 757 "0x09000000"
D G "T6_RESET_FROM_PWM7" 1 758 "0x0A000000"
D G "T6_RESET_FROM_PWM8" 1 759 "0x0B000000"
D G "T6_RESET_FROM_C1OUT" 1 760 "0x0E000000"
D G "T6_RESET_FROM_C2OUT" 1 761 "0x0F000000"
D G "T6_RESET_FROM_ZCD" 1 762 "0x10000000"
D G "T6_RESET_FROM_CLC1" 1 763 "0x11000000"
D G "T6_RESET_FROM_CLC2" 1 764 "0x12000000"
D G "T6_RESET_FROM_CLC3" 1 765 "0x13000000"
D G "T6_RESET_FROM_CLC4" 1 766 "0x14000000"
D G "T6_RESET_FROM_U1RX" 1 767 "0x15000000"
D G "T6_RESET_FROM_U1TX" 1 768 "0x16000000"
D G "T6_RESET_FROM_U2RX" 1 769 "0x17000000"
D G "T6_RESET_FROM_U2TX" 1 770 "0x18000000"
c L "set_timer6" 1 1 4 "FUNCTION"
F N "setup_ccp1" 1 776 ""
V L "mode" 1 776 "int32" `215 
F B "setup_ccp1" 1 776 "void(int32 mode)" `214 
F N "setup_ccp1" 1 777 ""
V L "mode" 1 777 "int32" `217 
V L "pwm" 1 777 "int8" `218 
F B "setup_ccp1" 1 777 "void(int32 mode,int8 pwm)" `216 
F N "set_pwm1_duty" 1 778 ""
V L "value" 1 778 "int8" `220 
F B "set_pwm1_duty" 1 778 "void(int8 value)" `219 
F N "set_pwm1_duty" 1 779 ""
V L "value" 1 779 "int16" `222 
F B "set_pwm1_duty" 1 779 "void(int16 value)" `221  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 781 "0"
D G "CCP_CAPTURE_EE" 1 782 "0x03"
D G "CCP_CAPTURE_FE" 1 783 "0x04"
D G "CCP_CAPTURE_RE" 1 784 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 785 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 786 "0x07"
D G "CCP_COMPARE_TOGGLE_RESET_TIMER" 1 787 "0x01"
D G "CCP_COMPARE_TOGGLE" 1 788 "0x02"
D G "CCP_COMPARE_SET_ON_MATCH" 1 789 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 790 "0x09"
D G "CCP_COMPARE_INT" 1 791 "0x0A"
D G "CCP_COMPARE_PULSE" 1 792 "0x0A"
D G "CCP_COMPARE_PULSE_RESET_TIMER" 1 793 "0x0B"
D G "CCP_PWM" 1 794 "0x0C"
D G "CCP_CAPTURE_INPUT_CCP_PIN" 1 796 "0"
D G "CCP_CAPTURE_INPUT_C1OUT" 1 797 "0x010000"
D G "CCP_CAPTURE_INPUT_C2OUT" 1 798 "0x020000"
D G "CCP_CAPTURE_INPUT_IOC_INTERRUPT" 1 799 "0x030000"
D G "CCP_CAPTURE_INPUT_CLC1" 1 800 "0x040000"
D G "CCP_CAPTURE_INPUT_CLC2" 1 801 "0x050000"
D G "CCP_CAPTURE_INPUT_CLC3" 1 802 "0x060000"
D G "CCP_CAPTURE_INPUT_CLC4" 1 803 "0x070000"
D G "CCP_PWM_LEFT_JUSTIFIED_DUTY" 1 805 "0x10"
D G "CCP_USE_TIMER1_AND_TIMER2" 1 814 "0x0000"
D G "CCP_USE_TIMER3_AND_TIMER4" 1 815 "0x0100"
D G "CCP_USE_TIMER5_AND_TIMER6" 1 816 "0x0200"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
F N "setup_ccp2" 1 819 ""
V L "mode" 1 819 "int32" `227 
F B "setup_ccp2" 1 819 "void(int32 mode)" `226 
F N "setup_ccp2" 1 820 ""
V L "mode" 1 820 "int32" `229 
V L "pwm" 1 820 "int8" `230 
F B "setup_ccp2" 1 820 "void(int32 mode,int8 pwm)" `228 
F N "set_pwm2_duty" 1 821 ""
V L "value" 1 821 "int8" `232 
F B "set_pwm2_duty" 1 821 "void(int8 value)" `231 
F N "set_pwm2_duty" 1 822 ""
V L "value" 1 822 "int16" `234 
F B "set_pwm2_duty" 1 822 "void(int16 value)" `233 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
F N "setup_ccp3" 1 828 ""
V L "mode" 1 828 "int32" `239 
F B "setup_ccp3" 1 828 "void(int32 mode)" `238 
F N "setup_ccp3" 1 829 ""
V L "mode" 1 829 "int32" `241 
V L "pwm" 1 829 "int8" `242 
F B "setup_ccp3" 1 829 "void(int32 mode,int8 pwm)" `240 
F N "set_pwm3_duty" 1 830 ""
V L "value" 1 830 "int8" `244 
F B "set_pwm3_duty" 1 830 "void(int8 value)" `243 
F N "set_pwm3_duty" 1 831 ""
V L "value" 1 831 "int16" `246 
F B "set_pwm3_duty" 1 831 "void(int16 value)" `245 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
F N "setup_ccp4" 1 837 ""
V L "mode" 1 837 "int32" `251 
F B "setup_ccp4" 1 837 "void(int32 mode)" `250 
F N "setup_ccp4" 1 838 ""
V L "mode" 1 838 "int32" `253 
V L "pwm" 1 838 "int8" `254 
F B "setup_ccp4" 1 838 "void(int32 mode,int8 pwm)" `252 
F N "set_pwm4_duty" 1 839 ""
V L "value" 1 839 "int8" `256 
F B "set_pwm4_duty" 1 839 "void(int8 value)" `255 
F N "set_pwm4_duty" 1 840 ""
V L "value" 1 840 "int16" `258 
F B "set_pwm4_duty" 1 840 "void(int16 value)" `257 
c L "set_pwm4_duty" 1 1 3 "FUNCTION"
F N "setup_pwm5" 1 848 ""
V L "mode" 1 848 "int16" `263 
F B "setup_pwm5" 1 848 "void(int16 mode)" `262 
F N "setup_pwm6" 1 849 ""
V L "mode" 1 849 "int16" `265 
F B "setup_pwm6" 1 849 "void(int16 mode)" `264 
F N "setup_pwm7" 1 850 ""
V L "mode" 1 850 "int16" `267 
F B "setup_pwm7" 1 850 "void(int16 mode)" `266 
F N "setup_pwm8" 1 851 ""
V L "mode" 1 851 "int16" `269 
F B "setup_pwm8" 1 851 "void(int16 mode)" `268 
F N "set_pwm5_duty" 1 852 ""
V L "value" 1 852 "int8" `271 
F B "set_pwm5_duty" 1 852 "void(int8 value)" `270 
F N "set_pwm5_duty" 1 853 ""
V L "value" 1 853 "int16" `273 
F B "set_pwm5_duty" 1 853 "void(int16 value)" `272 
F N "set_pwm6_duty" 1 854 ""
V L "value" 1 854 "int8" `275 
F B "set_pwm6_duty" 1 854 "void(int8 value)" `274 
F N "set_pwm6_duty" 1 855 ""
V L "value" 1 855 "int16" `277 
F B "set_pwm6_duty" 1 855 "void(int16 value)" `276 
F N "set_pwm7_duty" 1 856 ""
V L "value" 1 856 "int8" `279 
F B "set_pwm7_duty" 1 856 "void(int8 value)" `278 
F N "set_pwm7_duty" 1 857 ""
V L "value" 1 857 "int16" `281 
F B "set_pwm7_duty" 1 857 "void(int16 value)" `280 
F N "set_pwm8_duty" 1 858 ""
V L "value" 1 858 "int8" `283 
F B "set_pwm8_duty" 1 858 "void(int8 value)" `282 
F N "set_pwm8_duty" 1 859 ""
V L "value" 1 859 "int16" `285 
F B "set_pwm8_duty" 1 859 "void(int16 value)" `284  "Constants used for SETUP_PWMx() are:"
D G "PWM_ENABLED" 1 861 "0x80"
D G "PWM_DISABLED" 1 862 "0x0400"
D G "PWM_ACTIVE_LOW" 1 864 "0x10"
D G "PWM_ACTIVE_HIGH" 1 865 "0"
D G "PWM_TIMER2" 1 868 "0x0000"
D G "PWM_TIMER4" 1 869 "0x0100"
D G "PWM_TIMER6" 1 870 "0x0200"
c L "set_pwm8_duty" 1 1 6 "FUNCTION"
F N "setup_spi" 1 884 ""
V L "mode" 1 884 "int32" `291 
F B "setup_spi" 1 884 "void(int32 mode)" `290 
F N "setup_spi" 1 885 ""
V L "mode" 1 885 "int32" `293 
V L "baud" 1 885 "int32" `294 
F B "setup_spi" 1 885 "void(int32 mode,int32 baud)" `292 
F N "setup_spi" 1 886 ""
V L "mode" 1 886 "int32" `296 
V L "baud" 1 886 "int32" `297 
V L "clock" 1 886 "int32" `298 
F B "setup_spi" 1 886 "void(int32 mode,int32 baud,int32 clock)" `295 
F N "spi_write" 1 887 ""
V L "value" 1 887 "int8" `300 
F B "spi_write" 1 887 "void(int8 value)" `299 
F N "spi_write" 1 888 ""
V L "wait" 1 888 "int8" `302 
V L "value" 1 888 "int8" `303 
F B "spi_write" 1 888 "void(int8 wait,int8 value)" `301 
F N "spi_read" 1 889 ""
F B "spi_read" 1 889 "int8()" `304 
F N "spi_read" 1 890 ""
V L "value" 1 890 "int8" `306 
F B "spi_read" 1 890 "int8(int8 value)" `305 
F N "spi_data_is_in" 1 891 ""
F B "spi_data_is_in" 1 891 "int8()" `307 
F N "spi_set_txcnt" 1 892 ""
V L "count" 1 892 "int16" `309 
F B "spi_set_txcnt" 1 892 "void(int16 count)" `308 
F N "spi_enable_interrupts" 1 893 ""
V L "interrupts" 1 893 "int8" `311 
F B "spi_enable_interrupts" 1 893 "void(int8 interrupts)" `310 
F N "spi_disable_interrupts" 1 894 ""
V L "interrupts" 1 894 "int8" `313 
F B "spi_disable_interrupts" 1 894 "void(int8 interrupts)" `312 
F N "spi_clear_interrupts" 1 895 ""
V L "interrupts" 1 895 "int8" `315 
F B "spi_clear_interrupts" 1 895 "void(int8 interrupts)" `314 
F N "spi_interrupt_enabled" 1 896 ""
V L "interrupt" 1 896 "int8" `317 
F B "spi_interrupt_enabled" 1 896 "int8(int8 interrupt)" `316 
F N "spi_interrupt_active" 1 897 ""
V L "interrupt" 1 897 "int8" `319 
F B "spi_interrupt_active" 1 897 "int8(int8 interrupt)" `318 
F N "spi_interrupt_active" 1 898 ""
F B "spi_interrupt_active" 1 898 "int8()" `320  "Constants used for first param to SETUP_SPI() are:"
D G "SPI_DISABLED" 1 901 "0"
D G "SPI_MASTER" 1 902 "0x83"
D G "SPI_SLAVE" 1 903 "0x81"
D G "SPI_SCK_IDLE_LOW" 1 905 "0"
D G "SPI_SCK_IDLE_HIGH" 1 906 "0x2000"
D G "SPI_CLK_FOSC" 1 908 "0"
D G "SPI_CLK_HFINTRC" 1 909 "0x010000"
D G "SPI_CLK_MFINTRC" 1 910 "0x020000"
D G "SPI_CLK_CLKR" 1 911 "0x030000"
D G "SPI_CLK_TIMER0" 1 912 "0x040000"
D G "SPI_CLK_TIMER2" 1 913 "0x050000"
D G "SPI_CLK_TIMER4" 1 914 "0x060000"
D G "SPI_CLK_TIMER6" 1 915 "0x070000"
D G "SPI_CLK_SMT1" 1 916 "0x080000"
D G "SPI_DWIDTH_8" 1 918 "0"
D G "SPI_DWIDTH_7" 1 919 "0xE00000"
D G "SPI_DWIDTH_6" 1 920 "0xC00000"
D G "SPI_DWIDTH_5" 1 921 "0xA00000"
D G "SPI_DWIDTH_4" 1 922 "0x800000"
D G "SPI_DWIDTH_3" 1 923 "0x600000"
D G "SPI_DWIDTH_2" 1 924 "0x400000"
D G "SPI_DWIDTH_1" 1 925 "0x200000"
D G "SPI_RX_AND_TX_MODE" 1 927 "0"
D G "SPI_RX_ONLY_MODE" 1 928 "0x2000000"
D G "SPI_TX_ONLY_MODE" 1 929 "0x1000000"
D G "SPI_LSB_FIRST" 1 931 "0x0004"
D G "SPI_SDO_ACTIVE_LOW" 1 932 "0x0100"
D G "SPI_SDI_ACTIVE_LOW" 1 933 "0x0200"
D G "SPI_SS_ACTIVE_HIGH" 1 934 "0x0040"
D G "SPI_XMIT_L_TO_H" 1 937 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 938 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 941 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 942 "0x8000"
D G "SPI_L_TO_H" 1 945 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 946 "SPI_SCK_IDLE_HIGH"
D G "SPI_INT_TX_UNDERFLOW" 1 953 "0x02"
D G "SPI_INT_RX_OVERFLOW" 1 954 "0x04"
D G "SPI_INT_END_OF_SS" 1 955 "0x10"
D G "SPI_INT_START_OF_SS" 1 956 "0x20"
D G "SPI_INT_TX_CNT_IS_ZERO" 1 957 "0x40"
D G "SPI_INT_SHIFT_REG_EMPTY" 1 958 "0x80"
c L "spi_interrupt_active" 1 1 2 "FUNCTION"
F N "setup_uart" 1 962 ""
V L "baud" 1 962 "int32" `322 
F B "setup_uart" 1 962 "void(int32 baud)" `321 
F N "setup_uart" 1 963 ""
V L "baud" 1 963 "int32" `324 
V L "stream" 1 963 "int8" `325 
F B "setup_uart" 1 963 "void(int32 baud,int8 stream)" `323 
F N "setup_uart" 1 964 ""
V L "baud" 1 964 "int32" `327 
V L "stream" 1 964 "int8" `328 
V L "clock" 1 964 "int32" `329 
F B "setup_uart" 1 964 "void(int32 baud,int8 stream,int32 clock)" `326 
F N "set_uart_speed" 1 965 ""
V L "baud" 1 965 "int32" `331 
F B "set_uart_speed" 1 965 "void(int32 baud)" `330 
F N "set_uart_speed" 1 966 ""
V L "baud" 1 966 "int32" `333 
V L "stream" 1 966 "int8" `334 
F B "set_uart_speed" 1 966 "void(int32 baud,int8 stream)" `332 
F N "set_uart_speed" 1 967 ""
V L "baud" 1 967 "int32" `336 
V L "stream" 1 967 "int8" `337 
V L "clock" 1 967 "int32" `338 
F B "set_uart_speed" 1 967 "void(int32 baud,int8 stream,int32 clock)" `335  "Constants used in setup_uart() are:"
D G "UART_AUTODETECT" 1 971 "8"
D G "UART_AUTODETECT_NOWAIT" 1 972 "9"
D G "UART_WAKEUP_ON_RDA" 1 973 "10"
D G "UART_SEND_BREAK" 1 974 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
F N "setup_comparator" 1 979 ""
V L "mode" 1 979 "int32" `340 
F B "setup_comparator" 1 979 "void(int32 mode)" `339  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 1 982 "0x003F003F"
D G "CP1_A0_A2" 1 985 "0x8000"
D G "CP1_A1_A2" 1 986 "0x8001"
D G "CP1_B3_A2" 1 987 "0x8002"
D G "CP1_B1_A2" 1 988 "0x8003"
D G "CP1_FVR_A2" 1 989 "0x8006"
D G "CP1_VSS_A2" 1 990 "0x8007"
D G "CP1_A0_A3" 1 991 "0x8008"
D G "CP1_A1_A3" 1 992 "0x8009"
D G "CP1_B3_A3" 1 993 "0x800A"
D G "CP1_B1_A3" 1 994 "0x800B"
D G "CP1_FVR_A3" 1 995 "0x800E"
D G "CP1_VSS_A3" 1 996 "0x800F"
D G "CP1_A0_DAC" 1 997 "0x8028"
D G "CP1_A1_DAC" 1 998 "0x8029"
D G "CP1_B3_DAC" 1 999 "0x802A"
D G "CP1_B1_DAC" 1 1000 "0x802B"
D G "CP1_FVR_DAC" 1 1001 "0x802E"
D G "CP1_VSS_DAC" 1 1002 "0x802F"
D G "CP1_A0_FVR" 1 1003 "0x8030"
D G "CP1_A1_FVR" 1 1004 "0x8031"
D G "CP1_B3_FVR" 1 1005 "0x8032"
D G "CP1_B1_FVR" 1 1006 "0x8033"
D G "CP1_FVR_FVR" 1 1007 "0x8036"
D G "CP1_VSS_FVR" 1 1008 "0x8037"
D G "CP1_A0_VSS" 1 1009 "0x8038"
D G "CP1_A1_VSS" 1 1010 "0x8039"
D G "CP1_B3_VSS" 1 1011 "0x803A"
D G "CP1_B1_VSS" 1 1012 "0x803B"
D G "CP1_FVR_VSS" 1 1013 "0x803E"
D G "CP1_VSS_VSS" 1 1014 "0x803F"
D G "CP1_INT_L2H" 1 1016 "0x0080"
D G "CP1_INT_H2L" 1 1017 "0x0040"
D G "CP1_INVERT" 1 1018 "0x1000"
D G "CP1_HYST" 1 1019 "0x0200"
D G "CP1_SYNC" 1 1020 "0x0100"
D G "CP2_A0_A2" 1 1023 "0x80000000"
D G "CP2_A1_A2" 1 1024 "0x80010000"
D G "CP2_B3_A2" 1 1025 "0x80020000"
D G "CP2_B1_A2" 1 1026 "0x80030000"
D G "CP2_FVR_A2" 1 1027 "0x80060000"
D G "CP2_VSS_A2" 1 1028 "0x80070000"
D G "CP2_A0_B0" 1 1029 "0x80080000"
D G "CP2_A1_B0" 1 1030 "0x80090000"
D G "CP2_B3_B0" 1 1031 "0x800A0000"
D G "CP2_B1_B0" 1 1032 "0x800B0000"
D G "CP2_FVR_B0" 1 1033 "0x800E0000"
D G "CP2_VSS_B0" 1 1034 "0x800F0000"
D G "CP2_A0_DAC" 1 1035 "0x80280000"
D G "CP2_A1_DAC" 1 1036 "0x80290000"
D G "CP2_B3_DAC" 1 1037 "0x802A0000"
D G "CP2_B1_DAC" 1 1038 "0x802B0000"
D G "CP2_FVR_DAC" 1 1039 "0x802E0000"
D G "CP2_VSS_DAC" 1 1040 "0x802F0000"
D G "CP2_A0_FVR" 1 1041 "0x80300000"
D G "CP2_A1_FVR" 1 1042 "0x80310000"
D G "CP2_B3_FVR" 1 1043 "0x80320000"
D G "CP2_B1_FVR" 1 1044 "0x80330000"
D G "CP2_FVR_FVR" 1 1045 "0x80360000"
D G "CP2_VSS_FVR" 1 1046 "0x80370000"
D G "CP2_A0_VSS" 1 1047 "0x80380000"
D G "CP2_A1_VSS" 1 1048 "0x80390000"
D G "CP2_B3_VSS" 1 1049 "0x803A0000"
D G "CP2_B1_VSS" 1 1050 "0x803B0000"
D G "CP2_FVR_VSS" 1 1051 "0x803E0000"
D G "CP2_VSS_VSS" 1 1052 "0x803F0000"
D G "CP2_INT_L2H" 1 1054 "0x00800000"
D G "CP2_INT_H2L" 1 1055 "0x00400000"
D G "CP2_INVERT" 1 1056 "0x10000000"
D G "CP2_HYST" 1 1057 "0x02000000"
D G "CP2_SYNC" 1 1058 "0x01000000"
c L "setup_comparator" 1 1 2 "FUNCTION"
F N "setup_vref" 1 1065 ""
V L "mode" 1 1065 "int8" `344 
F B "setup_vref" 1 1065 "void(int8 mode)" `343  "Constants used in setup_vref() are:"
D G "VREF_OFF" 1 1067 "0"
D G "VREF_ON" 1 1068 "0x80"
D G "VREF_ADC_OFF" 1 1070 "0"
D G "VREF_ADC_1v024" 1 1071 "0x81"
D G "VREF_ADC_2v048" 1 1072 "0x82"
D G "VREF_ADC_4v096" 1 1073 "0x83"
D G "VREF_COMP_DAC_OFF" 1 1075 "0"
D G "VREF_COMP_DAC_1v024" 1 1076 "0x84"
D G "VREF_COMP_DAC_2v048" 1 1077 "0x88"
D G "VREF_COMP_DAC_4v096" 1 1078 "0x8C"
D G "TEMPERATURE_INDICATOR_DISABLED" 1 1080 "0"
D G "TEMPERATURE_INDICATOR_ENABLED" 1 1081 "0x20"
D G "TEMPERATURE_RANGE_LOW" 1 1082 "0"
D G "TEMPERATURE_RANGE_HIGH" 1 1083 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
F N "setup_low_volt_detect" 1 1087 ""
V L "mode" 1 1087 "int8" `346 
F B "setup_low_volt_detect" 1 1087 "void(int8 mode)" `345  "Constants used in setup_low_volt_detect() are:"
D G "LVD_46" 1 1089 "0x8E"
D G "LVD_43" 1 1090 "0x8D"
D G "LVD_41" 1 1091 "0x8C"
D G "LVD_39" 1 1092 "0x8B"
D G "LVD_37" 1 1093 "0x8A"
D G "LVD_36" 1 1094 "0x89"
D G "LVD_34" 1 1095 "0x88"
D G "LVD_30" 1 1096 "0x87"
D G "LVD_28" 1 1097 "0x86"
D G "LVD_27" 1 1098 "0x85"
D G "LVD_25" 1 1099 "0x84"
D G "LVD_24" 1 1100 "0x83"
D G "LVD_22" 1 1101 "0x82"
D G "LVD_20" 1 1102 "0x81"
D G "LVD_18" 1 1103 "0x80"
D G "LVD_INT_WHEN_BELOW" 1 1105 "0x10"
D G "LVD_INT_WHEN_ABOVE" 1 1106 "0x20"
c L "setup_low_volt_detect" 1 1 3 "FUNCTION"
F N "setup_dac" 1 1114 ""
V L "mode" 1 1114 "int8" `350 
F B "setup_dac" 1 1114 "void(int8 mode)" `349 
F N "dac_write" 1 1115 ""
V L "value" 1 1115 "int8" `352 
F B "dac_write" 1 1115 "void(int8 value)" `351  "Constants used in SETUP_DAC() are:"
D G "DAC_OFF" 1 1117 "0"
D G "DAC_VSS_VDD" 1 1118 "0x80"
D G "DAC_VREF_VDD" 1 1119 "0x81"
D G "DAC_VSS_VREF" 1 1120 "0x84"
D G "DAC_VREF_VREF" 1 1121 "0x85"
D G "DAC_VSS_FVR" 1 1122 "0x88"
D G "DAC_VREF_FVR" 1 1123 "0x89"
D G "DAC_OUTPUT2" 1 1125 "0x10"
D G "DAC_OUTPUT" 1 1126 "0x20"
c L "dac_write" 1 1 3 "FUNCTION"
F N "setup_cwg" 1 1131 ""
V L "mode" 1 1131 "int32" `354 
V L "shutdown" 1 1131 "int16" `355 
V L "dt_rising" 1 1131 "int8" `356 
V L "dt_falling" 1 1131 "int8" `357 
F B "setup_cwg" 1 1131 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `353 
F N "setup_cwg2" 1 1132 ""
V L "mode" 1 1132 "int32" `359 
V L "shutdown" 1 1132 "int16" `360 
V L "dt_rising" 1 1132 "int8" `361 
V L "dt_falling" 1 1132 "int8" `362 
F B "setup_cwg2" 1 1132 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `358 
F N "setup_cwg3" 1 1133 ""
V L "mdoe" 1 1133 "int32" `364 
V L "shutdown" 1 1133 "int16" `365 
V L "dt_rising" 1 1133 "int8" `366 
V L "dt_falling" 1 1133 "int8" `367 
F B "setup_cwg3" 1 1133 "void(int32 mdoe,int16 shutdown,int8 dt_rising,int8 dt_falling)" `363 
F N "cwg_restart" 1 1134 ""
F B "cwg_restart" 1 1134 "void()" `368 
F N "cwg2_restart" 1 1135 ""
F B "cwg2_restart" 1 1135 "void()" `369 
F N "cwg3_restart" 1 1136 ""
F B "cwg3_restart" 1 1136 "void()" `370 
F N "cwg_status" 1 1137 ""
F B "cwg_status" 1 1137 "int8()" `371 
F N "cwg2_status" 1 1138 ""
F B "cwg2_status" 1 1138 "void()" `372 
F N "cwg3_status" 1 1139 ""
F B "cwg3_status" 1 1139 "void()" `373  "Constants used in SETUP_CWG(), SETUP_CWG2() and SETUP_CWG3() first parameter are:"
D G "CWG_ENABLED" 1 1141 "0x80"
D G "CWG_DISABLED" 1 1142 "0x00"
D G "CWG_MODE_STEERING" 1 1144 "0x00"
D G "CWG_MODE_SYNCRONOUS_STEERING" 1 1145 "0x01"
D G "CWG_MODE_FULL_BRIDGE" 1 1146 "0x02"
D G "CWG_MODE_FULL_BRIDGE_REV" 1 1147 "0x03"
D G "CWG_MODE_HALF_BRIDGE" 1 1148 "0x04"
D G "CWG_MODE_PUSH_PULL" 1 1149 "0x05"
D G "CWG_CLOCK_HFINTOSC" 1 1151 "0x0100"
D G "CWG_CLOCK_FOSC" 1 1152 "0x0000"
D G "CWG_INPUT_CWGxIN" 1 1154 "0x0000"
D G "CWG_INPUT_CCP1" 1 1155 "0x0800"
D G "CWG_INPUT_CCP2" 1 1156 "0x1000"
D G "CWG_INPUT_CCP3" 1 1157 "0x1800"
D G "CWG_INPUT_CCP4" 1 1158 "0x2000"
D G "CWG_INPUT_PWM5" 1 1159 "0x2800"
D G "CWG_INPUT_PWM6" 1 1160 "0x3000"
D G "CWG_INPUT_PWM7" 1 1161 "0x3800"
D G "CWG_INPUT_PWM8" 1 1162 "0x4000"
D G "CWG_INPUT_NCO" 1 1163 "0x5800"
D G "CWG_INPUT_COMP1" 1 1164 "0x6000"
D G "CWG_INPUT_COMP2" 1 1165 "0x6800"
D G "CWG_INPUT_DSM" 1 1166 "0x7000"
D G "CWG_INPUT_CLC1" 1 1167 "0x7800"
D G "CWG_INPUT_CLC2" 1 1168 "0x8000"
D G "CWG_INPUT_CLC3" 1 1169 "0x8800"
D G "CWG_INPUT_CLC4" 1 1170 "0x9000"
D G "CWG_A_INVERTED" 1 1172 "0x010000"
D G "CWG_B_INVERTED" 1 1173 "0x020000"
D G "CWG_C_INVERTED" 1 1174 "0x040000"
D G "CWG_D_INVERTED" 1 1175 "0x080000"
D G "CWG_A_FORCE_HIGH" 1 1177 "0x10000000" "Only available in Steering modes"
D G "CWG_A_FORCE_LOW" 1 1178 "0x00000000" "Only available in Steering modes"
D G "CWG_A_OUTPUT_PWM" 1 1179 "0x01000000" "Only available in Steering modes"
D G "CWG_B_FORCE_HIGH" 1 1181 "0x20000000" "Only available in Steering modes"
D G "CWG_B_FORCE_LOW" 1 1182 "0x00000000" "Only available in Steering modes"
D G "CWG_B_OUTPUT_PWM" 1 1183 "0x02000000" "Only available in Steering modes"
D G "CWG_C_FORCE_HIGH" 1 1185 "0x40000000" "Only available in Steering modes"
D G "CWG_C_FORCE_LOW" 1 1186 "0x00000000" "Only available in Steering modes"
D G "CWG_C_OUTPUT_PWM" 1 1187 "0x04000000" "Only available in Steering modes"
D G "CWG_D_FORCE_HIGH" 1 1189 "0x80000000" "Only available in Steering modes"
D G "CWG_D_FORCE_LOW" 1 1190 "0x00000000" "Only available in Steering modes"
D G "CWG_D_OUTPUT_PWM" 1 1191 "0x08000000" "Only available in Steering modes"
D G "CWG_NO_AUTO_SHUTDOWN" 1 1195 "0x0000"
D G "CWG_SHUTDOWN_ON_CWGxIN" 1 1196 "0x0001"
D G "CWG_SHUTDOWN_ON_TMR2" 1 1197 "0x0002"
D G "CWG_SHUTDOWN_ON_TMR4" 1 1198 "0x0004"
D G "CWG_SHUTDOWN_ON_TMR6" 1 1199 "0x0008"
D G "CWG_SHUTDOWN_ON_COMP1" 1 1200 "0x0010"
D G "CWG_SHUTDOWN_ON_COMP2" 1 1201 "0x0020"
D G "CWG_SHUTDOWN_ON_CLCx" 1 1202 "0x0040" "CLC2 - CWG1, CLC3 - CWG2, CLC4 - CWG3"
D G "CWG_AUTO_RESTART" 1 1203 "0x4000"
D G "CWG_SHUTDOWN_AC_INACTIVE_STATE" 1 1205 "0x0000"
D G "CWG_SHUTDOWN_AC_TRISTATE" 1 1206 "0x0400"
D G "CWG_SHUTDOWN_AC_LOW" 1 1207 "0x0800"
D G "CWG_SHUTDOWN_AC_HIGH" 1 1208 "0x0C00"
D G "CWG_SHUTDOWN_BD_INACTIVE_STATE" 1 1210 "0"
D G "CWG_SHUTDOWN_BD_TRISTATE" 1 1211 "0x1000"
D G "CWG_SHUTDOWN_BD_LOW" 1 1212 "0x2000"
D G "CWG_SHUTDOWN_BD_HIGH" 1 1213 "0x3000"
D G "CWG_AUTO_SHUTDOWN" 1 1216 "0x80"
c L "cwg3_status" 1 1 5 "FUNCTION"
F N "setup_nco" 1 1223 ""
V L "mode" 1 1223 "int32" `375 
V L "inc_value" 1 1223 "int32" `376 
F B "setup_nco" 1 1223 "void(int32 mode,int32 inc_value)" `374 
F N "set_nco_inc_value" 1 1224 ""
V L "value" 1 1224 "int32" `378 
F B "set_nco_inc_value" 1 1224 "void(int32 value)" `377 
F N "set_nco_accumulator" 1 1225 ""
V L "value" 1 1225 "int32" `380 
F B "set_nco_accumulator" 1 1225 "void(int32 value)" `379 
F N "get_nco_accumulator" 1 1226 ""
F B "get_nco_accumulator" 1 1226 "int32()" `381 
F N "get_nco_inc_value" 1 1227 ""
F B "get_nco_inc_value" 1 1227 "int32()" `382  "Constants used in SETUP_NCO() first parameter are:"
D G "NCO_ENABLED" 1 1229 "0x0080"
D G "NCO_DISABLED" 1 1230 "0"
D G "NCO_ACTIVE_HIGH" 1 1232 "0x0010"
D G "NCO_ACTIVE_LOW" 1 1233 "0"
D G "NCO_PULSE_FREQ_MODE" 1 1235 "0x0001"
D G "NCO_FIXED_DUTY_MODE" 1 1236 "0"
D G "NCO_CLOCK_FOSC" 1 1238 "0x0000"
D G "NCO_CLOCK_HFINTOSC" 1 1239 "0x0100"
D G "NCO_CLOCK_LFINTOSC" 1 1240 "0x0200"
D G "NCO_CLOCK_MFINTOSC_500KHZ" 1 1241 "0x0300"
D G "NCO_CLOCK_MFINTOSC" 1 1242 "0x0400"
D G "NCO_CLOCK_SOSC" 1 1243 "0x0500"
D G "NCO_CLOCK_CLKR" 1 1244 "0x0600"
D G "NCO_CLOCK_CLC1" 1 1245 "0x0700"
D G "NCO_CLOCK_CLC2" 1 1246 "0x0800"
D G "NCO_CLOCK_CLC3" 1 1247 "0x0900"
D G "NCO_CLOCK_CLC4" 1 1248 "0x0A00"
D G "NCO_PULSE_WIDTH_1" 1 1251 "0"
D G "NCO_PULSE_WIDTH_2" 1 1252 "0x2000"
D G "NCO_PULSE_WIDTH_4" 1 1253 "0x4000"
D G "NCO_PULSE_WIDTH_8" 1 1254 "0x6000"
D G "NCO_PULSE_WIDTH_16" 1 1255 "0x8000"
D G "NCO_PULSE_WIDTH_32" 1 1256 "0xA000"
D G "NCO_PULSE_WIDTH_64" 1 1257 "0xC000"
D G "NCO_PULSE_WIDTH_128" 1 1258 "0xE000"
c L "get_nco_inc_value" 1 1 4 "FUNCTION"
F N "setup_clc1" 1 1267 ""
V L "mode" 1 1267 "int32" `385 
F B "setup_clc1" 1 1267 "void(int32 mode)" `384 
F N "setup_clc2" 1 1268 ""
V L "mode" 1 1268 "int32" `387 
F B "setup_clc2" 1 1268 "void(int32 mode)" `386 
F N "setup_clc3" 1 1269 ""
V L "mode" 1 1269 "int32" `389 
F B "setup_clc3" 1 1269 "void(int32 mode)" `388 
F N "setup_clc4" 1 1270 ""
V L "mode" 1 1270 "int32" `391 
F B "setup_clc4" 1 1270 "void(int32 mode)" `390 
F N "clc1_setup_input" 1 1271 ""
V L "input" 1 1271 "int8" `393 
V L "selection" 1 1271 "int8" `394 
F B "clc1_setup_input" 1 1271 "void(int8 input,int8 selection)" `392 
F N "clc2_setup_input" 1 1272 ""
V L "input" 1 1272 "int8" `396 
V L "selection" 1 1272 "int8" `397 
F B "clc2_setup_input" 1 1272 "void(int8 input,int8 selection)" `395 
F N "clc3_setup_input" 1 1273 ""
V L "input" 1 1273 "int8" `399 
V L "selection" 1 1273 "int8" `400 
F B "clc3_setup_input" 1 1273 "void(int8 input,int8 selection)" `398 
F N "clc4_setup_input" 1 1274 ""
V L "input" 1 1274 "int8" `402 
V L "selection" 1 1274 "int8" `403 
F B "clc4_setup_input" 1 1274 "void(int8 input,int8 selection)" `401 
F N "clc1_setup_gate" 1 1275 ""
V L "gate" 1 1275 "int8" `405 
V L "mode" 1 1275 "int16" `406 
F B "clc1_setup_gate" 1 1275 "void(int8 gate,int16 mode)" `404 
F N "clc2_setup_gate" 1 1276 ""
V L "gate" 1 1276 "int8" `408 
V L "mode" 1 1276 "int16" `409 
F B "clc2_setup_gate" 1 1276 "void(int8 gate,int16 mode)" `407 
F N "clc3_setup_gate" 1 1277 ""
V L "gate" 1 1277 "int8" `411 
V L "mode" 1 1277 "int16" `412 
F B "clc3_setup_gate" 1 1277 "void(int8 gate,int16 mode)" `410 
F N "clc4_setup_gate" 1 1278 ""
V L "gate" 1 1278 "int8" `414 
V L "mode" 1 1278 "int16" `415 
F B "clc4_setup_gate" 1 1278 "void(int8 gate,int16 mode)" `413  "Constants used in SETUP_CLCx() are:"
D G "CLC_ENABLED" 1 1280 "0x080"
D G "CLC_DISABLED" 1 1281 "0"
D G "CLC_INT_L_TO_H" 1 1283 "0x010"
D G "CLC_INT_H_TO_L" 1 1284 "0x008"
D G "CLC_OUTPUT_INVERTED" 1 1285 "0x100"
D G "CLC_MODE_AND_OR" 1 1287 "0x000"
D G "CLC_MODE_OR_XOR" 1 1288 "0x001"
D G "CLC_MODE_AND" 1 1289 "0x002"
D G "CLC_MODE_SR_LATCH" 1 1290 "0x003"
D G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 1 1291 "0x004"
D G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 1 1292 "0x005"
D G "CLC_MODE_JK_FLIP_FLOP" 1 1293 "0x006"
D G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 1 1294 "0x007"
D G "CLC_INPUT_CLCIN0" 1 1297 "0"
D G "CLC_INPUT_CLCIN1" 1 1298 "0x01"
D G "CLC_INPUT_CLCIN2" 1 1299 "0x02"
D G "CLC_INPUT_CLCIN3" 1 1300 "0x03"
D G "CLC_INPUT_FOSC" 1 1301 "0x04"
D G "CLC_INPUT_HFINTOSC" 1 1302 "0x05"
D G "CLC_INPUT_LFINTOSC" 1 1303 "0x06"
D G "CLC_INPUT_MFINTOSC_500KHZ" 1 1304 "0x07"
D G "CLC_INPUT_MFINTOSC" 1 1305 "0x08"
D G "CLC_INPUT_SOSC" 1 1306 "0x09"
D G "CLC_INPUT_ADCRC" 1 1307 "0x0A"
D G "CLC_INPUT_CLKR" 1 1308 "0x0B"
D G "CLC_INPUT_TIMER0" 1 1309 "0x0C"
D G "CLC_INPUT_TIMER1" 1 1310 "0x0D"
D G "CLC_INPUT_TIMER2" 1 1311 "0x0E"
D G "CLC_INPUT_TIMER3" 1 1312 "0x0F"
D G "CLC_INPUT_TIMER4" 1 1313 "0x10"
D G "CLC_INPUT_TIMER5" 1 1314 "0x11"
D G "CLC_INPUT_TIMER6" 1 1315 "0x12"
D G "CLC_INPUT_SMT1" 1 1316 "0x13"
D G "CLC_INPUT_CCP1" 1 1317 "0x14"
D G "CLC_INPUT_CCP2" 1 1318 "0x15"
D G "CLC_INPUT_CCP3" 1 1319 "0x16"
D G "CLC_INPUT_CCP4" 1 1320 "0x17"
D G "CLC_INPUT_PWM5" 1 1321 "0x18"
D G "CLC_INPUT_PWM6" 1 1322 "0x19"
D G "CLC_INPUT_PWM7" 1 1323 "0x1A"
D G "CLC_INPUT_PWM8" 1 1324 "0x1B"
D G "CLC_INPUT_NCO1" 1 1325 "0x1E"
D G "CLC_INPUT_C1OUT" 1 1326 "0x1F"
D G "CLC_INPUT_C2OUT" 1 1327 "0x20"
D G "CLC_INPUT_ZCD" 1 1328 "0x21"
D G "CLC_INPUT_IOCIF" 1 1329 "0x22"
D G "CLC_INPUT_DSM" 1 1330 "0x23"
D G "CLC_INPUT_CLC1" 1 1331 "0x24"
D G "CLC_INPUT_CLC2" 1 1332 "0x25"
D G "CLC_INPUT_CLC3" 1 1333 "0x26"
D G "CLC_INPUT_CLC4" 1 1334 "0x27"
D G "CLC_INPUT_U1TX" 1 1335 "0x28"
D G "CLC_INPUT_U2TX" 1 1336 "0x29"
D G "CLC_INPUT_SDO1" 1 1337 "0x2B"
D G "CLC_INPUT_SCK1" 1 1338 "0x2C"
D G "CLC_INPUT_SS1" 1 1339 "0x2D"
D G "CLC_INPUT_CWG1A" 1 1340 "0x2E"
D G "CLC_INPUT_CWG1B" 1 1341 "0x2F"
D G "CLC_INPUT_CWG2A" 1 1342 "0x30"
D G "CLC_INPUT_CWG2B" 1 1343 "0x31"
D G "CLC_INPUT_CWG3A" 1 1344 "0x32"
D G "CLC_INPUT_CWG3B" 1 1345 "0x33"
D G "CLC_GATE_AND" 1 1350 "0x155"
D G "CLC_GATE_NAND" 1 1351 "0x055"
D G "CLC_GATE_NOR" 1 1352 "0x1AA"
D G "CLC_GATE_OR" 1 1353 "0x0AA"
D G "CLC_GATE_CLEAR" 1 1354 "0"
D G "CLC_GATE_SET" 1 1355 "0x100"
D G "CLC_GATE_INVERTED_INPUT_1" 1 1359 "0x001"
D G "CLC_GATE_NON_INVERTED_INPUT_1" 1 1360 "0x002"
D G "CLC_GATE_INVERTED_INPUT_2" 1 1361 "0x004"
D G "CLC_GATE_NON_INVERTED_INPUT_2" 1 1362 "0x008"
D G "CLC_GATE_INVERTED_INPUT_3" 1 1363 "0x010"
D G "CLC_GATE_NON_INVERTED_INPUT_3" 1 1364 "0x020"
D G "CLC_GATE_INVERTED_INPUT_4" 1 1365 "0x040"
D G "CLC_GATE_NON_INVERTED_INPUT_4" 1 1366 "0x080"
D G "CLC_GATE_OUTPUT_INVERTED" 1 1367 "0x100"
c L "clc4_setup_gate" 1 1 4 "FUNCTION"
F N "setup_dma" 1 1378 ""
V L "channel" 1 1378 "int8" `421 
V L "start_trigger" 1 1378 "int8" `422 
V L "abort_trigger" 1 1378 "int8" `423 
F B "setup_dma" 1 1378 "void(int8 channel,int8 start_trigger,int8 abort_trigger)" `420 
F N "dma_start" 1 1379 ""
V L "channel" 1 1379 "int8" `425 
V L "mode" 1 1379 "int8" `426 
V L "destAddr" 1 1379 "int16" `427 
V L "sourceAddr" 1 1379 "int32" `428 
V L "destCount" 1 1379 "int16" `429 
V L "sourceCount" 1 1379 "int16" `430 
F B "dma_start" 1 1379 "void(int8 channel,int8 mode,int16 destAddr,int32 sourceAddr,int16 destCount,int16 sourceCount)" `424 
F N "dma_status" 1 1380 ""
V L "channel" 1 1380 "int8" `432 
F B "dma_status" 1 1380 "int16(int8 channel)" `431 
F N "dma_go" 1 1381 ""
V L "channel" 1 1381 "int8" `434 
F B "dma_go" 1 1381 "void(int8 channel)" `433 
F N "dma_stop" 1 1382 ""
V L "channel" 1 1382 "int8" `436 
F B "dma_stop" 1 1382 "void(int8 channel)" `435  "Constants used in setup_dma() second and third parameters are:"
D G "DMA_TRIGGER_NONE" 1 1384 "0"
D G "DMA_TRIGGER_HLVD" 1 1385 "0x01"
D G "DMA_TRIGGER_OSF" 1 1386 "0x02"
D G "DMA_TRIGGER_CSW" 1 1387 "0x03"
D G "DMA_TRIGGER_NVM" 1 1388 "0x04"
D G "DMA_TRIGGER_SCAN" 1 1389 "0x05"
D G "DMA_TRIGGER_CRC" 1 1390 "0x06"
D G "DMA_TRIGGER_IOC" 1 1391 "0x07"
D G "DMA_TRIGGER_EXT" 1 1392 "0x08"
D G "DMA_TRIGGER_ZCD" 1 1393 "0x09"
D G "DMA_TRIGGER_ADC" 1 1394 "0x0A"
D G "DMA_TRIGGER_ADT" 1 1395 "0x0B"
D G "DMA_TRIGGER_COMP1" 1 1396 "0x0C"
D G "DMA_TRIGGER_SMT1" 1 1397 "0x0D"
D G "DMA_TRIGGER_SMT1PRA" 1 1398 "0x0E"
D G "DMA_TRIGGER_SMT1PWA" 1 1399 "0x0F"
D G "DMA_TRIGGER_DMA1SCNT" 1 1400 "0x10"
D G "DMA_TRIGGER_DMA1DCNT" 1 1401 "0x11"
D G "DMA_TRIGGER_DMA1OR" 1 1402 "0x12"
D G "DMA_TRIGGER_DMA1A" 1 1403 "0x13"
D G "DMA_TRIGGER_SPI1RX" 1 1404 "0x14"
D G "DMA_TRIGGER_SPI1TX" 1 1405 "0x15"
D G "DMA_TRIGGER_SPI1" 1 1406 "0x16"
D G "DMA_TRIGGER_I2C1RX" 1 1407 "0x17"
D G "DMA_TRIGGER_I2C1TX" 1 1408 "0x18"
D G "DMA_TRIGGER_I2C1" 1 1409 "0x19"
D G "DMA_TRIGGER_I2C1E" 1 1410 "0x1A"
D G "DMA_TRIGGER_RDA" 1 1411 "0x1B"
D G "DMA_TRIGGER_TBE" 1 1412 "0x1C"
D G "DMA_TRIGGER_U1E" 1 1413 "0x1D"
D G "DMA_TRIGGER_U1" 1 1414 "0x1E"
D G "DMA_TRIGGER_TIMER0" 1 1415 "0x1F"
D G "DMA_TRIGGER_TIMER1" 1 1416 "0x20"
D G "DMA_TRIGGER_TIMER1G" 1 1417 "0x21"
D G "DMA_TRIGGER_TIMER2" 1 1418 "0x22"
D G "DMA_TRIGGER_CCP1" 1 1419 "0x23"
D G "DMA_TRIGGER_NCO" 1 1420 "0x25"
D G "DMA_TRIGGER_CWG1" 1 1421 "0x26"
D G "DMA_TRIGGER_CLC1" 1 1422 "0x27"
D G "DMA_TRIGGER_EXT1" 1 1423 "0x28"
D G "DMA_TRIGGER_COMP2" 1 1424 "0x29"
D G "DMA_TRIGGER_DMA2SCNT" 1 1425 "0x2A"
D G "DMA_TRIGGER_DMA2DCNT" 1 1426 "0x2B"
D G "DMA_TRIGGER_DMA2OR" 1 1427 "0x2C"
D G "DMA_TRIGGER_DMA2A" 1 1428 "0x2D"
D G "DMA_TRIGGER_I2C2RX" 1 1429 "0x2E"
D G "DMA_TRIGGER_I2C2TX" 1 1430 "0x2F"
D G "DMA_TRIGGER_I2C2" 1 1431 "0x30"
D G "DMA_TRIGGER_I2C2E" 1 1432 "0x31"
D G "DMA_TRIGGER_RDA2" 1 1433 "0x32"
D G "DMA_TRIGGER_TBE2" 1 1434 "0x33"
D G "DMA_TRIGGER_U2E" 1 1435 "0x34"
D G "DMA_TRIGGER_U2" 1 1436 "0x35"
D G "DMA_TRIGGER_TIMER3" 1 1437 "0x36"
D G "DMA_TRIGGER_TIMER3G" 1 1438 "0x37"
D G "DMA_TRIGGER_TIMER4" 1 1439 "0x38"
D G "DMA_TRIGGER_CCP2" 1 1440 "0x39"
D G "DMA_TRIGGER_CWG2" 1 1441 "0x3B"
D G "DMA_TRIGGER_CLC2" 1 1442 "0x3C"
D G "DMA_TRIGGER_EXT2" 1 1443 "0x3D"
D G "DMA_TRIGGER_TIMER5" 1 1444 "0x46"
D G "DMA_TRIGGER_TIMER5G" 1 1445 "0x47"
D G "DMA_TRIGGER_TIMER6" 1 1446 "0x48"
D G "DMA_TRIGGER_CCP3" 1 1447 "0x49"
D G "DMA_TRIGGER_CWG3" 1 1448 "0x4A"
D G "DMA_TRIGGER_CLC3" 1 1449 "0x4B"
D G "DMA_TRIGGER_CCP4" 1 1450 "0x50"
D G "DMA_TRIGGER_CLC4" 1 1451 "0x51"
D G "DMA_SOURCE_ADDR_IS_EEPROM" 1 1454 "0x10"
D G "DMA_SOURCE_ADDR_IS_PFM" 1 1455 "0x08"
D G "DMA_SOURCE_ADDR_IS_SFR_GPR" 1 1456 "0"
D G "DMA_DEC_SOURCE_ADDR" 1 1458 "0x04"
D G "DMA_INC_SOURCE_ADDR" 1 1459 "0x02"
D G "DMA_SOURCE_ADDR_UNCHANGED" 1 1460 "0"
D G "DMA_DEC_DEST_ADDR" 1 1462 "0x80"
D G "DMA_INC_DEST_ADDR" 1 1463 "0x40"
D G "DMA_DEST_ADDR_UNCHANGED" 1 1464 "0"
D G "DMA_HW_TRIGGER_STARTS_XFER" 1 1466 "0x4000"
D G "DMA_SW_TRIGGER_STARTS_XFER" 1 1467 "0"
D G "DMA_HW_TRIGGER_ABORTS_XFER" 1 1469 "0x0400"
D G "DMA_CONTINUOUS" 1 1471 "0" "Only applicable when HW trigger starts transfer"
D G "DMA_ONE_SHOT_FROM_SOURCE_COUNT" 1 1472 "0x01" "Only applicable when HW trigger starts transfer, stops when source count equals zero"
D G "DMA_ONE_SHOT_FROM_DEST_COUNT" 1 1473 "0x20" "Only applicable when HW trigger starts transfer, stops when destination count equal zero"
D G "DMA_ONE_SHOT" 1 1474 "0x21" "Only applicable when HW trigger starts transfer, stops when either source or destination count equal zero"
D G "DMA_START_NOW" 1 1476 "0x2000" "Only applicable when SW trigger starts transfer"
D G "DMA_DONE" 1 1479 "0x01"
c L "dma_stop" 1 1 4 "FUNCTION"
F N "setup_crc" 1 1488 ""
V L "poly_terms" 1 1488 "int8" `440 
F B "setup_crc" 1 1488 "void(int8 poly_terms,*int8 _VA_LIST)" `439 
F N "crc_init" 1 1489 ""
V L "value" 1 1489 "int16" `443 
F B "crc_init" 1 1489 "void(int16 value)" `442 
F N "crc_calc16" 1 1490 ""
V L "data" 1 1490 "int16" `445 
F B "crc_calc16" 1 1490 "int16(int16 data)" `444 
F N "crc_calc16" 1 1491 ""
V L "data" 1 1491 "int16" `447 
V L "data_width" 1 1491 "int8" `448 
F B "crc_calc16" 1 1491 "int16(int16 data,int8 data_width)" `446 
F N "crc_calc16" 1 1492 ""
V L "data" 1 1492 "int8" `450 
V L "data_width" 1 1492 "int8" `451 
F B "crc_calc16" 1 1492 "int16(int8 data,int8 data_width)" `449 
F N "crc_calc16" 1 1493 ""
V L "ptr" 1 1493 "*int16" `453 
V L "count" 1 1493 "int16" `454 
F B "crc_calc16" 1 1493 "int16(*int16 ptr,int16 count)" `452 
F N "crc_calc16" 1 1494 ""
V L "ptr" 1 1494 "*int16" `456 
V L "count" 1 1494 "int16" `457 
V L "data_width" 1 1494 "int8" `458 
F B "crc_calc16" 1 1494 "int16(*int16 ptr,int16 count,int8 data_width)" `455 
F N "crc_calc16" 1 1495 ""
V L "ptr" 1 1495 "*int8" `460 
V L "count" 1 1495 "int16" `461 
V L "data_width" 1 1495 "int8" `462 
F B "crc_calc16" 1 1495 "int16(*int8 ptr,int16 count,int8 data_width)" `459 
F N "crc_calc8" 1 1496 ""
V L "data" 1 1496 "int8" `464 
F B "crc_calc8" 1 1496 "int8(int8 data)" `463 
F N "crc_calc8" 1 1497 ""
V L "data" 1 1497 "int8" `466 
V L "data_width" 1 1497 "int8" `467 
F B "crc_calc8" 1 1497 "int8(int8 data,int8 data_width)" `465 
F N "crc_calc8" 1 1498 ""
V L "ptr" 1 1498 "*int8" `469 
V L "count" 1 1498 "int16" `470 
F B "crc_calc8" 1 1498 "int8(*int8 ptr,int16 count)" `468 
F N "crc_calc8" 1 1499 ""
V L "ptr" 1 1499 "*int8" `472 
V L "count" 1 1499 "int16" `473 
V L "data_width" 1 1499 "int8" `474 
F B "crc_calc8" 1 1499 "int8(*int8 ptr,int16 count,int8 data_width)" `471 
F N "crc_calc" 1 1500 ""
V L "data" 1 1500 "int16" `476 
F B "crc_calc" 1 1500 "int16(int16 data)" `475 
F N "crc_calc" 1 1501 ""
V L "data" 1 1501 "int16" `478 
V L "data_width" 1 1501 "int8" `479 
F B "crc_calc" 1 1501 "int16(int16 data,int8 data_width)" `477 
F N "crc_calc" 1 1502 ""
V L "data" 1 1502 "int8" `481 
V L "data_width" 1 1502 "int8" `482 
F B "crc_calc" 1 1502 "int16(int8 data,int8 data_width)" `480 
F N "crc_calc" 1 1503 ""
V L "ptr" 1 1503 "*int16" `484 
V L "count" 1 1503 "int16" `485 
F B "crc_calc" 1 1503 "int16(*int16 ptr,int16 count)" `483 
F N "crc_calc" 1 1504 ""
V L "ptr" 1 1504 "*int16" `487 
V L "count" 1 1504 "int16" `488 
V L "data_width" 1 1504 "int8" `489 
F B "crc_calc" 1 1504 "int16(*int16 ptr,int16 count,int8 data_width)" `486 
F N "crc_calc" 1 1505 ""
V L "ptr" 1 1505 "*int8" `491 
V L "count" 1 1505 "int16" `492 
V L "data_width" 1 1505 "int8" `493 
F B "crc_calc" 1 1505 "int16(*int8 ptr,int16 count,int8 data_width)" `490 
F N "crc_write" 1 1506 ""
V L "data" 1 1506 "int16" `495 
F B "crc_write" 1 1506 "void(int16 data)" `494 
F N "crc_write" 1 1507 ""
V L "data" 1 1507 "int16" `497 
V L "data_width" 1 1507 "int8" `498 
F B "crc_write" 1 1507 "void(int16 data,int8 data_width)" `496 
F N "crc_write" 1 1508 ""
V L "data" 1 1508 "int8" `500 
V L "data_width" 1 1508 "int8" `501 
F B "crc_write" 1 1508 "void(int8 data,int8 data_width)" `499 
F N "crc_read" 1 1509 ""
F B "crc_read" 1 1509 "int16()" `502  "Constants used in setup_crc() are:"
D G "CRC_LITTLE_ENDIAN" 1 1511 "128"
c L "crc_read" 1 1 5 "FUNCTION"
F N "setup_smt1" 1 1518 ""
V L "mode" 1 1518 "int32" `504 
F B "setup_smt1" 1 1518 "void(int32 mode)" `503 
F N "setup_smt1" 1 1519 ""
V L "mode" 1 1519 "int32" `506 
V L "period" 1 1519 "int32" `507 
F B "setup_smt1" 1 1519 "void(int32 mode,int32 period)" `505 
F N "smt1_status" 1 1520 ""
F B "smt1_status" 1 1520 "int8()" `508 
F N "smt1_start" 1 1521 ""
F B "smt1_start" 1 1521 "void()" `509 
F N "smt1_stop" 1 1522 ""
F B "smt1_stop" 1 1522 "void()" `510 
F N "smt1_update" 1 1523 ""
V L "which" 1 1523 "int8" `512 
F B "smt1_update" 1 1523 "void(int8 which)" `511 
F N "smt1_reset_timer" 1 1524 ""
F B "smt1_reset_timer" 1 1524 "void()" `513 
F N "smt1_read" 1 1525 ""
V L "which" 1 1525 "int8" `515 
F B "smt1_read" 1 1525 "int32(int8 which)" `514 
F N "smt1_write" 1 1526 ""
V L "which" 1 1526 "int8" `517 
V L "value" 1 1526 "int32" `518 
F B "smt1_write" 1 1526 "void(int8 which,int32 value)" `516  "Constants used in SETUP_SMTx() are:"
D G "SMT_ENABLED" 1 1528 "0x80"
D G "SMT_DISABLED" 1 1529 "0"
D G "SMT_TMR_NO_ROLLOVER" 1 1531 "0x20"
D G "SMT_TMR_ROLLSOVER" 1 1532 "0"
D G "SMT_WIN_ACTIVE_LOW" 1 1534 "0x10"
D G "SMT_WIN_ACTIVE_HIGH" 1 1535 "0"
D G "SMT_SIG_ACTIVE_LOW" 1 1537 "0x08"
D G "SMT_SIG_ACTIVE_HIGH" 1 1538 "0"
D G "SMT_TMR_INCREMENTS_ON_FE" 1 1540 "0x04"
D G "SMT_TMR_INCREMENTS_ON_RE" 1 1541 "0"
D G "SMT_DIV_BY_8" 1 1543 "0x03"
D G "SMT_DIV_BY_4" 1 1544 "0x02"
D G "SMT_DIV_BY_2" 1 1545 "0x01"
D G "SMT_DIV_BY_1" 1 1546 "0"
D G "SMT_REPEAT_DATA_ACQ_MODE" 1 1548 "0x4000"
D G "SMT_SINGLE_DATA_ACQ_MODE" 1 1549 "0"
D G "SMT_MODE_WINDOWED_COUNTER" 1 1551 "0x0A00"
D G "SMT_MODE_GATED_COUNTER" 1 1552 "0x0900"
D G "SMT_MODE_COUNTER" 1 1553 "0x0800"
D G "SMT_MODE_CAPTURE" 1 1554 "0x0700"
D G "SMT_MODE_TIME_OF_FLIGHT" 1 1555 "0x0600"
D G "SMT_MODE_GATED_WINDOWED_MEASURE" 1 1556 "0x0500"
D G "SMT_MODE_WINDOWED_MEASURE" 1 1557 "0x0400"
D G "SMT_MODE_HIGH_LOW_TIME_MEASUREMENT" 1 1558 "0x0300"
D G "SMT_MODE_PERIOD_DUTY_CYCLE_ACQ" 1 1559 "0x0200"
D G "SMT_MODE_GATED_TIMER" 1 1560 "0x0100"
D G "SMT_MODE_TIMER" 1 1561 "0"
D G "SMT_CLK_CLKR" 1 1563 "0x070000"
D G "SMT_CLK_SOSC" 1 1564 "0x060000"
D G "SMT_CLK_31250" 1 1565 "0x050000" "MFINTOSC/16"
D G "SMT_CLK_500000" 1 1566 "0x040000" "MFINTOSC"
D G "SMT_CLK_31000" 1 1567 "0x030000" "LFINTOSC"
D G "SMT_CLK_HFINTOSC" 1 1568 "0x020000"
D G "SMT_CLK_FOSC" 1 1569 "0x010000"
D G "SMT_CLK_FOSC_DIV_4" 1 1570 "0"
D G "SMT_WIN_INPUT_CLC4" 1 1572 "0x8A000000"
D G "SMT_WIN_INPUT_CLC3" 1 1573 "0x89000000"
D G "SMT_WIN_INPUT_CLC2" 1 1574 "0x88000000"
D G "SMT_WIN_INPUT_CLC1" 1 1575 "0x87000000"
D G "SMT_WIN_INPUT_ZCD1" 1 1576 "0x86000000"
D G "SMT_WIN_INPUT_COMP2" 1 1577 "0x85000000"
D G "SMT_WIN_INPUT_COMP1" 1 1578 "0x84000000"
D G "SMT_WIN_INPUT_NCO" 1 1579 "0x83000000"
D G "SMT_WIN_INPUT_PWM8" 1 1580 "0x80000000"
D G "SMT_WIN_INPUT_PWM7" 1 1581 "0x0F000000"
D G "SMT_WIN_INPUT_PWM6" 1 1582 "0x0E000000"
D G "SMT_WIN_INPUT_PWM5" 1 1583 "0x0D000000"
D G "SMT_WIN_INPUT_CCP4" 1 1584 "0x0C000000"
D G "SMT_WIN_INPUT_CCP3" 1 1585 "0x0B000000"
D G "SMT_WIN_INPUT_CCP2" 1 1586 "0x0A000000"
D G "SMT_WIN_INPUT_CCP1" 1 1587 "0x09000000"
D G "SMT_WIN_INPUT_TMR6" 1 1588 "0x08000000"
D G "SMT_WIN_INPUT_TMR4" 1 1589 "0x07000000"
D G "SMT_WIN_INPUT_TMR2" 1 1590 "0x06000000"
D G "SMT_WIN_INPUT_CLKR" 1 1591 "0x04000000"
D G "SMT_WIN_INPUT_SOSC" 1 1592 "0x03000000"
D G "SMT_WIN_INPUT_MFINTOSC_DIV_16" 1 1593 "0x02000000"
D G "SMT_WIN_INPUT_LFINTOSC" 1 1594 "0x01000000"
D G "SMT_WIN_INPUT_SMTWINx" 1 1595 "0"
D G "SMT_SIG_INPUT_CLC4" 1 1597 "0x10300000"
D G "SMT_SIG_INPUT_CLC3" 1 1598 "0x00300000"
D G "SMT_SIG_INPUT_CLC2" 1 1599 "0x70200000"
D G "SMT_SIG_INPUT_CLC1" 1 1600 "0x60200000"
D G "SMT_SIG_INPUT_ZCD1" 1 1601 "0x50200000"
D G "SMT_SIG_INPUT_COMP2" 1 1602 "0x40200000"
D G "SMT_SIG_INPUT_COMP1" 1 1603 "0x30200000"
D G "SMT_SIG_INPUT_NCO" 1 1604 "0x20200000"
D G "SMT_SIG_INPUT_PWM8" 1 1605 "0x70100000"
D G "SMT_SIG_INPUT_PWM7" 1 1606 "0x60100000"
D G "SMT_SIG_INPUT_PWM6" 1 1607 "0x50100000"
D G "SMT_SIG_INPUT_PWM5" 1 1608 "0x40100000"
D G "SMT_SIG_INPUT_CCP4" 1 1609 "0x30100000"
D G "SMT_SIG_INPUT_CCP3" 1 1610 "0x20100000"
D G "SMT_SIG_INPUT_CCP2" 1 1611 "0x10100000"
D G "SMT_SIG_INPUT_CCP1" 1 1612 "0x00100000"
D G "SMT_SIG_INPUT_TMR6" 1 1613 "0x70000000"
D G "SMT_SIG_INPUT_TMR5" 1 1614 "0x60000000"
D G "SMT_SIG_INPUT_TMR4" 1 1615 "0x50000000"
D G "SMT_SIG_INPUT_TMR3" 1 1616 "0x40000000"
D G "SMT_SIG_INPUT_TMR2" 1 1617 "0x30000000"
D G "SMT_SIG_INPUT_TMR1" 1 1618 "0x20000000"
D G "SMT_SIG_INPUT_TMR0" 1 1619 "0x10000000"
D G "SMT_SIG_INPUT_SMTSIGx" 1 1620 "0"
D G "SMT_START_NOW" 1 1622 "0x8000"
D G "SMT_CAPTURED_PERIOD_REG" 1 1625 "0"
D G "SMT_CAPTURED_PULSE_WIDTH_REG" 1 1626 "1"
D G "SMT_TMR_REG" 1 1628 "2"
D G "SMT_PERIOD_REG" 1 1629 "3"
D G "SMT_TIMER_IS_RUNNING" 1 1632 "0x04"
D G "SMT_WINDOW_IS_OPEN" 1 1633 "0x02"
D G "SMT_ACQ_IN_PROGRESS" 1 1634 "0x01"
c L "smt1_write" 1 1 3 "FUNCTION"
F N "setup_zcd" 1 1639 ""
V L "mode" 1 1639 "int8" `520 
F B "setup_zcd" 1 1639 "void(int8 mode)" `519 
F N "zcd_status" 1 1640 ""
F B "zcd_status" 1 1640 "int8()" `521  "Constants used in SETUP_ZCD() are:"
D G "ZCD_ENABLE" 1 1642 "0x80"
D G "ZCD_DISABLE" 1 1643 "0"
D G "ZCD_INVERTED" 1 1645 "0x10"
D G "ZCD_INT_L_TO_H" 1 1646 "0x02"
D G "ZCD_INT_H_TO_L" 1 1647 "0x01"
D G "ZCD_IS_SINKING" 1 1650 "0x20" "If ZCD_INVERTED is used the return"
D G "ZCD_IS_SOURCING" 1 1651 "0" "value will be reversed."
c L "zcd_status" 1 1 3 "FUNCTION"
F N "setup_dsm" 1 1656 ""
V L "enable" 1 1656 "int8" `523 
F B "setup_dsm" 1 1656 "void(int8 enable)" `522 
F N "setup_dsm" 1 1657 ""
V L "mode" 1 1657 "int16" `525 
V L "source" 1 1657 "int8" `526 
F B "setup_dsm" 1 1657 "void(int16 mode,int8 source)" `524 
F N "setup_dsm" 1 1658 ""
V L "mode" 1 1658 "int16" `528 
V L "source" 1 1658 "int8" `529 
V L "carrier" 1 1658 "int16" `530 
F B "setup_dsm" 1 1658 "void(int16 mode,int8 source,int16 carrier)" `527  "Constants used in SETUP_DSM() first parameter are:"
D G "DSM_ENABLED" 1 1660 "0x80"
D G "DSM_DISABLED" 1 1661 "0x00"
D G "DSM_OUTPUT_INVERTED" 1 1663 "0x10"
D G "DSM_SYNC_CARRIER_LOW" 1 1664 "0x0100"
D G "DSM_INVERT_CARRIER_LOW" 1 1665 "0x0200"
D G "DSM_SYNC_CARRIER_HIGH" 1 1666 "0x1000"
D G "DSM_INVERT_CARRIER_HIGH" 1 1667 "0x2000"
D G "DSM_SOURCE_MDSCR" 1 1669 "0x00"
D G "DSM_SOURCE_MANUAL" 1 1670 "0x01"
D G "DSM_SOURCE_CCP1" 1 1671 "0x02"
D G "DSM_SOURCE_CCP2" 1 1672 "0x03"
D G "DSM_SOURCE_CCP3" 1 1673 "0x04"
D G "DSM_SOURCE_CCP4" 1 1674 "0x05"
D G "DSM_SOURCE_PWM5" 1 1675 "0x06"
D G "DSM_SOURCE_PWM6" 1 1676 "0x07"
D G "DSM_SOURCE_PWM7" 1 1677 "0x08"
D G "DSM_SOURCE_PWM8" 1 1678 "0x09"
D G "DSM_SOURCE_NCO" 1 1679 "0x0C"
D G "DSM_SOURCE_C1OUT" 1 1680 "0x0D"
D G "DSM_SOURCE_C2OUT" 1 1681 "0x0E"
D G "DSM_SOURCE_CLC1" 1 1682 "0x0F"
D G "DSM_SOURCE_CLC2" 1 1683 "0x10"
D G "DSM_SOURCE_CLC3" 1 1684 "0x11"
D G "DSM_SOURCE_CLC4" 1 1685 "0x12"
D G "DSM_SOURCE_U1TX" 1 1686 "0x13"
D G "DSM_SOURCE_U2TX" 1 1687 "0x14"
D G "DSM_SOURCE_SDO1" 1 1688 "0x16"
D G "DSM_CARRIER_LOW_MDCARL" 1 1690 "0x0000"
D G "DSM_CARRIER_LOW_SYSTEM_CLOCK" 1 1691 "0x0001"
D G "DSM_CARRIER_LOW_HFINTOSC" 1 1692 "0x0002"
D G "DSM_CARRIER_LOW_CLKR" 1 1693 "0x0003"
D G "DSM_CARRIER_LOW_CCP1" 1 1694 "0x0004"
D G "DSM_CARRIER_LOW_CCP2" 1 1695 "0x0005"
D G "DSM_CARRIER_LOW_CCP3" 1 1696 "0x0006"
D G "DSM_CARRIER_LOW_CCP4" 1 1697 "0x0007"
D G "DSM_CARRIER_LOW_PWM5" 1 1698 "0x0008"
D G "DSM_CARRIER_LOW_PWM6" 1 1699 "0x0009"
D G "DSM_CARRIER_LOW_PWM7" 1 1700 "0x000A"
D G "DSM_CARRIER_LOW_PWM8" 1 1701 "0x000B"
D G "DSM_CARRIER_LOW_NCO" 1 1702 "0x000E"
D G "DSM_CARRIER_LOW_CLC1" 1 1703 "0x000F"
D G "DSM_CARRIER_LOW_CLC2" 1 1704 "0x0010"
D G "DSM_CARRIER_LOW_CLC3" 1 1705 "0x0011"
D G "DSM_CARRIER_LOW_CLC4" 1 1706 "0x0012"
D G "DSM_CARRIER_HIGH_MDCARH" 1 1707 "0x0000"
D G "DSM_CARRIER_HIGH_SYSTEM_CLOCK" 1 1708 "0x0100"
D G "DSM_CARRIER_HIGH_HFINTOSC" 1 1709 "0x0200"
D G "DSM_CARRIER_HIGH_CLKR" 1 1710 "0x0300"
D G "DSM_CARRIER_HIGH_CCP1" 1 1711 "0x0400"
D G "DSM_CARRIER_HIGH_CCP2" 1 1712 "0x0500"
D G "DSM_CARRIER_HIGH_CCP3" 1 1713 "0x0600"
D G "DSM_CARRIER_HIGH_CCP4" 1 1714 "0x0700"
D G "DSM_CARRIER_HIGH_PWM5" 1 1715 "0x0800"
D G "DSM_CARRIER_HIGH_PWM6" 1 1716 "0x0900"
D G "DSM_CARRIER_HIGH_PWM7" 1 1717 "0x0A00"
D G "DSM_CARRIER_HIGH_PWM8" 1 1718 "0x0B00"
D G "DSM_CARRIER_HIGH_NCO" 1 1719 "0x0E00"
D G "DSM_CARRIER_HIGH_CLC1" 1 1720 "0x0F00"
D G "DSM_CARRIER_HIGH_CLC2" 1 1721 "0x1000"
D G "DSM_CARRIER_HIGH_CLC3" 1 1722 "0x1100"
D G "DSM_CARRIER_HIGH_CLC4" 1 1723 "0x1200"
c L "setup_dsm" 1 1 2 "FUNCTION"
F N "setup_oscillator" 1 1731 ""
V L "mode" 1 1731 "int32" `534 
F B "setup_oscillator" 1 1731 "int16(int32 mode)" `533 
F N "setup_oscillator" 1 1732 ""
V L "mode" 1 1732 "int32" `536 
V L "tune" 1 1732 "sint8" `537 
F B "setup_oscillator" 1 1732 "int16(int32 mode,sint8 tune)" `535  "Constants used in setup_oscillator() are:"
D G "OSC_HFINTRC_1MHZ" 1 1735 "0x00000060"
D G "OSC_HFINTRC_2MHZ" 1 1736 "0x00000160"
D G "OSC_HFINTRC_4MHZ" 1 1737 "0x00000260"
D G "OSC_HFINTRC_8MHZ" 1 1738 "0x00000360"
D G "OSC_HFINTRC_12MHZ" 1 1739 "0x00000460"
D G "OSC_HFINTRC_16MHZ" 1 1740 "0x00000560"
D G "OSC_HFINTRC_32MHZ" 1 1741 "0x00000660"
D G "OSC_HFINTRC_48MHZ" 1 1742 "0x00000760"
D G "OSC_HFINTRC_64MHZ" 1 1743 "0x00000860"
D G "OSC_EXTOSC_PLL" 1 1744 "0x00000020"
D G "OSC_SOSC" 1 1745 "0x00000040"
D G "OSC_LFINTRC" 1 1746 "0x00000050"
D G "OSC_EXTOSC" 1 1747 "0x00000070"
D G "OSC_CLK_DIV_BY_1" 1 1749 "0x00000000"
D G "OSC_CLK_DIV_BY_2" 1 1750 "0x00000001"
D G "OSC_CLK_DIV_BY_4" 1 1751 "0x00000002"
D G "OSC_CLK_DIV_BY_8" 1 1752 "0x00000003"
D G "OSC_CLK_DIV_BY_16" 1 1753 "0x00000004"
D G "OSC_CLK_DIV_BY_32" 1 1754 "0x00000005"
D G "OSC_CLK_DIV_BY_64" 1 1755 "0x00000006"
D G "OSC_CLK_DIV_BY_128" 1 1756 "0x00000007"
D G "OSC_CLK_DIV_BY_256" 1 1757 "0x00000008"
D G "OSC_CLK_DIV_BY_512" 1 1758 "0x00000009"
D G "OSC_SOSC_PWR_LOW" 1 1760 "0x00000000"
D G "OSC_SOSC_PWR_HIGH" 1 1761 "0x00400000"
D G "OSC_CLOCK_SWITCH_HOLD" 1 1763 "0x00800000"
D G "OSC_ADOSC_ENABLED" 1 1764 "0x04000000"
D G "OSC_SOSC_ENABLED" 1 1765 "0x08000000"
D G "OSC_LFINTRC_ENABLED" 1 1766 "0x10000000"
D G "OSC_MFINTRC_ENABLED" 1 1767 "0x20000000"
D G "OSC_HFINTRC_ENABLED" 1 1768 "0x40000000"
D G "OSC_EXTOSC_ENABLED" 1 1769 "0x80000000"
D G "OSC_PLL_READY" 1 1773 "0x0001"
D G "OSC_ADCRC_READY" 1 1774 "0x0004"
D G "OSC_SOSC_READY" 1 1775 "0x0008"
D G "OSC_LFINTRC_READY" 1 1776 "0x0010"
D G "OSC_MFINTRC_READY" 1 1777 "0x0020"
D G "OSC_HFINTRC_READY" 1 1778 "0x0040"
D G "OSC_EXTOSC_READY" 1 1779 "0x0080"
D G "OSC_CLOCK_SWITCH_IN_PROGRESS" 1 1780 "0x0800"
D G "OSC_CLOCK_SWITCH_COMPLETE" 1 1781 "0x1000"
c L "setup_oscillator" 1 1 4 "FUNCTION"
F N "setup_adc" 1 1788 ""
V L "mode" 1 1788 "int32" `539 
F B "setup_adc" 1 1788 "void(int32 mode)" `538 
F N "setup_adc" 1 1789 ""
V L "mode" 1 1789 "int32" `541 
V L "ADCRS" 1 1789 "int8" `542 
V L "ADRPT" 1 1789 "int8" `543 
F B "setup_adc" 1 1789 "void(int32 mode,int8 ADCRS,int8 ADRPT)" `540 
F N "set_adc_trigger" 1 1790 ""
V L "trigger" 1 1790 "int8" `545 
F B "set_adc_trigger" 1 1790 "void(int8 trigger)" `544 
F N "read_adc" 1 1791 ""
F B "read_adc" 1 1791 "int8()" `546 
F N "read_adc" 1 1792 ""
V L "mode" 1 1792 "int8" `548 
F B "read_adc" 1 1792 "int8(int8 mode)" `547 
F N "read_adc" 1 1793 ""
f G "read_adc" 1 1793 "int16()" `549 
F N "read_adc" 1 1794 ""
V L "mode" 1 1794 "int8" `550 
f G "read_adc" 1 1794 "int16(int8 mode)" `549 
F N "adc_done" 1 1795 ""
F B "adc_done" 1 1795 "int8(int8 mode)" `549 
F N "adc_read" 1 1796 ""
V L "which" 1 1796 "int8" `551 
F B "adc_read" 1 1796 "int8(int8 which)" `550 
F N "adc_read" 1 1797 ""
V L "which" 1 1797 "int8" `553 
f G "adc_read" 1 1797 "int16(int8 which)" `552 
F N "adc_write" 1 1798 ""
V L "which" 1 1798 "int8" `553 
V L "value" 1 1798 "int8" `554 
F B "adc_write" 1 1798 "void(int8 which,int8 value)" `552 
F N "adc_write" 1 1799 ""
V L "which" 1 1799 "int8" `556 
V L "value" 1 1799 "int16" `557 
F B "adc_write" 1 1799 "void(int8 which,int16 value)" `555 
F N "adc_status" 1 1800 ""
F B "adc_status" 1 1800 "int8()" `558  "Constants used for SETUP_ADC() first parameter are:"
D G "ADC_LEGACY_MODE" 1 1802 "0"
D G "ADC_ACCUMULATE_MODE" 1 1803 "0x00010000"
D G "ADC_AVERAGE_MODE" 1 1804 "0x00020000"
D G "ADC_BURST_AVERAGE_MODE" 1 1805 "0x00030000"
D G "ADC_LOW_PASS_FILTER_MODE" 1 1806 "0x00040000"
D G "ADC_OFF" 1 1807 "0x80000000"
D G "ADC_CLOCK_DIV_2" 1 1814 "0"
D G "ADC_CLOCK_DIV_4" 1 1815 "0x00000001"
D G "ADC_CLOCK_DIV_8" 1 1816 "0x00000003"
D G "ADC_CLOCK_DIV_16" 1 1817 "0x00000007"
D G "ADC_CLOCK_DIV_32" 1 1818 "0x0000000F"
D G "ADC_CLOCK_DIV_64" 1 1819 "0x0000001F"
D G "ADC_CLOCK_DIV_128" 1 1820 "0x0000003F"
D G "ADC_CLOCK_INTERNAL" 1 1821 "0x00000080"
D G "ADC_TAD_MUL_0" 1 1828 "0x0000FF00"
D G "ADC_TAD_MUL_2" 1 1829 "0x0000FD00"
D G "ADC_TAD_MUL_4" 1 1830 "0x0000FB00"
D G "ADC_TAD_MUL_8" 1 1831 "0x0000F700"
D G "ADC_TAD_MUL_16" 1 1832 "0x0000EF00"
D G "ADC_TAD_MUL_32" 1 1833 "0x0000DF00"
D G "ADC_TAD_MUL_64" 1 1834 "0x0000BF00"
D G "ADC_TAD_MUL_128" 1 1835 "0x00007F00"
D G "ADC_TAD_MUL_255" 1 1836 "0"
D G "ADC_ADFLTR_TO_ADPREV_AT_START" 1 1838 "0"
D G "ADC_ADRES_TO_ADPREV_AT_START" 1 1839 "0x00800000"
D G "ADC_THRESHOLD_INT_DISABLED" 1 1841 "0"
D G "ADC_THRESHOLD_INT_ADERR_LT_ADLTH" 1 1842 "0x01000000"
D G "ADC_THRESHOLD_INT_ADERR_GTE_ADLTH" 1 1843 "0x02000000"
D G "ADC_THRESHOLD_INT_ADERR_GT_ADLTH_AND_LT_ADUTH" 1 1844 "0x03000000"
D G "ADC_THRESHOLD_INT_ADERR_LT_ATLTH_OR_GT_ADUTH" 1 1845 "0x04000000"
D G "ADC_THRESHOLD_INT_ADERR_LTE_ADUTH" 1 1846 "0x05000000"
D G "ADC_THRESHOLD_INT_ADERR_GT_ADUTH" 1 1847 "0x06000000"
D G "ADC_THRESHOLD_INT_END_OF_CALCULATION" 1 1848 "0x07000000"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADPREV" 1 1850 "0"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADSTPT" 1 1851 "0x10000000"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADFLTR" 1 1852 "0x20000000"
D G "ADC_ERR_CALC_MODE_ADPREV_MINUS_ADFLTR" 1 1853 "0x40000000"
D G "ADC_ERR_CALC_MODE_ADFLTR_MINUS_ADSTPT" 1 1854 "0x50000000"
D G "ADC_CONTINUOUS_OPERATION_ENABLED" 1 1856 "0x00000040"
D G "ADC_STOP_WHEN_THRESHOLD_CONDITIONS_MET" 1 1857 "0x08000000" "If Continuous Operation is enabled"
D G "ADC_RESULT" 1 1872 "0"
D G "ADC_PREV_RESULT" 1 1873 "1"
D G "ADC_ACCUMULATOR" 1 1874 "2"
D G "ADC_FILTER" 1 1875 "3"
D G "ADC_ERROR" 1 1876 "4"
D G "ADC_COUNT" 1 1877 "5"
D G "ADC_REPEAT" 1 1878 "6"
D G "ADC_SET_POINT" 1 1879 "7"
D G "ADC_LOWER_THRESHOLD" 1 1880 "8"
D G "ADC_UPPER_THRESHOLD" 1 1881 "9"
D G "ADC_TRIGGER_DISABLED" 1 1884 "0" "External trigger disabled, use read_adc() to start conversion"
D G "ADC_TRIGGER_ADACT_PIN" 1 1885 "0x01"
D G "ADC_TRIGGER_TIMER0" 1 1886 "0x02"
D G "ADC_TRIGGER_TIMER1" 1 1887 "0x03"
D G "ADC_TRIGGER_TIMER2" 1 1888 "0x04"
D G "ADC_TRIGGER_TIMER3" 1 1889 "0x05"
D G "ADC_TRIGGER_TIMER4" 1 1890 "0x06"
D G "ADC_TRIGGER_TIMER5" 1 1891 "0x07"
D G "ADC_TRIGGER_TIMER6" 1 1892 "0x08"
D G "ADC_TRIGGER_SMT1" 1 1893 "0x09"
D G "ADC_TRIGGER_CCP1" 1 1894 "0x0A"
D G "ADC_TRIGGER_CCP2" 1 1895 "0x0B"
D G "ADC_TRIGGER_CCP3" 1 1896 "0x0C"
D G "ADC_TRIGGER_CCP4" 1 1897 "0x0D"
D G "ADC_TRIGGER_PWM5" 1 1898 "0x0E"
D G "ADC_TRIGGER_PWM6" 1 1899 "0x0F"
D G "ADC_TRIGGER_PWM7" 1 1900 "0x10"
D G "ADC_TRIGGER_PWM8" 1 1901 "0x11"
D G "ADC_TRIGGER_NCO" 1 1902 "0x12"
D G "ADC_TRIGGER_COMP1" 1 1903 "0x13"
D G "ADC_TRIGGER_COMP2" 1 1904 "0x14"
D G "ADC_TRIGGER_IOC" 1 1905 "0x15"
D G "ADC_TRIGGER_CLC1" 1 1906 "0x16"
D G "ADC_TRIGGER_CLC2" 1 1907 "0x17"
D G "ADC_TRIGGER_CLC3" 1 1908 "0x18"
D G "ADC_TRIGGER_CLC4" 1 1909 "0x19"
D G "ADC_TRIGGER_ADERR" 1 1910 "0x1A" "Read of ADERR register"
D G "ADC_TRIGGER_ADRESH" 1 1911 "0x1B" "Read of ADRESH register"
D G "ADC_TRIGGER_ADPCH" 1 1912 "0x1D" "Read of ADPCH register"
D G "ADC_OVERFLOWED" 1 1915 "0x80"
D G "ADC_GT_UPPER_THRESHOLD" 1 1916 "0x40"
D G "ADC_LT_LOWER_THRESHOLD" 1 1917 "0x20"
D G "ADC_UPDATING" 1 1918 "0x10"
c L "adc_status" 1 1 3 "FUNCTION"
c L "adc_status" 1 1 1 "FUNCTION"
F N "setup_adc_ports" 1 1926 ""
V L "pins" 1 1926 "int32" `561 
F B "setup_adc_ports" 1 1926 "void(int32 pins)" `560 
F N "setup_adc_ports" 1 1927 ""
V L "pins" 1 1927 "int32" `563 
V L "p2_pins" 1 1927 "int32" `564 
F B "setup_adc_ports" 1 1927 "void(int32 pins,int32 p2_pins)" `562 
F N "setup_adc_ports" 1 1928 ""
V L "pins" 1 1928 "int32" `566 
V L "p2_pins" 1 1928 "int32" `567 
V L "reference" 1 1928 "int32" `568 
F B "setup_adc_ports" 1 1928 "void(int32 pins,int32 p2_pins,int32 reference)" `565 
F N "set_analog_pins" 1 1929 ""
V L "pin" 1 1929 "int8" `570 
F B "set_analog_pins" 1 1929 "void(int8 pin,*int8 _VA_LIST)" `569 
F N "setup_adc_reference" 1 1930 ""
V L "reference" 1 1930 "int32" `573 
F B "setup_adc_reference" 1 1930 "void(int32 reference)" `572 
F N "set_adc_channel" 1 1931 ""
V L "channel" 1 1931 "int8" `575 
F B "set_adc_channel" 1 1931 "void(int8 channel)" `574  "Constants used in SETUP_ADC_PORTS() are:"
D G "sAN0" 1 1935 "0x01000000" "| A0"
D G "sAN1" 1 1936 "0x02000000" "| A1"
D G "sAN2" 1 1937 "0x04000000" "| A2"
D G "sAN3" 1 1938 "0x08000000" "| A3"
D G "sAN4" 1 1939 "0x10000000" "| A4"
D G "sAN5" 1 1940 "0x20000000" "| A5"
D G "sAN6" 1 1941 "0x40000000" "| A6"
D G "sAN7" 1 1942 "0x80000000" "| A7"
D G "sAN8" 1 1943 "0x00010000" "| B0"
D G "sAN9" 1 1944 "0x00020000" "| B1"
D G "sAN10" 1 1945 "0x00040000" "| B2"
D G "sAN11" 1 1946 "0x00080000" "| B3"
D G "sAN12" 1 1947 "0x00100000" "| B4"
D G "sAN13" 1 1948 "0x00200000" "| B5"
D G "sAN14" 1 1949 "0x00400000" "| B6"
D G "sAN15" 1 1950 "0x00800000" "| B7"
D G "sAN16" 1 1951 "0x00000100" "| C0"
D G "sAN17" 1 1952 "0x00000200" "| C1"
D G "sAN18" 1 1953 "0x00000400" "| C2"
D G "sAN19" 1 1954 "0x00000800" "| C3"
D G "sAN20" 1 1955 "0x00001000" "| C4"
D G "sAN21" 1 1956 "0x00002000" "| C5"
D G "sAN22" 1 1957 "0x00004000" "| C6"
D G "sAN23" 1 1958 "0x00008000" "| C7"
D G "sAN24" 1 1959 "0x00000001" "| D0"
D G "sAN25" 1 1960 "0x00000002" "| D1"
D G "sAN26" 1 1961 "0x00000004" "| D2"
D G "sAN27" 1 1962 "0x00000008" "| D3"
D G "sAN28" 1 1963 "0x00000010" "| D4"
D G "sAN29" 1 1964 "0x00000020" "| D5"
D G "sAN30" 1 1965 "0x00000040" "| D6"
D G "sAN31" 1 1966 "0x00000080" "| D7"
D G "NO_ANALOGS" 1 1967 "0" "None"
D G "ALL_ANALOG" 1 1968 "0xFFFFFFFF" "A0 A1 A2 A3 A4 A5 A6 A7 B0 B1 B2 B3 B4 B5 B6 B7 C0 C1 C2 C3 C4 C5 C6 C7 D0 D1 D2 D3 D4 D5 D6 D7"
D G "sAN32" 1 1971 "0x00000100" "| E0"
D G "sAN33" 1 1972 "0x00000200" "| E1"
D G "sAN34" 1 1973 "0x00000400" "| E2"
D G "NO_ANALOGS_P2" 1 1974 "0" "None"
D G "ALL_ANALOG_P2" 1 1975 "0x00000700" "E0 E1 E2"
D G "VSS_VDD" 1 1978 "0x00000000" "| Range 0-Vdd"
D G "VSS_VREF" 1 1979 "0x00000002" "| Range 0-VrefH"
D G "VSS_FVR" 1 1980 "0x00000003" "| Range 0-Fixed Voltage Reference"
D G "VREF_VDD" 1 1981 "0x00000010" "| Range VrefL-Vdd"
D G "VREF_VREF" 1 1982 "0x00000012" "| Range VrefL-VrefH"
D G "VREF_FVR" 1 1983 "0x00000013" "| Range VrefL-Fixed Voltage Reference"
D G "AVSS_CHANNEL" 1 1987 "0x3B"
D G "TEMPERATURE_INDICATOR" 1 1988 "0x3C"
D G "DAC_CHANNEL" 1 1989 "0x3D"
D G "FVR1_CHANNEL" 1 1990 "0x3E"
D G "FVR2_CHANNEL" 1 1991 "0x3F"
D G "ADC_START_AND_READ" 1 1994 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 1995 "1"
D G "ADC_READ_ONLY" 1 1996 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
F N "abs" 1 2002 ""
V L "x" 1 2002 "sint8" `577 
F B "abs" 1 2002 "sint8(sint8 x)" `576 
F N "abs" 1 2003 ""
V L "x" 1 2003 "sint16" `579 
F B "abs" 1 2003 "sint16(sint16 x)" `578 
F N "abs" 1 2004 ""
V L "x" 1 2004 "sint32" `581 
F B "abs" 1 2004 "sint32(sint32 x)" `580 
F N "abs" 1 2005 ""
V L "x" 1 2005 "float" `583 
F B "abs" 1 2005 "float(float x)" `582 
F N "_mul" 1 2006 ""
V L "??65535" 1 2006 "int8" `585 
V L "??65535" 1 2006 "int8" `586 
F B "_mul" 1 2006 "int16(int8 ,int8 )" `584 
F N "_mul" 1 2007 ""
V L "??65535" 1 2007 "sint8" `588 
V L "??65535" 1 2007 "sint8" `589 
F B "_mul" 1 2007 "sint16(sint8 ,sint8 )" `587 
F N "_mul" 1 2008 ""
V L "??65535" 1 2008 "int16" `591 
V L "??65535" 1 2008 "int16" `592 
F B "_mul" 1 2008 "int32(int16 ,int16 )" `590 
F N "_mul" 1 2009 ""
V L "??65535" 1 2009 "sint16" `594 
V L "??65535" 1 2009 "sint16" `595 
F B "_mul" 1 2009 "sint32(sint16 ,sint16 )" `593  "Memory Manipulation Prototypes:"
F N "read_bank" 1 2012 ""
V L "bank" 1 2012 "int8" `597 
V L "offset" 1 2012 "int8" `598 
F B "read_bank" 1 2012 "int8(int8 bank,int8 offset)" `596 
F N "write_bank" 1 2013 ""
V L "bank" 1 2013 "int8" `600 
V L "offset" 1 2013 "int8" `601 
V L "value" 1 2013 "int8" `602 
F B "write_bank" 1 2013 "void(int8 bank,int8 offset,int8 value)" `599 
F N "strcpy" 1 2014 ""
V L "dest" 1 2014 "*int8" `604 
V L "src" 1 2014 "*int8" `605 
F B "strcpy" 1 2014 "void(*int8 dest,*int8 src)" `603 
F N "memset" 1 2015 ""
V L "destination" 1 2015 "*int8" `607 
V L "value" 1 2015 "int8" `608 
V L "num" 1 2015 "int16" `609 
F B "memset" 1 2015 "void(*int8 destination,int8 value,int16 num)" `606 
F N "memcpy" 1 2016 ""
V L "destination" 1 2016 "*int8" `611 
V L "source" 1 2016 "*int8" `612 
V L "num" 1 2016 "int16" `613 
F B "memcpy" 1 2016 "void(*int8 destination,*int8 source,int16 num)" `610  "String Prototypes:"
F N "toupper" 1 2019 ""
V L "cvalue" 1 2019 "int8" `615 
F B "toupper" 1 2019 "int8(int8 cvalue)" `614 
F N "tolower" 1 2020 ""
V L "cvalue" 1 2020 "int8" `617 
F B "tolower" 1 2020 "int8(int8 cvalue)" `616 
F N "sprintf" 1 2021 ""
V L "string" 1 2021 "*int8" `619 
V L "cstring" 1 2021 "*int8" `620 
F B "sprintf" 1 2021 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `618  "Data Manipulators Prototypes:"
F N "shift_left" 1 2024 ""
V L "address" 1 2024 "*int8" `623 
V L "bytes" 1 2024 "int8" `624 
V L "value" 1 2024 "int8" `625 
F B "shift_left" 1 2024 "int8(*int8 address,int8 bytes,int8 value)" `622 
F N "shift_right" 1 2025 ""
V L "address" 1 2025 "*int8" `627 
V L "bytes" 1 2025 "int8" `628 
V L "value" 1 2025 "int8" `629 
F B "shift_right" 1 2025 "int8(*int8 address,int8 bytes,int8 value)" `626 
F N "rotate_left" 1 2026 ""
V L "address" 1 2026 "*int8" `631 
V L "bytes" 1 2026 "int8" `632 
F B "rotate_left" 1 2026 "void(*int8 address,int8 bytes)" `630 
F N "rotate_right" 1 2027 ""
V L "address" 1 2027 "*int8" `634 
V L "bytes" 1 2027 "int8" `635 
F B "rotate_right" 1 2027 "void(*int8 address,int8 bytes)" `633 
F N "swap" 1 2028 ""
V L "value" 1 2028 "int8" `637 
F B "swap" 1 2028 "void(int8 value)" `636 
F N "make8" 1 2029 ""
V L "var" 1 2029 "int16" `639 
V L "offset" 1 2029 "int8" `640 
F B "make8" 1 2029 "int8(int16 var,int8 offset)" `638 
F N "make8" 1 2030 ""
V L "var" 1 2030 "int32" `642 
V L "offset" 1 2030 "int8" `643 
F B "make8" 1 2030 "int8(int32 var,int8 offset)" `641 
F N "make16" 1 2031 ""
V L "varhigh" 1 2031 "int8" `645 
V L "varlow" 1 2031 "int8" `646 
F B "make16" 1 2031 "int16(int8 varhigh,int8 varlow)" `644 
F N "make32" 1 2032 ""
V L "var1" 1 2032 "int16" `648 
F B "make32" 1 2032 "int32(int16 var1)" `647 
F N "make32" 1 2033 ""
V L "var1" 1 2033 "int16" `650 
V L "var2" 1 2033 "int16" `651 
F B "make32" 1 2033 "int32(int16 var1,int16 var2)" `649 
F N "make32" 1 2034 ""
V L "var1" 1 2034 "int16" `653 
V L "var2" 1 2034 "int8" `654 
F B "make32" 1 2034 "int32(int16 var1,int8 var2)" `652 
F N "make32" 1 2035 ""
V L "var1" 1 2035 "int16" `656 
V L "var2" 1 2035 "int8" `657 
V L "var3" 1 2035 "int8" `658 
F B "make32" 1 2035 "int32(int16 var1,int8 var2,int8 var3)" `655 
F N "make32" 1 2036 ""
V L "var1" 1 2036 "int8" `660 
F B "make32" 1 2036 "int32(int8 var1)" `659 
F N "make32" 1 2037 ""
V L "var1" 1 2037 "int8" `662 
V L "var2" 1 2037 "int8" `663 
F B "make32" 1 2037 "int32(int8 var1,int8 var2)" `661 
F N "make32" 1 2038 ""
V L "var1" 1 2038 "int8" `665 
V L "var2" 1 2038 "int8" `666 
V L "var3" 1 2038 "int8" `667 
F B "make32" 1 2038 "int32(int8 var1,int8 var2,int8 var3)" `664 
F N "make32" 1 2039 ""
V L "var1" 1 2039 "int8" `669 
V L "var2" 1 2039 "int8" `670 
V L "var3" 1 2039 "int8" `671 
V L "var4" 1 2039 "int8" `672 
F B "make32" 1 2039 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `668 
F N "make32" 1 2040 ""
V L "var1" 1 2040 "int8" `674 
V L "var2" 1 2040 "int16" `675 
F B "make32" 1 2040 "int32(int8 var1,int16 var2)" `673 
F N "make32" 1 2041 ""
V L "var1" 1 2041 "int8" `677 
V L "var2" 1 2041 "int16" `678 
V L "var3" 1 2041 "int8" `679 
F B "make32" 1 2041 "int32(int8 var1,int16 var2,int8 var3)" `676 
F N "make32" 1 2042 ""
V L "var1" 1 2042 "int8" `681 
V L "var2" 1 2042 "int8" `682 
V L "var3" 1 2042 "int16" `683 
F B "make32" 1 2042 "int32(int8 var1,int8 var2,int16 var3)" `680 
F N "bit_set" 1 2043 ""
V L "var" 1 2043 "int8" `685 
V L "bit" 1 2043 "int8" `686 
F B "bit_set" 1 2043 "void(int8 var,int8 bit)" `684 
F N "bit_set" 1 2044 ""
V L "var" 1 2044 "int16" `688 
V L "bit" 1 2044 "int8" `689 
F B "bit_set" 1 2044 "void(int16 var,int8 bit)" `687 
F N "bit_set" 1 2045 ""
V L "var" 1 2045 "int32" `691 
V L "bit" 1 2045 "int8" `692 
F B "bit_set" 1 2045 "void(int32 var,int8 bit)" `690 
F N "bit_clear" 1 2046 ""
V L "var" 1 2046 "int8" `694 
V L "bit" 1 2046 "int8" `695 
F B "bit_clear" 1 2046 "void(int8 var,int8 bit)" `693 
F N "bit_clear" 1 2047 ""
V L "var" 1 2047 "int16" `697 
V L "bit" 1 2047 "int8" `698 
F B "bit_clear" 1 2047 "void(int16 var,int8 bit)" `696 
F N "bit_clear" 1 2048 ""
V L "var" 1 2048 "int32" `700 
V L "bit" 1 2048 "int8" `701 
F B "bit_clear" 1 2048 "void(int32 var,int8 bit)" `699 
F N "bit_test" 1 2049 ""
V L "var" 1 2049 "int8" `703 
V L "bit" 1 2049 "int8" `704 
F B "bit_test" 1 2049 "int8(int8 var,int8 bit)" `702 
F N "bit_test" 1 2050 ""
V L "var" 1 2050 "int16" `706 
V L "bit" 1 2050 "int8" `707 
F B "bit_test" 1 2050 "int8(int16 var,int8 bit)" `705 
F N "bit_test" 1 2051 ""
V L "var" 1 2051 "int32" `709 
V L "bit" 1 2051 "int8" `710 
F B "bit_test" 1 2051 "int8(int32 var,int8 bit)" `708  "#use delay() Prototypes:"
F N "delay_cycles" 1 2054 ""
V L "count" 1 2054 "int8" `712 
F B "delay_cycles" 1 2054 "void(int8 count)" `711 
F N "delay_ms" 1 2055 ""
V L "time" 1 2055 "int16" `714 
F B "delay_ms" 1 2055 "void(int16 time)" `713 
F N "delay_us" 1 2056 ""
V L "time" 1 2056 "int16" `716 
F B "delay_us" 1 2056 "void(int16 time)" `715  "#use rs232() Prototypes:"
F N "putchar" 1 2059 ""
V L "cdata" 1 2059 "int8" `718 
F B "putchar" 1 2059 "void(int8 cdata)" `717 
F N "putchar" 1 2060 ""
V L "cdata" 1 2060 "int8" `720 
V L "stream" 1 2060 "int8" `721 
F B "putchar" 1 2060 "void(int8 cdata,int8 stream)" `719 
F N "puts" 1 2061 ""
V L "string" 1 2061 "*int8" `723 
F B "puts" 1 2061 "void(*int8 string)" `722 
F N "puts" 1 2062 ""
V L "string" 1 2062 "*int8" `725 
V L "stream" 1 2062 "int8" `726 
F B "puts" 1 2062 "void(*int8 string,int8 stream)" `724 
F N "getch" 1 2063 ""
F B "getch" 1 2063 "int8()" `727 
F N "getch" 1 2064 ""
V L "stream" 1 2064 "int8" `729 
F B "getch" 1 2064 "int8(int8 stream)" `728 
F N "gets" 1 2065 ""
V L "string" 1 2065 "*int8" `731 
F B "gets" 1 2065 "void(*int8 string)" `730 
F N "gets" 1 2066 ""
V L "string" 1 2066 "*int8" `733 
V L "stream" 1 2066 "int8" `734 
F B "gets" 1 2066 "void(*int8 string,int8 stream)" `732 
F N "kbhit" 1 2067 ""
F B "kbhit" 1 2067 "int8()" `735 
F N "kbhit" 1 2068 ""
V L "stream" 1 2068 "int8" `737 
F B "kbhit" 1 2068 "int8(int8 stream)" `736 
F N "printf" 1 2069 ""
V L "string" 1 2069 "*int8" `739 
F B "printf" 1 2069 "void(*int8 string,*int8 _VA_LIST)" `738 
F N "fprintf" 1 2070 ""
V L "stream" 1 2070 "int8" `742 
V L "string" 1 2070 "*int8" `743 
F B "fprintf" 1 2070 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `741 
F N "putc_send" 1 2071 ""
F B "putc_send" 1 2071 "void()" `745 
F N "fputc_send" 1 2072 ""
V L "stream" 1 2072 "int8" `747 
F B "fputc_send" 1 2072 "void(int8 stream)" `746 
F N "rcv_buffer_full" 1 2073 ""
F B "rcv_buffer_full" 1 2073 "int8()" `748 
F N "rcv_buffer_full" 1 2074 ""
V L "stream" 1 2074 "int8" `750 
F B "rcv_buffer_full" 1 2074 "int8(int8 stream)" `749 
F N "rcv_buffer_bytes" 1 2075 ""
F B "rcv_buffer_bytes" 1 2075 "int16()" `751 
F N "rcv_buffer_bytes" 1 2076 ""
V L "stream" 1 2076 "int8" `753 
F B "rcv_buffer_bytes" 1 2076 "int16(int8 stream)" `752 
F N "tx_buffer_full" 1 2077 ""
F B "tx_buffer_full" 1 2077 "int8()" `754 
F N "tx_buffer_full" 1 2078 ""
V L "stream" 1 2078 "int8" `756 
F B "tx_buffer_full" 1 2078 "int8(int8 stream)" `755 
F N "tx_buffer_bytes" 1 2079 ""
F B "tx_buffer_bytes" 1 2079 "int16()" `757 
F N "tx_buffer_bytes" 1 2080 ""
V L "stream" 1 2080 "int8" `759 
F B "tx_buffer_bytes" 1 2080 "int16(int8 stream)" `758 
F N "linbus_header" 1 2081 ""
V L "identifier" 1 2081 "int8" `761 
F B "linbus_header" 1 2081 "int8(int8 identifier)" `760 
F N "linbus_header" 1 2082 ""
V L "stream" 1 2082 "int8" `763 
V L "identifier" 1 2082 "int8" `764 
F B "linbus_header" 1 2082 "int8(int8 stream,int8 identifier)" `762 
F N "linbus_header_hit" 1 2083 ""
F B "linbus_header_hit" 1 2083 "int8()" `765 
F N "linbus_header_hit" 1 2084 ""
V L "stream" 1 2084 "int8" `767 
F B "linbus_header_hit" 1 2084 "int8(int8 stream)" `766 
F N "linbus_header_get" 1 2085 ""
F B "linbus_header_get" 1 2085 "int8()" `768 
F N "linbus_header_get" 1 2086 ""
V L "stream" 1 2086 "int8" `770 
F B "linbus_header_get" 1 2086 "int8(int8 stream)" `769 
F N "linbus_rx_response" 1 2087 ""
V L "DataPtr" 1 2087 "*int8" `772 
V L "count" 1 2087 "int8" `773 
F B "linbus_rx_response" 1 2087 "int8(*int8 DataPtr,int8 count)" `771 
F N "linbus_rx_response" 1 2088 ""
V L "stream" 1 2088 "int8" `775 
V L "DataPtr" 1 2088 "*int8" `776 
V L "count" 1 2088 "int8" `777 
F B "linbus_rx_response" 1 2088 "int8(int8 stream,*int8 DataPtr,int8 count)" `774 
F N "linbus_tx_response" 1 2089 ""
V L "DataPtr" 1 2089 "*int8" `779 
V L "count" 1 2089 "int8" `780 
F B "linbus_tx_response" 1 2089 "void(*int8 DataPtr,int8 count)" `778 
F N "linbus_tx_response" 1 2090 ""
V L "stream" 1 2090 "int8" `782 
V L "DataPtr" 1 2090 "*int8" `783 
V L "count" 1 2090 "int8" `784 
F B "linbus_tx_response" 1 2090 "void(int8 stream,*int8 DataPtr,int8 count)" `781 
F N "linbus_checksum_type" 1 2091 ""
V L "type" 1 2091 "int8" `786 
F B "linbus_checksum_type" 1 2091 "void(int8 type)" `785 
F N "linbus_checksum_type" 1 2092 ""
V L "stream" 1 2092 "int8" `788 
V L "type" 1 2092 "int8" `789 
F B "linbus_checksum_type" 1 2092 "void(int8 stream,int8 type)" `787  "#use i2c() Prototypes:"
F N "i2c_read" 1 2095 ""
F B "i2c_read" 1 2095 "int8()" `790 
F N "i2c_read" 1 2096 ""
V L "ack" 1 2096 "int8" `792 
F B "i2c_read" 1 2096 "int8(int8 ack)" `791 
F N "i2c_read" 1 2097 ""
V L "stream" 1 2097 "int8" `794 
V L "ack" 1 2097 "int8" `795 
F B "i2c_read" 1 2097 "int8(int8 stream,int8 ack)" `793 
F N "i2c_write" 1 2098 ""
V L "data" 1 2098 "int8" `797 
F B "i2c_write" 1 2098 "int8(int8 data)" `796 
F N "i2c_write" 1 2099 ""
V L "stream" 1 2099 "int8" `799 
V L "data" 1 2099 "int8" `800 
F B "i2c_write" 1 2099 "int8(int8 stream,int8 data)" `798 
F N "i2c_start" 1 2100 ""
F B "i2c_start" 1 2100 "void()" `801 
F N "i2c_start" 1 2101 ""
V L "stream" 1 2101 "int8" `803 
F B "i2c_start" 1 2101 "void(int8 stream)" `802 
F N "i2c_start" 1 2102 ""
V L "stream" 1 2102 "int8" `805 
V L "restart" 1 2102 "int8" `806 
F B "i2c_start" 1 2102 "void(int8 stream,int8 restart)" `804 
F N "i2c_stop" 1 2103 ""
F B "i2c_stop" 1 2103 "void()" `807 
F N "i2c_stop" 1 2104 ""
V L "stream" 1 2104 "int8" `809 
F B "i2c_stop" 1 2104 "void(int8 stream)" `808 
F N "i2c_isr_state" 1 2105 ""
F B "i2c_isr_state" 1 2105 "int8()" `810 
F N "i2c_slaveaddr" 1 2106 ""
V L "addr" 1 2106 "int8" `812 
F B "i2c_slaveaddr" 1 2106 "void(int8 addr)" `811 
F N "i2c_slaveaddr" 1 2107 ""
V L "stream" 1 2107 "int8" `814 
V L "addr" 1 2107 "int8" `815 
F B "i2c_slaveaddr" 1 2107 "void(int8 stream,int8 addr)" `813 
F N "i2c_poll" 1 2108 ""
F B "i2c_poll" 1 2108 "int8()" `816 
F N "i2c_poll" 1 2109 ""
V L "stream" 1 2109 "int8" `818 
F B "i2c_poll" 1 2109 "int8(int8 stream)" `817 
F N "i2c_init" 1 2110 ""
V L "baud" 1 2110 "int32" `820 
F B "i2c_init" 1 2110 "void(int32 baud)" `819 
F N "i2c_init" 1 2111 ""
V L "stream" 1 2111 "int8" `822 
V L "baud" 1 2111 "int32" `823 
F B "i2c_init" 1 2111 "void(int8 stream,int32 baud)" `821 
F N "i2c_transfer" 1 2112 ""
V L "address" 1 2112 "int8" `825 
V L "wData" 1 2112 "*int8" `826 
V L "wCount" 1 2112 "int8" `827 
F B "i2c_transfer" 1 2112 "int8(int8 address,*int8 wData,int8 wCount)" `824 
F N "i2c_transfer" 1 2113 ""
V L "address" 1 2113 "int8" `829 
V L "wData" 1 2113 "*int8" `830 
V L "wCount" 1 2113 "int8" `831 
V L "rData" 1 2113 "*int8" `832 
V L "rCount" 1 2113 "*int8" `833 
F B "i2c_transfer" 1 2113 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `828 
F N "i2c_transfer" 1 2114 ""
V L "stream" 1 2114 "int8" `835 
V L "address" 1 2114 "int8" `836 
V L "wData" 1 2114 "*int8" `837 
V L "wCount" 1 2114 "int8" `838 
F B "i2c_transfer" 1 2114 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `834 
F N "i2c_transfer" 1 2115 ""
V L "stream" 1 2115 "int8" `840 
V L "address" 1 2115 "int8" `841 
V L "wData" 1 2115 "*int8" `842 
V L "wCount" 1 2115 "int8" `843 
V L "rData" 1 2115 "*int8" `844 
V L "rCount" 1 2115 "*int8" `845 
F B "i2c_transfer" 1 2115 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `839 
F N "i2c_transfer_out" 1 2116 ""
V L "address" 1 2116 "int8" `847 
V L "wData" 1 2116 "*int8" `848 
V L "wCount" 1 2116 "int8" `849 
F B "i2c_transfer_out" 1 2116 "int8(int8 address,*int8 wData,int8 wCount)" `846 
F N "i2c_transfer_out" 1 2117 ""
V L "stream" 1 2117 "int8" `851 
V L "address" 1 2117 "int8" `852 
V L "wData" 1 2117 "*int8" `853 
V L "wCount" 1 2117 "int8" `854 
F B "i2c_transfer_out" 1 2117 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `850 
F N "i2c_transfer_in" 1 2118 ""
V L "address" 1 2118 "int8" `856 
V L "rData" 1 2118 "*int8" `857 
V L "rCount" 1 2118 "int8" `858 
F B "i2c_transfer_in" 1 2118 "int8(int8 address,*int8 rData,int8 rCount)" `855 
F N "i2c_transfer_in" 1 2119 ""
V L "stream" 1 2119 "int8" `860 
V L "address" 1 2119 "int8" `861 
V L "rData" 1 2119 "*int8" `862 
V L "rCount" 1 2119 "int8" `863 
F B "i2c_transfer_in" 1 2119 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `859  "#use spi() Prototypes:"
F N "spi_xfer" 1 2122 ""
F B "spi_xfer" 1 2122 "int8()" `864 
F N "spi_xfer" 1 2123 ""
f G "spi_xfer" 1 2123 "int16()" `865 
F N "spi_xfer" 1 2124 ""
f G "spi_xfer" 1 2124 "int32()" `865 
F N "spi_xfer" 1 2125 ""
V L "data" 1 2125 "int8" `866 
F B "spi_xfer" 1 2125 "int8(int8 data)" `865 
F N "spi_xfer" 1 2126 ""
V L "data" 1 2126 "int16" `868 
F B "spi_xfer" 1 2126 "int16(int16 data)" `867 
F N "spi_xfer" 1 2127 ""
V L "data" 1 2127 "int32" `870 
F B "spi_xfer" 1 2127 "int32(int32 data)" `869 
F N "spi_xfer" 1 2128 ""
V L "stream" 1 2128 "int8" `872 
V L "data" 1 2128 "int8" `873 
F B "spi_xfer" 1 2128 "int8(int8 stream,int8 data)" `871 
F N "spi_xfer" 1 2129 ""
V L "stream" 1 2129 "int8" `875 
V L "data" 1 2129 "int16" `876 
F B "spi_xfer" 1 2129 "int16(int8 stream,int16 data)" `874 
F N "spi_xfer" 1 2130 ""
V L "stream" 1 2130 "int8" `878 
V L "data" 1 2130 "int32" `879 
F B "spi_xfer" 1 2130 "int32(int8 stream,int32 data)" `877 
F N "spi_xfer" 1 2131 ""
V L "stream" 1 2131 "int8" `881 
V L "data" 1 2131 "int8" `882 
V L "bits" 1 2131 "int8" `883 
F B "spi_xfer" 1 2131 "int8(int8 stream,int8 data,int8 bits)" `880 
F N "spi_xfer" 1 2132 ""
V L "stream" 1 2132 "int8" `885 
V L "data" 1 2132 "int16" `886 
V L "bits" 1 2132 "int8" `887 
F B "spi_xfer" 1 2132 "int16(int8 stream,int16 data,int8 bits)" `884 
F N "spi_xfer" 1 2133 ""
V L "stream" 1 2133 "int8" `889 
V L "data" 1 2133 "int32" `890 
V L "bits" 1 2133 "int8" `891 
F B "spi_xfer" 1 2133 "int32(int8 stream,int32 data,int8 bits)" `888 
F N "spi_init" 1 2134 ""
V L "baud" 1 2134 "int32" `893 
F B "spi_init" 1 2134 "void(int32 baud)" `892 
F N "spi_init" 1 2135 ""
V L "stream" 1 2135 "int8" `895 
V L "baud" 1 2135 "int32" `896 
F B "spi_init" 1 2135 "void(int8 stream,int32 baud)" `894 
F N "spi_speed" 1 2136 ""
V L "baud" 1 2136 "int32" `898 
F B "spi_speed" 1 2136 "void(int32 baud)" `897 
F N "spi_speed" 1 2137 ""
V L "stream" 1 2137 "int8" `900 
V L "baud" 1 2137 "int32" `901 
F B "spi_speed" 1 2137 "void(int8 stream,int32 baud)" `899 
F N "spi_speed" 1 2138 ""
V L "stream" 1 2138 "int8" `903 
V L "baud" 1 2138 "int32" `904 
V L "clock" 1 2138 "int32" `905 
F B "spi_speed" 1 2138 "void(int8 stream,int32 baud,int32 clock)" `902 
F N "spi_prewrite" 1 2139 ""
V L "data" 1 2139 "int8" `907 
F B "spi_prewrite" 1 2139 "void(int8 data)" `906 
F N "spi_prewrite" 1 2140 ""
V L "data" 1 2140 "int16" `909 
F B "spi_prewrite" 1 2140 "void(int16 data)" `908 
F N "spi_prewrite" 1 2141 ""
V L "data" 1 2141 "int32" `911 
F B "spi_prewrite" 1 2141 "void(int32 data)" `910 
F N "spi_prewrite" 1 2142 ""
V L "??65535" 1 2142 "int8" `913 
V L "data" 1 2142 "int8" `914 
F B "spi_prewrite" 1 2142 "void(int8 ,int8 data)" `912 
F N "spi_prewrite" 1 2143 ""
V L "??65535" 1 2143 "int8" `916 
V L "data" 1 2143 "int16" `917 
F B "spi_prewrite" 1 2143 "void(int8 ,int16 data)" `915 
F N "spi_prewrite" 1 2144 ""
V L "??65535" 1 2144 "int8" `919 
V L "data" 1 2144 "int32" `920 
F B "spi_prewrite" 1 2144 "void(int8 ,int32 data)" `918 
F N "spi_xfer_in" 1 2145 ""
F B "spi_xfer_in" 1 2145 "int8()" `921 
F N "spi_xfer_in" 1 2146 ""
f G "spi_xfer_in" 1 2146 "int16()" `922 
F N "spi_xfer_in" 1 2147 ""
f G "spi_xfer_in" 1 2147 "int32()" `922 
F N "spi_xfer_in" 1 2148 ""
V L "bits" 1 2148 "int8" `923 
F B "spi_xfer_in" 1 2148 "int8(int8 bits)" `922 
F N "spi_xfer_in" 1 2149 ""
V L "bits" 1 2149 "int8" `925 
f G "spi_xfer_in" 1 2149 "int16(int8 bits)" `924 
F N "spi_xfer_in" 1 2150 ""
V L "bits" 1 2150 "int8" `925 
f G "spi_xfer_in" 1 2150 "int32(int8 bits)" `924 
F N "spi_xfer_in" 1 2151 ""
V L "stream" 1 2151 "int8" `925 
V L "bits" 1 2151 "int8" `926 
F B "spi_xfer_in" 1 2151 "int8(int8 stream,int8 bits)" `924 
F N "spi_xfer_in" 1 2152 ""
V L "stream" 1 2152 "int8" `925 
V L "bits" 1 2152 "int8" `929 
f G "spi_xfer_in" 1 2152 "int16(int8 stream,int8 bits)" `927 
F N "spi_xfer_in" 1 2153 ""
V L "stream" 1 2153 "int8" `925 
V L "bits" 1 2153 "int8" `929 
f G "spi_xfer_in" 1 2153 "int32(int8 stream,int8 bits)" `927 
F N "spi_transfer" 1 2154 ""
V L "wData" 1 2154 "*int8" `928 
V L "rData" 1 2154 "*int8" `929 
V L "count" 1 2154 "int16" `930 
F B "spi_transfer" 1 2154 "void(*int8 wData,*int8 rData,int16 count)" `927 
F N "spi_transfer" 1 2155 ""
V L "stream" 1 2155 "int8" `932 
V L "wData" 1 2155 "*int8" `933 
V L "rData" 1 2155 "*int8" `934 
V L "count" 1 2155 "int16" `935 
F B "spi_transfer" 1 2155 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `931 
F N "spi_transfer_write" 1 2156 ""
V L "wData" 1 2156 "*int8" `937 
V L "count" 1 2156 "int16" `938 
F B "spi_transfer_write" 1 2156 "void(*int8 wData,int16 count)" `936 
F N "spi_transfer_write" 1 2157 ""
V L "stream" 1 2157 "int8" `940 
V L "wData" 1 2157 "*int8" `941 
V L "count" 1 2157 "int16" `942 
F B "spi_transfer_write" 1 2157 "void(int8 stream,*int8 wData,int16 count)" `939 
F N "spi_transfer_read" 1 2158 ""
V L "rData" 1 2158 "*int8" `944 
V L "count" 1 2158 "int16" `945 
F B "spi_transfer_read" 1 2158 "void(*int8 rData,int16 count)" `943 
F N "spi_transfer_read" 1 2159 ""
V L "stream" 1 2159 "int8" `947 
V L "rData" 1 2159 "*int8" `948 
V L "count" 1 2159 "int16" `949 
F B "spi_transfer_read" 1 2159 "void(int8 stream,*int8 rData,int16 count)" `946 
F N "spi_transfer_done" 1 2160 ""
F B "spi_transfer_done" 1 2160 "int8()" `950 
F N "spi_transfer_done" 1 2161 ""
V L "stream" 1 2161 "int8" `952 
F B "spi_transfer_done" 1 2161 "int8(int8 stream)" `951 
F N "spi_transfer_clear" 1 2162 ""
F B "spi_transfer_clear" 1 2162 "void()" `953 
F N "spi_transfer_clear" 1 2163 ""
V L "stream" 1 2163 "int8" `955 
F B "spi_transfer_clear" 1 2163 "void(int8 stream)" `954  "#use rtos() Prototypes:"
F N "rtos_run" 1 2166 ""
F B "rtos_run" 1 2166 "void()" `956 
F N "rtos_yield" 1 2167 ""
F B "rtos_yield" 1 2167 "void()" `957 
F N "rtos_enable" 1 2168 ""
V L "task" 1 2168 "int8" `959 
F B "rtos_enable" 1 2168 "void(int8 task)" `958 
F N "rtos_disable" 1 2169 ""
V L "task" 1 2169 "int8" `961 
F B "rtos_disable" 1 2169 "void(int8 task)" `960 
F N "rtos_terminate" 1 2170 ""
F B "rtos_terminate" 1 2170 "void()" `962 
F N "rtos_await" 1 2171 ""
V L "flag" 1 2171 "int8" `964 
F B "rtos_await" 1 2171 "void(int8 flag)" `963 
F N "rtos_wait" 1 2172 ""
V L "sem" 1 2172 "int8" `966 
F B "rtos_wait" 1 2172 "void(int8 sem)" `965 
F N "rtos_signal" 1 2173 ""
V L "sem" 1 2173 "int8" `968 
F B "rtos_signal" 1 2173 "void(int8 sem)" `967 
F N "rtos_msg_send" 1 2174 ""
V L "task" 1 2174 "int8" `970 
V L "msg" 1 2174 "int8" `971 
F B "rtos_msg_send" 1 2174 "void(int8 task,int8 msg)" `969 
F N "rtos_msg_read" 1 2175 ""
F B "rtos_msg_read" 1 2175 "int8()" `972 
F N "rtos_msg_poll" 1 2176 ""
F B "rtos_msg_poll" 1 2176 "int8()" `973 
F N "rtos_overrun" 1 2177 ""
V L "task" 1 2177 "int8" `975 
F B "rtos_overrun" 1 2177 "int8(int8 task)" `974 
F N "rtos_stats" 1 2178 ""
V L "task" 1 2178 "int8" `977 
V L "stat" 1 2178 "*int8" `978 
F B "rtos_stats" 1 2178 "void(int8 task,*int8 stat)" `976  "#use timer() Prototypes:"
F N "get_ticks" 1 2181 ""
F B "get_ticks" 1 2181 "int8()" `979 
F N "get_ticks" 1 2182 ""
f G "get_ticks" 1 2182 "int16()" `980 
F N "get_ticks" 1 2183 ""
f G "get_ticks" 1 2183 "int32()" `980 
F N "get_ticks" 1 2184 ""
V L "stream" 1 2184 "int8" `981 
F B "get_ticks" 1 2184 "int8(int8 stream)" `980 
F N "get_ticks" 1 2185 ""
V L "stream" 1 2185 "int8" `983 
f G "get_ticks" 1 2185 "int16(int8 stream)" `982 
F N "get_ticks" 1 2186 ""
V L "stream" 1 2186 "int8" `983 
f G "get_ticks" 1 2186 "int32(int8 stream)" `982 
F N "set_ticks" 1 2187 ""
V L "value" 1 2187 "int8" `983 
F B "set_ticks" 1 2187 "void(int8 value)" `982 
F N "set_ticks" 1 2188 ""
V L "value" 1 2188 "int16" `985 
F B "set_ticks" 1 2188 "void(int16 value)" `984 
F N "set_ticks" 1 2189 ""
V L "value" 1 2189 "int32" `987 
F B "set_ticks" 1 2189 "void(int32 value)" `986 
F N "set_ticks" 1 2190 ""
V L "stream" 1 2190 "int8" `989 
V L "value" 1 2190 "int8" `990 
F B "set_ticks" 1 2190 "void(int8 stream,int8 value)" `988 
F N "set_ticks" 1 2191 ""
V L "stream" 1 2191 "int8" `992 
V L "value" 1 2191 "int16" `993 
F B "set_ticks" 1 2191 "void(int8 stream,int16 value)" `991 
F N "set_ticks" 1 2192 ""
V L "stream" 1 2192 "int8" `995 
V L "value" 1 2192 "int32" `996 
F B "set_ticks" 1 2192 "void(int8 stream,int32 value)" `994  "#use pwm() Prototypes:"
F N "pwm_on" 1 2195 ""
F B "pwm_on" 1 2195 "void()" `997 
F N "pwm_on" 1 2196 ""
V L "stream" 1 2196 "int8" `999 
F B "pwm_on" 1 2196 "void(int8 stream)" `998 
F N "pwm_off" 1 2197 ""
F B "pwm_off" 1 2197 "void()" `1000 
F N "pwm_off" 1 2198 ""
V L "stream" 1 2198 "int8" `1002 
F B "pwm_off" 1 2198 "void(int8 stream)" `1001 
F N "pwm_set_duty" 1 2199 ""
V L "duty" 1 2199 "int16" `1004 
F B "pwm_set_duty" 1 2199 "void(int16 duty)" `1003 
F N "pwm_set_duty" 1 2200 ""
V L "stream" 1 2200 "int8" `1006 
V L "duty" 1 2200 "int16" `1007 
F B "pwm_set_duty" 1 2200 "void(int8 stream,int16 duty)" `1005 
F N "pwm_set_duty_percent" 1 2201 ""
V L "percent" 1 2201 "int16" `1009 
F B "pwm_set_duty_percent" 1 2201 "void(int16 percent)" `1008 
F N "pwm_set_duty_percent" 1 2202 ""
V L "stream" 1 2202 "int8" `1011 
V L "percent" 1 2202 "int16" `1012 
F B "pwm_set_duty_percent" 1 2202 "void(int8 stream,int16 percent)" `1010 
F N "pwm_set_frequency" 1 2203 ""
V L "frequency" 1 2203 "int32" `1014 
F B "pwm_set_frequency" 1 2203 "void(int32 frequency)" `1013 
F N "pwm_set_frequency" 1 2204 ""
V L "stream" 1 2204 "int8" `1016 
V L "frequency" 1 2204 "int32" `1017 
F B "pwm_set_frequency" 1 2204 "void(int8 stream,int32 frequency)" `1015 
F N "pwm_get_duty_period" 1 2205 ""
F B "pwm_get_duty_period" 1 2205 "int16()" `1018 
F N "pwm_get_duty_period" 1 2206 ""
V L "stream" 1 2206 "int8" `1020 
F B "pwm_get_duty_period" 1 2206 "int16(int8 stream)" `1019  "#use capture() Prototypes:"
F N "get_capture_time" 1 2209 ""
F B "get_capture_time" 1 2209 "int16()" `1021 
F N "get_capture_time" 1 2210 ""
V L "stream" 1 2210 "int8" `1023 
F B "get_capture_time" 1 2210 "int16(int8 stream)" `1022 
F N "get_capture_event" 1 2211 ""
F B "get_capture_event" 1 2211 "int8()" `1024 
F N "get_capture_event" 1 2212 ""
V L "stream" 1 2212 "int8" `1026 
F B "get_capture_event" 1 2212 "int8(int8 stream)" `1025  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
F N "goto_address" 1 2225 ""
V L "address" 1 2225 "int32" `1028 
F B "goto_address" 1 2225 "void(int32 address)" `1027 
F N "label_address" 1 2226 ""
V L "label" 1 2226 "int32" `1030 
F B "label_address" 1 2226 "int32(int32 label)" `1029  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 2229 ""
V L "address" 1 2229 "int32" `1032 
V L "DataPtr" 1 2229 "*int8" `1033 
V L "count" 1 2229 "int16" `1034 
F B "read_program_memory" 1 2229 "void(int32 address,*int8 DataPtr,int16 count)" `1031 
F N "read_program_eeprom" 1 2230 ""
V L "address" 1 2230 "int32" `1036 
F B "read_program_eeprom" 1 2230 "int16(int32 address)" `1035 
F N "read_device_info" 1 2231 ""
V L "DataPtr" 1 2231 "*int8" `1038 
V L "count" 1 2231 "int8" `1039 
F B "read_device_info" 1 2231 "void(*int8 DataPtr,int8 count)" `1037 
F N "read_device_info" 1 2232 ""
V L "offset" 1 2232 "int8" `1041 
V L "DataPtr" 1 2232 "*int8" `1042 
V L "count" 1 2232 "int8" `1043 
F B "read_device_info" 1 2232 "void(int8 offset,*int8 DataPtr,int8 count)" `1040 
F N "read_config_info" 1 2233 ""
V L "DataPtr" 1 2233 "*int8" `1045 
V L "count" 1 2233 "int8" `1046 
F B "read_config_info" 1 2233 "void(*int8 DataPtr,int8 count)" `1044 
F N "read_config_info" 1 2234 ""
V L "offset" 1 2234 "int8" `1048 
V L "DataPtr" 1 2234 "*int8" `1049 
V L "count" 1 2234 "int8" `1050 
F B "read_config_info" 1 2234 "void(int8 offset,*int8 DataPtr,int8 count)" `1047  "Constants used in read_device_info() offset parameter:"
D G "DINFO_MUI" 1 2236 "0"
D G "DINFO_EUI" 1 2237 "16"
D G "DINFO_TI_LOW_90C" 1 2238 "38"
D G "DINFO_TI_HIGH_90C" 1 2239 "44"
D G "DINFO_FVR1_1X" 1 2240 "48"
D G "DINFO_FVR1_2X" 1 2241 "50"
D G "DINFO_FVR1_4X" 1 2242 "52"
D G "DINFO_FVR2_1X" 1 2243 "54"
D G "DINFO_FVR2_2X" 1 2244 "56"
D G "DINFO_FVR2_4X" 1 2245 "58"
D G "DINFO_MUI_BYTES" 1 2247 "12"
D G "DINFO_EUI_BYTES" 1 2248 "20"
D G "DINFO_T1_LOW_GAIN_BYTES" 1 2249 "2"
D G "DINFO_T1_LOW_90C_BYTES" 1 2250 "2"
D G "DINFO_T1_LOW_OFFSET_BYTES" 1 2251 "2"
D G "DINFO_T1_HIGH_GAIN_BYTES" 1 2252 "2"
D G "DINFO_TI_HIGH_90C_BYTES" 1 2253 "2"
D G "DINFO_T1_HIGH_OFFSET_BYTES" 1 2254 "2"
D G "DINFO_FVR1_1X_BYTES" 1 2255 "2"
D G "DINFO_FVR1_2X_BYTES" 1 2256 "2"
D G "DINFO_FVR1_4X_BYTES" 1 2257 "2"
D G "DINFO_FVR2_1X_BYTES" 1 2258 "2"
D G "DINFO_FVR2_2X_BYTES" 1 2259 "2"
D G "DINFO_FVR2_4X_BYTES" 1 2260 "2"
D G "CINFO_ERASE_ROW_SIZE" 1 2263 "0"
D G "CINFO_WRITE_LATCHES" 1 2264 "2"
D G "CINFO_ROWS" 1 2265 "4"
D G "CINFO_EEPROM_SIZE" 1 2266 "6"
D G "CINFO_PIN_COUNT" 1 2267 "8"
D G "CINFO_ERASE_ROW_SIZE_BYTES" 1 2269 "2"
D G "CINFO_WRITE_LATCHES_BYTES" 1 2270 "2"
D G "CINFO_ROWS_BYTES" 1 2271 "2"
D G "CINFO_EEPROM_SIZE_BYTES" 1 2272 "2"
D G "CINFO_PIN_COUNT_BYTES" 1 2273 "2"
c L "read_config_info" 1 1 1 "FUNCTION"
F N "write_program_memory" 1 2276 ""
V L "address" 1 2276 "int32" `1052 
V L "DataPtr" 1 2276 "*int8" `1053 
V L "count" 1 2276 "int16" `1054 
F B "write_program_memory" 1 2276 "void(int32 address,*int8 DataPtr,int16 count)" `1051 
F N "write_program_eeprom" 1 2277 ""
V L "address" 1 2277 "int32" `1056 
V L "data" 1 2277 "int16" `1057 
F B "write_program_eeprom" 1 2277 "void(int32 address,int16 data)" `1055  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 2282 "unsigned int16"
F N "read_eeprom" 1 2287 ""
V L "address" 1 2287 "int16" `1059 
F B "read_eeprom" 1 2287 "int8(int16 address)" `1058 
F N "write_eeprom" 1 2288 ""
V L "address" 1 2288 "int16" `1061 
V L "value" 1 2288 "int8" `1062 
F B "write_eeprom" 1 2288 "void(int16 address,int8 value)" `1060  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
F N "enable_interrupts" 1 2295 ""
V L "interrupt" 1 2295 "int32" `1064 
F B "enable_interrupts" 1 2295 "void(int32 interrupt)" `1063 
F N "disable_interrupts" 1 2296 ""
V L "interrupt" 1 2296 "int32" `1066 
F B "disable_interrupts" 1 2296 "void(int32 interrupt)" `1065 
F N "clear_interrupt" 1 2297 ""
V L "interrupt" 1 2297 "int32" `1068 
F B "clear_interrupt" 1 2297 "void(int32 interrupt)" `1067 
F N "interrupt_active" 1 2298 ""
V L "interrupt" 1 2298 "int32" `1070 
F B "interrupt_active" 1 2298 "int8(int32 interrupt)" `1069 
F N "interrupt_enabled" 1 2299 ""
V L "interrupt" 1 2299 "int32" `1072 
F B "interrupt_enabled" 1 2299 "int8(int32 interrupt)" `1071 
F N "ext_int_edge" 1 2300 ""
V L "source" 1 2300 "int8" `1074 
V L "edge" 1 2300 "int8" `1075 
F B "ext_int_edge" 1 2300 "void(int8 source,int8 edge)" `1073 
F N "jump_to_isr" 1 2301 ""
V L "address" 1 2301 "int16" `1077 
F B "jump_to_isr" 1 2301 "void(int16 address)" `1076  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 2303 "0x40"
D G "H_TO_L" 1 2304 "0"
D G "GLOBAL" 1 2306 "0xF2C0"
D G "PERIPH" 1 2307 "0xF240"
D G "INT_IOC_A0" 1 2308 "0x30010080"
D G "INT_IOC_A0_L2H" 1 2309 "0x10010080"
D G "INT_IOC_A0_H2L" 1 2310 "0x20010080"
D G "INT_IOC_A1" 1 2311 "0x30020080"
D G "INT_IOC_A1_L2H" 1 2312 "0x10020080"
D G "INT_IOC_A1_H2L" 1 2313 "0x20020080"
D G "INT_IOC_A2" 1 2314 "0x30040080"
D G "INT_IOC_A2_L2H" 1 2315 "0x10040080"
D G "INT_IOC_A2_H2L" 1 2316 "0x20040080"
D G "INT_IOC_A3" 1 2317 "0x30080080"
D G "INT_IOC_A3_L2H" 1 2318 "0x10080080"
D G "INT_IOC_A3_H2L" 1 2319 "0x20080080"
D G "INT_IOC_A4" 1 2320 "0x30100080"
D G "INT_IOC_A4_L2H" 1 2321 "0x10100080"
D G "INT_IOC_A4_H2L" 1 2322 "0x20100080"
D G "INT_IOC_A5" 1 2323 "0x30200080"
D G "INT_IOC_A5_L2H" 1 2324 "0x10200080"
D G "INT_IOC_A5_H2L" 1 2325 "0x20200080"
D G "INT_IOC_A6" 1 2326 "0x30400080"
D G "INT_IOC_A6_L2H" 1 2327 "0x10400080"
D G "INT_IOC_A6_H2L" 1 2328 "0x20400080"
D G "INT_IOC_A7" 1 2329 "0x30800080"
D G "INT_IOC_A7_L2H" 1 2330 "0x10800080"
D G "INT_IOC_A7_H2L" 1 2331 "0x20800080"
D G "INT_IOC_B0" 1 2332 "0x31010080"
D G "INT_IOC_B0_L2H" 1 2333 "0x11010080"
D G "INT_IOC_B0_H2L" 1 2334 "0x21010080"
D G "INT_IOC_B1" 1 2335 "0x31020080"
D G "INT_IOC_B1_L2H" 1 2336 "0x11020080"
D G "INT_IOC_B1_H2L" 1 2337 "0x21020080"
D G "INT_IOC_B2" 1 2338 "0x31040080"
D G "INT_IOC_B2_L2H" 1 2339 "0x11040080"
D G "INT_IOC_B2_H2L" 1 2340 "0x21040080"
D G "INT_IOC_B3" 1 2341 "0x31080080"
D G "INT_IOC_B3_L2H" 1 2342 "0x11080080"
D G "INT_IOC_B3_H2L" 1 2343 "0x21080080"
D G "INT_IOC_B4" 1 2344 "0x31100080"
D G "INT_IOC_B4_L2H" 1 2345 "0x11100080"
D G "INT_IOC_B4_H2L" 1 2346 "0x21100080"
D G "INT_IOC_B5" 1 2347 "0x31200080"
D G "INT_IOC_B5_L2H" 1 2348 "0x11200080"
D G "INT_IOC_B5_H2L" 1 2349 "0x21200080"
D G "INT_IOC_B6" 1 2350 "0x31400080"
D G "INT_IOC_B6_L2H" 1 2351 "0x11400080"
D G "INT_IOC_B6_H2L" 1 2352 "0x21400080"
D G "INT_IOC_B7" 1 2353 "0x31800080"
D G "INT_IOC_B7_L2H" 1 2354 "0x11800080"
D G "INT_IOC_B7_H2L" 1 2355 "0x21800080"
D G "INT_IOC_C0" 1 2356 "0x32010080"
D G "INT_IOC_C0_L2H" 1 2357 "0x12010080"
D G "INT_IOC_C0_H2L" 1 2358 "0x22010080"
D G "INT_IOC_C1" 1 2359 "0x32020080"
D G "INT_IOC_C1_L2H" 1 2360 "0x12020080"
D G "INT_IOC_C1_H2L" 1 2361 "0x22020080"
D G "INT_IOC_C2" 1 2362 "0x32040080"
D G "INT_IOC_C2_L2H" 1 2363 "0x12040080"
D G "INT_IOC_C2_H2L" 1 2364 "0x22040080"
D G "INT_IOC_C3" 1 2365 "0x32080080"
D G "INT_IOC_C3_L2H" 1 2366 "0x12080080"
D G "INT_IOC_C3_H2L" 1 2367 "0x22080080"
D G "INT_IOC_C4" 1 2368 "0x32100080"
D G "INT_IOC_C4_L2H" 1 2369 "0x12100080"
D G "INT_IOC_C4_H2L" 1 2370 "0x22100080"
D G "INT_IOC_C5" 1 2371 "0x32200080"
D G "INT_IOC_C5_L2H" 1 2372 "0x12200080"
D G "INT_IOC_C5_H2L" 1 2373 "0x22200080"
D G "INT_IOC_C6" 1 2374 "0x32400080"
D G "INT_IOC_C6_L2H" 1 2375 "0x12400080"
D G "INT_IOC_C6_H2L" 1 2376 "0x22400080"
D G "INT_IOC_C7" 1 2377 "0x32800080"
D G "INT_IOC_C7_L2H" 1 2378 "0x12800080"
D G "INT_IOC_C7_H2L" 1 2379 "0x22800080"
D G "INT_IOC_E3" 1 2380 "0x34080080"
D G "INT_IOC_E3_L2H" 1 2381 "0x14080080"
D G "INT_IOC_E3_H2L" 1 2382 "0x24080080"
D G "INT_SOFTWARE" 1 2383 "0x000001"
D G "INT_HLVD" 1 2384 "0x000002"
D G "INT_OSF" 1 2385 "0x000004"
D G "INT_CSW" 1 2386 "0x000008"
D G "INT_NVM" 1 2387 "0x000010"
D G "INT_SCAN" 1 2388 "0x000020"
D G "INT_CRC" 1 2389 "0x000040"
D G "INT_IOC" 1 2390 "0x0FFF0080"
D G "INT_EXT_L2H" 1 2391 "0x50000101"
D G "INT_EXT_H2L" 1 2392 "0x60000101"
D G "INT_EXT" 1 2393 "0x000101"
D G "INT_ZCD" 1 2394 "0x000102"
D G "INT_ADC" 1 2395 "0x000104"
D G "INT_ADT" 1 2396 "0x000108"
D G "INT_COMP1" 1 2397 "0x000110"
D G "INT_SMT1" 1 2398 "0x000120"
D G "INT_SMT1PRA" 1 2399 "0x000140"
D G "INT_SMT1PWA" 1 2400 "0x000180"
D G "INT_DMA1SCNT" 1 2401 "0x000201"
D G "INT_DMA1DCNT" 1 2402 "0x000202"
D G "INT_DMA1OR" 1 2403 "0x000204"
D G "INT_DMA1A" 1 2404 "0x000208"
D G "INT_SPI1RX" 1 2405 "0x000210"
D G "INT_SPI1TX" 1 2406 "0x000220"
D G "INT_SPI1" 1 2407 "0x000240"
D G "INT_I2C1RX" 1 2408 "0x000280"
D G "INT_I2C1TX" 1 2409 "0x000301"
D G "INT_I2C1" 1 2410 "0x000302"
D G "INT_I2C1E" 1 2411 "0x000304"
D G "INT_RDA" 1 2412 "0x000308"
D G "INT_TBE" 1 2413 "0x000310"
D G "INT_U1E" 1 2414 "0x000320"
D G "INT_U1" 1 2415 "0x000340"
D G "INT_TIMER0" 1 2416 "0x000380"
D G "INT_TIMER1" 1 2417 "0x000401"
D G "INT_TIMER1G" 1 2418 "0x000402"
D G "INT_TIMER2" 1 2419 "0x000404"
D G "INT_CCP1" 1 2420 "0x000408"
D G "INT_NCO" 1 2421 "0x000420"
D G "INT_CWG1" 1 2422 "0x000440"
D G "INT_CLC1" 1 2423 "0x000480"
D G "INT_EXT1_L2H" 1 2424 "0x50010501"
D G "INT_EXT1_H2L" 1 2425 "0x60010501"
D G "INT_EXT1" 1 2426 "0x000501"
D G "INT_COMP2" 1 2427 "0x000502"
D G "INT_DMA2SCNT" 1 2428 "0x000504"
D G "INT_DMA2DCNT" 1 2429 "0x000508"
D G "INT_DMA2OR" 1 2430 "0x000510"
D G "INT_DMA2A" 1 2431 "0x000520"
D G "INT_I2C2RX" 1 2432 "0x000540"
D G "INT_I2C2TX" 1 2433 "0x000580"
D G "INT_I2C2" 1 2434 "0x000601"
D G "INT_I2C2E" 1 2435 "0x000602"
D G "INT_RDA2" 1 2436 "0x000604"
D G "INT_TBE2" 1 2437 "0x000608"
D G "INT_U2E" 1 2438 "0x000610"
D G "INT_U2" 1 2439 "0x000620"
D G "INT_TIMER3" 1 2440 "0x000640"
D G "INT_TIMER3G" 1 2441 "0x000680"
D G "INT_TIMER4" 1 2442 "0x000701"
D G "INT_CCP2" 1 2443 "0x000702"
D G "INT_CWG2" 1 2444 "0x000708"
D G "INT_CLC2" 1 2445 "0x000710"
D G "INT_EXT2_L2H" 1 2446 "0x50020720"
D G "INT_EXT2_H2L" 1 2447 "0x60020720"
D G "INT_EXT2" 1 2448 "0x000720"
D G "INT_TIMER5" 1 2449 "0x000840"
D G "INT_TIMER5G" 1 2450 "0x000880"
D G "INT_TIMER6" 1 2451 "0x000901"
D G "INT_CCP3" 1 2452 "0x000902"
D G "INT_CWG3" 1 2453 "0x000904"
D G "INT_CLC3" 1 2454 "0x000908"
D G "INT_CCP4" 1 2455 "0x000A01"
D G "INT_CLC4" 1 2456 "0x000A02"
D G "BUTTON1" 0 24 "PIN_B0"
D G "BUTTON2" 0 25 "PIN_B1"
D G "CHRGR_ON" 0 26 "PIN_A2" "DI,SET WHEN CHARGER ATTACHED"
D G "RST_BLE" 0 27 "PIN_B5"
D G "LED1" 0 28 "PIN_A6"
D G "ENB_VCC" 0 29 "PIN_A5"
D G "_STDLIB" 2 13 ""
D G "RAND_MAX" 2 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 26 "1"
T G "div_t" 2 34 "{sint8 quot,sint8 rem}" `1087 
T G "ldiv_t" 2 39 "{sint16 quot,sint16 rem}" `1091  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "unsigned char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 2 44 2 "FUNCTION"
C L "jump_to_isr" 2 47 1 "*"
C L "jump_to_isr" 2 47 1 "*"
F N "atoi" 2 51 ""
V L "s" 2 51 "*int8" `1093 
f G "atoi" 2 51 "sint8(*int8 s)" `1092  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 59 ""
V L "s" 2 59 "*int8" `1095 
f G "atoi32" 2 59 "sint32(*int8 s)" `1094  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 47 2 "FUNCTION"
F N "itoa" 2 80 ""
V L "num" 2 80 "sint32" `1097 
V L "base" 2 80 "int8" `1098 
V L "s" 2 80 "*int8" `1099 
f G "itoa" 2 80 "*int8(sint32 num,int8 base,*int8 s)" `1096  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 82 1 "*"
C L "itoa" 2 82 1 "*"
F N "atol" 2 86 ""
V L "s" 2 86 "*int8" `1101 
f G "atol" 2 86 "sint16(*int8 s)" `1100  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
F N "strtol" 2 94 ""
V L "s" 2 94 "*int8" `1103 
V L "endptr" 2 94 "*int8" `1104 
V L "base" 2 94 "sint8" `1105 
f G "strtol" 2 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `1102  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
F N "strtoul" 2 102 ""
V L "s" 2 102 "*int8" `1107 
V L "endptr" 2 102 "*int8" `1108 
V L "base" 2 102 "sint8" `1109 
f G "strtoul" 2 102 "int16(*int8 s,*int8 endptr,sint8 base)" `1106  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 96 2 "FUNCTION"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
F N "strtof" 2 111 ""
V L "s" 2 111 "*int8" `1111 
V L "endptr" 2 111 "??0 *" `1112 
f G "strtof" 2 111 "float(*int8 s,??0 * endptr)" `1110  "provided for compatibility"
D G "strtof48" 2 117 "(s,e) strtof(s, e)"
D G "strtod" 2 118 "(s,e) strtof(s, e)"
C L "strtof" 2 104 1 "FUNCTION"
C L "strtof" 2 121 1 "*"
D G "atof" 2 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 2 121 1 "FUNCTION"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
F N "atoe" 2 150 ""
V L "s" 2 150 "*int8" `1115 
f G "atoe" 2 150 "float(*int8 s)" `1114  "Pseudo-random sequence generation functions"
C L "atoe" 2 144 1 "FUNCTION"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
F N "rand" 2 170 ""
f G "rand" 2 170 "int16()" `1116  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
F N "srand" 2 192 ""
V L "seed" 2 192 "int32" `1118 
f G "srand" 2 192 "void(int32 seed)" `1117  "Memory management functions"
C L "srand" 2 172 3 "FUNCTION"
F N "system" 2 206 ""
V L "string" 2 206 "*int8" `1120 
f G "system" 2 206 "sint8(*int8 string)" `1119  "Searching and sorting utilities"
C L "system" 2 172 1 "FUNCTION"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 4 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
D G "labs" 2 250 "abs"
F N "div" 2 252 ""
V L "numer" 2 252 "sint8" `1122 
V L "denom" 2 252 "sint8" `1123 
f G "div" 2 252 "div_t(sint8 numer,sint8 denom)" `1121 
F N "ldiv" 2 253 ""
V L "numer" 2 253 "sint16" `1125 
V L "denom" 2 253 "sint16" `1126 
f G "ldiv" 2 253 "ldiv_t(sint16 numer,sint16 denom)" `1124  "Multibyte character functions"
C L "ldiv" 2 230 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `1128 
V L "s2" 4 34 "*void" `1129 
V L "n" 4 34 "int16" `1130 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int16 n)" `1127 
V L "sc1" 4 36 "*int8" `1131 
V L "sc2" 4 37 "*int8" `1132 
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `1134 
V L "s2" 4 61 "*int8" `1135 
V L "n" 4 61 "int16" `1136 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1133 
V L "s" 4 63 "*int8" `1137 
C L "strcat" 4 19 3 "FUNCTION"
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `1139 
V L "s2" 4 78 "*int8" `1140 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `1138 
V L "s" 4 80 "*int8" `1141 
C L "strncat" 4 19 2 "FUNCTION"
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `1143 
V L "s2" 4 96 "*int8" `1144 
V L "n" 4 96 "int16" `1145 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1142 
V L "s" 4 98 "*int8" `1146 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `1148 
V L "s2" 4 120 "*void" `1149 
V L "n" 4 120 "int16" `1150 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int16 n)" `1147 
V L "su1" 4 122 "*int8" `1151 
V L "su2" 4 122 "*int8" `1152 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `1154 
V L "s2" 4 134 "*int8" `1155 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `1153 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `1157 
V L "s2" 4 144 "*int8" `1158 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `1156 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `1160 
V L "s2" 4 157 "*int8" `1161 
V L "n" 4 157 "int16" `1162 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1159 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `1164 
V L "s2" 4 170 "*int8" `1165 
V L "n" 4 170 "int16" `1166 
F G "strxfrm" 4 171 "int16(*int8 s1,*int8 s2,int16 n)" `1163 
V L "c" 4 172 "int8" `1167 
V L "n1" 4 173 "int16" `1168 
C L "strxfrm" 4 19 1 "FUNCTION"
C L "memchr" 4 19 3 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `1170 
V L "c" 4 201 "int8" `1171 
V L "n" 4 201 "int16" `1172 
F G "memchr" 4 202 "*int8(*void s,int8 c,int16 n)" `1169 
V L "uc" 4 203 "int8" `1173 
V L "su" 4 204 "*int8" `1174 
C L "strchr" 4 19 2 "FUNCTION"
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `1176 
V L "c" 4 215 "int8" `1177 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `1175 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `1179 
V L "s2" 4 227 "*int8" `1180 
F G "strcspn" 4 228 "int16(*int8 s1,*int8 s2)" `1178 
V L "sc1" 4 229 "*int8" `1181 
V L "sc2" 4 229 "*int8" `1182 
C L "strpbrk" 4 19 4 "FUNCTION"
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `1184 
V L "s2" 4 242 "*int8" `1185 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `1183 
V L "sc1" 4 244 "*int8" `1186 
V L "sc2" 4 244 "*int8" `1187 
C L "strrchr" 4 19 2 "FUNCTION"
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `1189 
V L "c" 4 257 "int8" `1190 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `1188 
V L "p" 4 259 "*int8" `1191 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `1193 
V L "s2" 4 272 "*int8" `1194 
F G "strspn" 4 273 "int16(*int8 s1,*int8 s2)" `1192 
V L "sc1" 4 274 "*int8" `1195 
V L "sc2" 4 274 "*int8" `1196 
C L "strstr" 4 19 6 "FUNCTION"
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `1198 
V L "s2" 4 291 "*int8" `1199 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `1197 
V L "s" 4 293 "*int8" `1200 
V L "t" 4 293 "*int8" `1201 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `1203 
F G "strlen" 4 319 "int16(*int8 s)" `1202 
V L "sc" 4 320 "*int8" `1204 
C L "strtok" 4 19 13 "FUNCTION"
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `1206 
V L "s2" 4 341 "*int8" `1207 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `1205 
V L "beg" 4 343 "*int8" `1208 
V L "end" 4 343 "*int8" `1209 
V L "save" 4 344 "*int8" `1210 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `1212 
V L "s2" 4 392 "*int8" `1213 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `1211 
C L "strlwr" 4 19 3 "FUNCTION"
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `1217 
F G "strlwr" 4 407 "*int8(*int8 s)" `1216 
V L "p" 4 408 "*int8" `1218 
C L "strupr" 4 19 3 "FUNCTION"
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `1220 
F G "strupr" 4 421 "*int8(*int8 s)" `1219 
V L "p" 4 422 "*int8" `1221 
F N "div" 2 275 ""
V L "numer" 2 275 "sint8" `1122 
V L "denom" 2 275 "sint8" `1224 
F G "div" 2 276 "div_t(sint8 numer,sint8 denom)" `1121 
V L "val" 2 277 "div_t" `1222 
F N "ldiv" 2 283 ""
V L "numer" 2 283 "sint16" `1125 
V L "denom" 2 283 "sint16" `1231 
F G "ldiv" 2 284 "ldiv_t(sint16 numer,sint16 denom)" `1124 
V L "val" 2 285 "ldiv_t" `1229 
F N "atoe" 2 362 ""
V L "s" 2 362 "*int8" `1237 
F G "atoe" 2 363 "float(*int8 s)" `1114 
V L "pow10" 2 364 "float" `1236 
V L "result" 2 365 "float" `1237 
V L "sign" 2 366 "int8" `1238 
V L "expsign" 2 367 "int8" `1239 
V L "c" 2 368 "int8" `1240 
V L "ptr" 2 369 "int8" `1241 
V L "i" 2 370 "int8" `1242 
V L "exp" 2 371 "float" `1243 
V L "expcnt" 2 372 "int8" `1244 
C L "atoe" 2 398 1 "FUNCTION"
F N "atoi" 2 430 ""
V L "s" 2 430 "*int8" `1257 
F G "atoi" 2 431 "sint8(*int8 s)" `1092 
V L "result" 2 432 "sint8" `1256 
V L "sign" 2 433 "int8" `1257 
V L "base" 2 433 "int8" `1258 
V L "index" 2 433 "int8" `1259 
V L "c" 2 434 "int8" `1260 
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
F N "atol" 2 499 ""
V L "s" 2 499 "*int8" `1262 
F G "atol" 2 500 "sint16(*int8 s)" `1100 
V L "result" 2 501 "sint16" `1261 
V L "sign" 2 502 "int8" `1262 
V L "base" 2 502 "int8" `1263 
V L "index" 2 502 "int8" `1264 
V L "c" 2 503 "int8" `1265 
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "mult_with10" 2 398 1 "FUNCTION"
F N "mult_with10" 2 566 ""
V L "num" 2 566 "int32" `1267 
F G "mult_with10" 2 567 "sint32(int32 num)" `1266 
F N "atoi32" 2 572 ""
V L "s" 2 572 "*int8" `1269 
F G "atoi32" 2 573 "sint32(*int8 s)" `1094 
V L "result" 2 574 "sint32" `1268 
V L "sign" 2 575 "int8" `1269 
V L "base" 2 575 "int8" `1270 
V L "index" 2 575 "int8" `1271 
V L "c" 2 576 "int8" `1272 
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
F N "itoa" 2 771 ""
V L "num" 2 771 "sint32" `1097 
V L "base" 2 771 "int8" `1098 
V L "s" 2 771 "*int8" `1276 
F G "itoa" 2 772 "*int8(sint32 num,int8 base,*int8 s)" `1096 
V L "temp" 2 773 "int32" `1273 
V L "i" 2 774 "int8" `1274 
V L "sign" 2 774 "int8" `1275 
V L "cnt" 2 774 "int8" `1276 
V L "c" 2 775 "int8" `1277 
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
F N "strtof" 2 886 ""
V L "s" 2 886 "*int8" `1111 
V L "endptr" 2 886 "??0 *" `1286 
F G "strtof" 2 887 "float(*int8 s,??0 * endptr)" `1110 
V L "pow10" 2 888 "float" `1284 
V L "result" 2 889 "float" `1285 
V L "skip" 2 890 "int1" `1286 
V L "sign" 2 890 "int1" `1287 
V L "point" 2 890 "int1" `1288 
V L "c" 2 891 "int8" `1289 
V L "ptr" 2 892 "int8" `1290 
F N "strtoul" 2 1105 ""
V L "s" 2 1105 "*int8" `1107 
V L "endptr" 2 1105 "*int8" `1108 
V L "base" 2 1105 "sint8" `1295 
F G "strtoul" 2 1106 "int16(*int8 s,*int8 endptr,sint8 base)" `1106 
V L "sc" 2 1107 "*int8" `1292 
V L "s1" 2 1107 "*int8" `1293 
V L "sd" 2 1107 "*int8" `1294 
V L "x" 2 1108 "int16" `1295 
V L "sign" 2 1109 "int8" `1296 
V L "digits" 2 1110 "int8[1]" `1297 
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
F N "strtol" 2 1167 ""
V L "s" 2 1167 "*int8" `1103 
V L "endptr" 2 1167 "*int8" `1104 
V L "base" 2 1167 "sint8" `1302 
F G "strtol" 2 1168 "sint16(*int8 s,*int8 endptr,sint8 base)" `1102 
V L "sc" 2 1169 "*int8" `1299 
V L "s1" 2 1169 "*int8" `1300 
V L "sd" 2 1169 "*int8" `1301 
V L "x" 2 1170 "sint16" `1302 
V L "sign" 2 1171 "int8" `1303 
V L "digits" 2 1172 "int8[1]" `1304 
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
F N "system" 2 1231 ""
V L "string" 2 1231 "*int8" `1307 
F G "system" 2 1232 "sint8(*int8 string)" `1119 
F N "mblen" 2 1236 ""
V L "s" 2 1236 "*int8" `1307 
V L "n" 2 1236 "int16" `1308 
F G "mblen" 2 1237 "int16(*int8 s,int16 n)" `1306 
F N "mbtowc" 2 1241 ""
V L "pwc" 2 1241 "*int8" `1310 
V L "s" 2 1241 "*int8" `1311 
V L "n" 2 1241 "int16" `1312 
F G "mbtowc" 2 1242 "int8(*int8 pwc,*int8 s,int16 n)" `1309 
F N "wctomb" 2 1247 ""
V L "s" 2 1247 "*int8" `1314 
V L "wchar" 2 1247 "int8" `1315 
F G "wctomb" 2 1248 "int8(*int8 s,int8 wchar)" `1313 
F N "mbstowcs" 2 1253 ""
V L "pwcs" 2 1253 "*int8" `1317 
V L "s" 2 1253 "*int8" `1318 
V L "n" 2 1253 "int16" `1319 
F G "mbstowcs" 2 1254 "int16(*int8 pwcs,*int8 s,int16 n)" `1316 
F N "wcstombs" 2 1259 ""
V L "s" 2 1259 "*int8" `1321 
V L "pwcs" 2 1259 "*int8" `1322 
V L "n" 2 1259 "int16" `1323 
F G "wcstombs" 2 1260 "int16(*int8 s,*int8 pwcs,int16 n)" `1320 
V G "_Randseed" 2 1269 "int32" `1324 
F N "rand" 2 1271 ""
F G "rand" 2 1272 "int16()" `1116 
F N "srand" 2 1277 ""
V L "seed" 2 1277 "int32" `1329 
F G "srand" 2 1278 "void(int32 seed)" `1117 
F N "*_Cmpfun" 2 1287 ""
V L "p1" 2 1287 "*int8" `1329 
V L "p2" 2 1287 "*int8" `1330 
T G "*_Cmpfun" 2 1287 "sint8(*int8 p1,*int8 p2)" `1328 
F N "qsort" 2 1294 ""
V L "qdata" 2 1294 "*int8" `1333 
V L "qitems" 2 1294 "int8" `1334 
V L "qsize" 2 1294 "int8" `1335 
V L "cmp" 2 1294 "_Cmpfun" `1336 
F G "qsort" 2 1294 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1332 
V L "m" 2 1295 "int8" `1337 
V L "j" 2 1295 "int8" `1338 
V L "i" 2 1295 "int8" `1339 
V L "l" 2 1295 "int8" `1340 
V L "done" 2 1296 "int1" `1341 
V L "t" 2 1297 "int8[16]" `1342 
F N "bsearch" 2 1322 ""
V L "key" 2 1322 "*int8" `1345 
V L "base" 2 1322 "*int8" `1346 
V L "num" 2 1322 "int16" `1347 
V L "width" 2 1322 "int16" `1348 
V L "cmp" 2 1322 "_Cmpfun" `1349 
F G "bsearch" 2 1323 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1344 
V L "p" 2 1324 "*int8" `1350 
V L "q" 2 1324 "*int8" `1351 
V L "n" 2 1325 "int16" `1352 
V L "pivot" 2 1326 "int16" `1353 
V L "val" 2 1327 "sint8" `1354 
C L "bsearch" 2 398 1 "FUNCTION"
D G "_STDIO" 6 12 ""
D G "_STDINT" 7 19 ""
T G "int8_t" 7 23 "sint8" `1358 
T G "uint8_t" 7 24 "int8" `1359 
T G "int16_t" 7 25 "sint16" `1360 
T G "uint16_t" 7 26 "int16" `1361 
T G "int32_t" 7 27 "sint32" `1362 
T G "uint32_t" 7 28 "int32" `1363 
D G "INT8_MAX" 7 37 " (127)"
D G "INT8_MIN" 7 38 " (-128)"
D G "UINT8_MAX" 7 39 " (255)"
D G "INT16_MAX" 7 41 " (32767)"
D G "INT16_MIN" 7 42 " (-32768)"
D G "UINT16_MAX" 7 43 " (65535)"
D G "INT32_MAX" 7 45 " (2147483647)"
D G "INT32_MIN" 7 46 " (-2147483648)"
D G "UINT32_MAX" 7 47 " (4294967295)"
T G "int_least8_t" 7 61 "sint8" `1364 
T G "uint_least8_t" 7 62 "int8" `1365 
T G "int_least16_t" 7 63 "sint16" `1366 
T G "uint_least16_t" 7 64 "int16" `1367 
T G "int_least32_t" 7 65 "sint32" `1368 
T G "uint_least32_t" 7 66 "int32" `1369 
D G "INT_LEAST8_MAX" 7 75 " (127)"
D G "INT_LEAST8_MIN" 7 76 " (-128)"
D G "UINT_LEAST8_MAX" 7 77 " (255)"
D G "INT_LEAST16_MAX" 7 79 " (32767)"
D G "INT_LEAST16_MIN" 7 80 " (-32768)"
D G "UINT_LEAST16_MAX" 7 81 " (65535)"
D G "INT_LEAST32_MAX" 7 83 " (2147483647)"
D G "INT_LEAST32_MIN" 7 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 7 85 " (4294967295)"
T G "int_fast8_t" 7 112 "sint8" `1370 
T G "uint_fast8_t" 7 113 "int8" `1371 
D G "INT_FAST8_MAX" 7 114 " (127)"
D G "INT_FAST8_MIN" 7 115 " (-128)"
D G "UINT_FAST8_MAX" 7 116 " (255)"
T G "int_fast16_t" 7 117 "sint16" `1372 
T G "uint_fast16_t" 7 118 "int16" `1373 
T G "int_fast32_t" 7 121 "sint32" `1374 
T G "uint_fast32_t" 7 122 "int32" `1375 
D G "INT_FAST16_MAX" 7 124 " (32767)"
D G "INT_FAST16_MIN" 7 125 " (-32768)"
D G "UINT_FAST16_MAX" 7 126 " (65535)"
D G "INT_FAST32_MAX" 7 128 " (2147483647)"
D G "INT_FAST32_MIN" 7 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 7 130 " (4294967295)"
T G "uintptr_t" 7 148 "int16" `1376 
T G "intptr_t" 7 149 "sint16" `1377 
D G "INT8_C" 7 152 "(val) ((int8_t)val)"
D G "UINT8_C" 7 153 "(val) ((uint8_t)val)"
D G "INT16_C" 7 154 "(val) ((int16_t)val)"
D G "UINT16_C" 7 155 "(val) ((uint16_t)val)"
D G "INT32_C" 7 156 "(val) ((int32_t)val)"
D G "UINT32_C" 7 157 "(val) ((uint32_t)val)"
T G "intmax_t" 7 181 "sint32" `1378 
T G "uintmax_t" 7 182 "int32" `1379 
D G "INTMAXN_MAX" 7 184 " (2147483647)"
D G "INTMAXN_MIN" 7 185 " (-2147483648)"
D G "UINTMAXN_MAX" 7 186 " (4294967295)"
D G "INTMAX_C" 7 188 "(value) ((signed int32)val)"
D G "UINTMAX_C" 7 189 "(value) ((unsigned int32)val)"
D G "BT_MODEL_NAME" 0 36 ""BLE-Central""
D G "BT_REMOTE_NAME" 0 37 ""Halo""
C L "ble_start_scan" 8 2 2 "FUNCTION"
F N "ble_start_scan" 8 6 ""
f G "ble_start_scan" 8 6 "int8()" `1380 
F N "ble_connect" 8 7 ""
V L "entry" 8 7 "int8" `1382 
f G "ble_connect" 8 7 "int8(int8 entry)" `1381 
F N "ble_disconnect" 8 8 ""
f G "ble_disconnect" 8 8 "int8()" `1383 
F N "ble_find_handle" 8 10 ""
V L "characteristic" 8 10 "*int8" `1385 
V L "attrib" 8 10 "int8" `1386 
f G "ble_find_handle" 8 10 "int16(*int8 characteristic,int8 attrib)" `1384 
F N "ble_set_characteristic" 8 11 ""
V L "handle" 8 11 "int16" `1388 
V L "outgoing" 8 11 "*int8" `1389 
V L "result" 8 11 "*int8" `1390 
f G "ble_set_characteristic" 8 11 "int8(int16 handle,*int8 outgoing,*int8 result)" `1387 
F N "ble_get_status_resp" 8 13 ""
V L "buffer" 8 13 "*int8" `1392 
V L "time" 8 13 "int16" `1393 
f G "ble_get_status_resp" 8 13 "int8(*int8 buffer,int16=1 time)" `1391  "See the function documentation below for deatils on the function operation."
D G "BLE_SERVICES" 8 33 ""C0"" "Turn on device information"
D G "BLE_FEATURES" 8 34 ""1000"" "Ignore devices we can not connect to"
D G "BLE_LAST_DEVICE" 8 36 "0xFF" "Connect to last device we connected to"
C L "ble_get_status_resp" 8 2 1 "FUNCTION"
V G "ble_command_mode" 8 41 "int1" `1399 
V G "ble_scan_mode" 8 42 "int1" `1400 
D G "BLE_CMD_BUFFER_SIZE" 8 45 "128" "Can use 64 if the baud rate is reduced"
V G "ble_cmd_buffer" 8 47 "int8[128]" `1401  "Incomming data from the command stream"
V G "ble_cmd_next_in" 8 48 "int8" `1402 
V G "ble_cmd_next_out" 8 49 "int8" `1403 
V G "ble_overrun" 8 50 "int1" `1404 
D G "BLE_STATUS_READY" 8 53 "0xff"
D G "BLE_STATUS_READ" 8 54 "0xfe"
V G "ble_status" 8 55 "int8[64]" `1405  "Last status message"
V G "ble_status_ptr" 8 56 "int8" `1406 
V G "ble_entries" 8 59 "int8" `1407 
C L "ble_get_status_resp" 8 2 1 "FUNCTION"
C L "ble_get_status_resp" 8 2 1 "FUNCTION"
V G "ble_devices" 8 65 "{int8[16] name,int8[16] address,int8 rssi}[32]" `1412  "UTILITY functions used by the primary functions follow"
F N "toascii1" 8 74 ""
V L "c" 8 74 "int8" `1414 
F G "toascii1" 8 74 "int8(int8 c)" `1413 
F N "toascii" 8 81 ""
V L "p" 8 81 "*int8" `1416 
F G "toascii" 8 81 "int8(*int8 p)" `1415 
F N "hex2int1" 8 85 ""
V L "digit" 8 85 "int8" `1418 
F G "hex2int1" 8 85 "int8(int8 digit)" `1417 
F N "hex2int4" 8 92 ""
V L "d1" 8 92 "int8" `1420 
V L "d2" 8 92 "int8" `1421 
V L "d3" 8 92 "int8" `1422 
V L "d4" 8 92 "int8" `1423 
F G "hex2int4" 8 92 "int16(int8 d1,int8 d2,int8 d3,int8 d4)" `1419 
F N "ble_clear_status" 8 96 ""
F G "ble_clear_status" 8 96 "void()" `1424 
F N "ble_cmd_putc" 8 100 ""
V L "c" 8 100 "int8" `1426 
F G "ble_cmd_putc" 8 100 "void(int8 c)" `1425 
F N "ble_cmd_kbhit" 8 104 ""
F G "ble_cmd_kbhit" 8 104 "int8()" `1427 
F N "ble_cmd_getc" 8 108 ""
F G "ble_cmd_getc" 8 108 "int8()" `1428 
V L "c" 8 109 "int8" `1429 
F N "ble_cmd_tgetc" 8 116 ""
F G "ble_cmd_tgetc" 8 116 "int8()" `1430 
V L "to" 8 117 "int8" `1431 
V L "c" 8 118 "int8" `1432 
F N "ble_gets" 8 131 ""
V L "str" 8 131 "*int8" `1434 
V L "max" 8 131 "int8" `1435 
F G "ble_gets" 8 131 "void(*int8 str,int8 max)" `1433 
V L "n" 8 132 "int8" `1436 
V L "to" 8 132 "int8" `1437 
V L "c" 8 133 "int8" `1438 
F N "ble_clear_cmd_buffer" 8 155 ""
F G "ble_clear_cmd_buffer" 8 155 "void()" `1439 
F N "wait_for_prompt" 8 161 ""
F G "wait_for_prompt" 8 161 "int8()" `1440 
V L "c" 8 162 "int8" `1441 
V L "to" 8 163 "int16" `1442 
F N "ble_get_cmd_resp" 8 180 ""
V L "buffer" 8 180 "*int8" `1444 
V L "time" 8 180 "int16" `1445 
F G "ble_get_cmd_resp" 8 180 "void(*int8 buffer,int16=1 time)" `1443 
V L "c" 8 181 "int8" `1447 
V L "max" 8 182 "int8" `1448 
V L "to" 8 183 "int16" `1449 
F N "ble_enter_data_mode" 8 211 ""
F G "ble_enter_data_mode" 8 211 "void()" `1450 
F N "ble_enter_cmd_mode" 8 217 ""
F G "ble_enter_cmd_mode" 8 217 "int8()" `1456 
F N "strcmprom" 8 224 ""
V L "s1" 8 224 "*int8" `1460 
V L "s2" 8 224 "rom ??0 *" `1461 
F G "strcmprom" 8 225 "int8(*int8 s1,rom ??0 * s2)" `1459 
F N "ble_check_config" 8 232 ""
F G "ble_check_config" 8 232 "int8()" `1462 
V L "resp" 8 233 "int8[32]" `1463 
C L "ble_check_config" 8 2 1 "FUNCTION"
C L "ble_check_config" 8 2 1 "FUNCTION"
V G "scan_field" 8 264 "int8" `1468 
V G "scan_idx" 8 264 "int8" `1469 
F N "serial_isr" 8 267 ""
F G "serial_isr" 8 267 "void()" `1470 
V L "scan_field" 8 268 "int8" `1471 
V L "scan_idx" 8 268 "int8" `1472 
V L "c" 8 269 "int8" `1473 
V L "t" 8 270 "int8" `1474 
C L "serial_isr" 8 2 2 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
C L "serial_isr" 8 2 1 "FUNCTION"
F N "ble_set_scan_mode" 8 341 ""
V L "on" 8 341 "int8" `1477 
F G "ble_set_scan_mode" 8 341 "void(int8 on)" `1476 
C L "ble_get_status_resp" 8 2 8 "FUNCTION"
F N "ble_get_status_resp" 8 364 ""
V L "buffer" 8 364 "*int8" `1392 
V L "time" 8 364 "int16" `1393 
F G "ble_get_status_resp" 8 364 "int8(*int8 buffer,int16=1 time)" `1391 
V L "to" 8 365 "int16" `1478 
C L "ble_get_status_resp" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 8 "FUNCTION"
F N "ble_start_scan" 8 398 ""
F G "ble_start_scan" 8 398 "int8()" `1380 
V L "err" 8 399 "int1" `1479 
C L "ble_start_scan" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 1 "FUNCTION"
C L "ble_start_scan" 8 2 2 "FUNCTION"
C L "ble_rescan" 8 2 3 "FUNCTION"
F N "ble_rescan" 8 457 ""
F G "ble_rescan" 8 457 "int8()" `1490 
C L "ble_rescan" 8 2 2 "FUNCTION"
C L "ble_connect" 8 2 4 "FUNCTION"
F N "ble_connect" 8 482 ""
V L "entry" 8 482 "int8" `1494 
F G "ble_connect" 8 482 "int8(int8 entry)" `1381 
V L "resp" 8 483 "int8[64]" `1493 
C L "ble_connect" 8 2 1 "FUNCTION"
C L "ble_connect" 8 2 3 "FUNCTION"
C L "ble_connect" 8 2 1 "FUNCTION"
C L "ble_disconnect" 8 2 2 "FUNCTION"
F N "ble_disconnect" 8 515 ""
F G "ble_disconnect" 8 515 "int8()" `1383 
C L "ble_find_handle" 8 2 4 "FUNCTION"
F N "ble_find_handle" 8 532 ""
V L "characteristic" 8 532 "*int8" `1385 
V L "attrib" 8 532 "int8" `1503 
F G "ble_find_handle" 8 532 "int16(*int8 characteristic,int8 attrib)" `1384 
V L "rp" 8 533 "*int8" `1501 
V L "i" 8 534 "int8" `1502 
V L "line" 8 535 "int8[128]" `1503 
V L "attrib_txt" 8 536 "int8[3]" `1504 
V L "retries" 8 537 "int8" `1505 
C L "ble_set_characteristic" 8 2 5 "FUNCTION"
F N "ble_set_characteristic" 8 594 ""
V L "handle" 8 594 "int16" `1388 
V L "outgoing" 8 594 "*int8" `1389 
V L "result" 8 594 "*int8" `1515 
F G "ble_set_characteristic" 8 594 "int8(int16 handle,*int8 outgoing,*int8 result)" `1387 
V L "buffer" 8 595 "int8[64]" `1512 
V L "p" 8 596 "*int8" `1513 
V L "i" 8 597 "int8" `1514 
F N "ble_get_characteristic" 8 630 ""
V L "handle" 8 630 "int16" `1524 
V L "result" 8 630 "*int8" `1525 
F G "ble_get_characteristic" 8 630 "int8(int16 handle,*int8 result)" `1523 
V L "buffer" 8 631 "int8[64]" `1526 
V L "i" 8 632 "int8" `1527 
V L "retry" 8 632 "int8" `1528 
C L "ble_get_characteristic" 8 2 1 "FUNCTION"
F N "ble_start" 8 665 ""
F G "ble_start" 8 665 "int16()" `1530 
V L "last_entry" 8 666 "int8" `1531 
V L "handle" 8 667 "int16" `1532 
V L "connected" 8 668 "int1" `1533 
C L "ble_start" 8 2 1 "FUNCTION"
C L "ble_start" 8 2 3 "FUNCTION"
E G "BATT_I" 0 44 "0" `1540  "battery voltage"
E G "BATT_V" 0 45 "1" `1541  "charger voltage"
E G "CHARGER" 0 46 "2" `1542 
T G "ADC_ChannelType" 0 46 "" `1543 
E G "TMR1" 0 52 "0" `1545  "flag register bit set when 1 second has passed"
E G "SECOND" 0 53 "1" `1546  "flag register bit set when factory programmer attached"
E G "FACTORY" 0 54 "2" `1547  "set when charger is attached"
E G "CHGR_ON" 0 55 "3" `1548  "set when a button2 press detected"
E G "BUTTON_FLG" 0 57 "4" `1549 
T G "SystemFlagType" 0 57 "" `1550 
E G "INIT_CHARGE" 0 63 "0" `1552  "constant current"
E G "CC" 0 64 "1" `1553  "constant voltage"
E G "CV" 0 65 "2" `1554  "full charge"
E G "FULL" 0 66 "3" `1555 
T G "ChargeStageType" 0 66 "" `1556 
E G "POST" 0 72 "0" `1558 
E G "CHARGING" 0 73 "1" `1559  "treatment"
E G "TREAT" 0 74 "2" `1560  "poor electrode contact"
E G "POOR_CONTACT" 0 75 "3" `1561  "fault condition"
E G "FAULT" 0 76 "4" `1562 
T G "MachineStateType" 0 76 "" `1563 
E G "LEFT_FLG" 0 81 "0" `1565  "forehead, set when good"
E G "FORE_FLG" 0 82 "1" `1566  "right mastoid, set when good"
E G "RIGHT_FLG" 0 83 "2" `1567 
T G "ContactType" 0 83 "" `1568  "Battery charge constants C = 420 mAH"
V G "PWM_MAX" 0 86 "int16_t" `1569 
V G "PWM_MIN" 0 87 "int16_t" `1571 
V G "FULL_BATT" 0 88 "int16_t" `1573 
V G "END_AMPS" 0 89 "int16_t" `1575 
V G "CC_AMPS" 0 90 "uint16_t" `1577 
V G "MAX_TIME" 0 91 "uint32_t" `1579 
V G "CC_TIME" 0 92 "uint32_t" `1581 
V G "HEAD" 0 96 "uint8_t" `1583 
V G "HAND" 0 97 "uint8_t" `1585 
V G "on" 0 98 "uint8_t" `1587 
V G "OFF" 0 99 "uint8_t" `1589 
C G "" 0 101 2 "*Globals"
V G "g_Flags" 0 103 "uint8_t" `1591 
V G "g_Paired" 0 104 "uint8_t" `1592 
V G "g_BLE_Logo" 0 105 "uint8_t" `1593 
V G "g_Contact_Status" 0 106 "uint8_t" `1594 
V G "g_mode" 0 107 "uint8_t" `1595 
V G "g_TreatMinutes" 0 110 "uint16_t" `1596 
V G "g_TreatSeconds" 0 111 "uint16_t" `1597 
V G "g_Seconds" 0 112 "uint16_t" `1598 
V G "g_Batt_Volts" 0 114 "uint16_t" `1599 
V G "g_Batt_Amps" 0 115 "uint16_t" `1600 
V G "g_Head_Batt_Volts" 0 116 "uint16_t" `1601 
V G "g_NoActivity" 0 117 "uint16_t" `1602  "activity counter, turn off device if no activity"
V G "g_BLE_Activity" 0 118 "uint8_t" `1603 
V G "g_Head_Batt_Level" 0 120 "uint8_t" `1604 
V G "resp" 0 121 "int8[32]" `1605  "IO Map"
D G "RD" 9 3 "PIN_E0" "DO, DISPLAY READ ACTIVE LOW  p25"
D G "WR" 9 4 "PIN_E1" "DO, DISPLAY WRITE ACTIVE LOW  p26"
D G "CS" 9 5 "PIN_E2" "DO, DISPLAY SELECT ACTIVE LOW  p27"
D G "CHRGR_ON" 9 7 "PIN_A2" "DI,SET WHEN CHARGER ATTACHED"
D G "P2_0" 9 8 "PIN_A3" "D0, TEST = 0, APP = 1"
D G "BUTTON" 9 12 "PIN_B0" "DI, ACTIVE LOW BUTTON1 SENSE (On/Off)"
D G "DC" 9 14 "PIN_B2" "DO, 1=DATA, 0=COMMAND  p10"
D G "TXD" 9 15 "PIN_B3" "DO, DEBUG SERIAL OUT"
D G "RST" 9 16 "PIN_B4" "DO, 1= RESET DISPLAY"
V G "MIN_TENS" 9 19 "uint8_t" `1606 
V G "MIN_ONES" 9 20 "uint8_t" `1608 
V G "SEC_TENS" 9 21 "uint8_t" `1610 
V G "SEC_ONES" 9 22 "uint8_t" `1612 
V G "NUM_ZERO" 9 24 "uint8_t" `1614 
V G "NUM_ONE" 9 25 "uint8_t" `1616 
V G "NUM_TWO" 9 26 "uint8_t" `1618 
V G "NUM_THREE" 9 27 "uint8_t" `1620 
V G "NUM_FOUR" 9 28 "uint8_t" `1622 
V G "NUM_FIVE" 9 29 "uint8_t" `1624 
V G "NUM_SIX" 9 30 "uint8_t" `1626 
V G "NUM_SEVEN" 9 31 "uint8_t" `1628 
V G "NUM_EIGHT" 9 32 "uint8_t" `1630 
V G "NUM_NINE" 9 33 "uint8_t" `1632 
V G "POOR" 9 34 "uint8_t" `1634 
V G "GOOD" 9 35 "uint8_t" `1636 
V G "LEFT" 9 36 "uint8_t" `1638 
V G "RIGHT" 9 37 "uint8_t" `1640 
V G "DELAY1" 9 38 "uint8_t" `1642 
C L "Display_Setup" 9 9 2 "FUNCTION"
F N "Display_Setup" 9 41 ""
f G "Display_Setup" 9 41 "void()" `1644 
F N "Draw_Zero" 9 43 ""
f G "Draw_Zero" 9 43 "void()" `1645 
F N "Draw_One" 9 44 ""
f G "Draw_One" 9 44 "void()" `1646 
F N "Draw_Two" 9 45 ""
f G "Draw_Two" 9 45 "void()" `1647 
F N "Draw_Three" 9 46 ""
f G "Draw_Three" 9 46 "void()" `1648 
F N "Draw_Four" 9 47 ""
f G "Draw_Four" 9 47 "void()" `1649 
F N "Draw_Five" 9 48 ""
f G "Draw_Five" 9 48 "void()" `1650 
F N "Draw_Six" 9 49 ""
f G "Draw_Six" 9 49 "void()" `1651 
F N "Draw_Seven" 9 50 ""
f G "Draw_Seven" 9 50 "void()" `1652 
F N "Draw_Eight" 9 51 ""
f G "Draw_Eight" 9 51 "void()" `1653 
F N "Draw_Nine" 9 52 ""
f G "Draw_Nine" 9 52 "void()" `1654 
F N "Draw_BLE" 9 53 ""
f G "Draw_BLE" 9 53 "void()" `1655  "void Draw_Full_Battery(uint8_t BattID);"
C L "Draw_BLE" 9 9 2 "FUNCTION"
F N "Comm_Out" 9 60 ""
V L "c" 9 60 "uint8_t" `1657 
F G "Comm_Out" 9 61 "void(uint8_t c)" `1656 
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Comm_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 2 "FUNCTION"
F N "Data_Out" 9 77 ""
V L "c" 9 77 "uint8_t" `1659 
F G "Data_Out" 9 78 "void(uint8_t c)" `1658 
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_Out" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 2 "FUNCTION"
F N "Data_In" 9 93 ""
F G "Data_In" 9 94 "uint8_t()" `1660 
V L "c" 9 95 "uint8_t" `1661 
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Data_In" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
F N "Display_Setup" 9 114 ""
F G "Display_Setup" 9 115 "void()" `1644  "uint8_t const DELAY1 = 100; //100ms delay"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
C L "Display_Setup" 9 9 1 "FUNCTION"
F N "Set_Column_Address" 9 183 ""
V L "a" 9 183 "int8_t" `1665 
V L "b" 9 183 "int8_t" `1666 
V L "c" 9 183 "int8_t" `1667 
V L "d" 9 183 "int8_t" `1668 
F G "Set_Column_Address" 9 184 "void(int8_t a,int8_t b,int8_t c,int8_t d)" `1664 
F N "Set_Page_Address" 9 191 ""
V L "a" 9 191 "int8_t" `1670 
V L "b" 9 191 "int8_t" `1671 
V L "c" 9 191 "int8_t" `1672 
V L "d" 9 191 "int8_t" `1673 
F G "Set_Page_Address" 9 192 "void(int8_t a,int8_t b,int8_t c,int8_t d)" `1669 
C L "Display" 9 9 1 "FUNCTION"
F N "Display" 9 203 ""
F G "Display" 9 204 "void()" `1674 
V L "i" 9 205 "uint16_t" `1675 
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Display" 9 9 1 "FUNCTION"
C L "Write_Memory_Start" 9 9 1 "FUNCTION"
F N "Write_Memory_Start" 9 243 ""
F G "Write_Memory_Start" 9 244 "void()" `1676 
C L "Draw_Colon" 9 9 1 "FUNCTION"
F N "Draw_Colon" 9 252 ""
F G "Draw_Colon" 9 253 "void()" `1677 
V L "n" 9 254 "uint8_t" `1678 
V L "X_CENTER" 9 255 "uint8_t" `1679 
C L "Draw_Colon" 9 9 1 "FUNCTION"
V L "Y_CENTER" 9 256 "uint8_t" `1680 
C L "Draw_Colon" 9 9 1 "FUNCTION"
C L "Draw_Colon" 9 258 6 "*"
C L "Draw_Colon" 9 258 1 "*"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Colon" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
F N "Draw_Digit" 9 293 ""
V L "Location" 9 293 "uint8_t" `1682 
V L "value" 9 293 "uint8_t" `1683 
F G "Draw_Digit" 9 294 "void(uint8_t Location,uint8_t value)" `1681 
V L "x" 9 295 "uint8_t" `1684 
V L "y" 9 295 "uint8_t" `1685 
V L "X_CENTER" 9 297 "uint8_t" `1686 
C L "Draw_Digit" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 298 "uint8_t" `1688 
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Digit" 9 258 1 "FUNCTION"
C L "Draw_Circle" 9 258 1 "FUNCTION"
F N "Draw_Circle" 9 377 ""
F G "Draw_Circle" 9 378 "void()" `1692 
V L "n" 9 379 "int8_t" `1693 
V L "i" 9 379 "int8_t" `1694 
V L "x" 9 379 "int8_t" `1695 
V L "y" 9 379 "int8_t" `1696 
V L "X_CENTER" 9 380 "int8_t" `1697 
C L "Draw_Circle" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 381 "int8_t" `1699 
C L "Draw_Circle" 9 258 1 "FUNCTION"
V L "Circle1" 9 382 "int8_t[64][2]" `1701 
C L "Draw_Circle" 9 258 1 "FUNCTION"
C L "Draw_Circle" 9 258 1 "FUNCTION"
C L "Draw_Circle" 9 258 1 "FUNCTION"
C L "Draw_Circle" 9 258 3 "FUNCTION"
C L "Draw_Circle" 9 258 1 "FUNCTION"
C L "Draw_Zero" 9 258 1 "FUNCTION"
F N "Draw_Zero" 9 474 ""
F G "Draw_Zero" 9 475 "void()" `1645 
V L "n" 9 476 "uint16_t" `1703 
V L "Zero" 9 478 "uint8_t[375]" `1704 
C L "Draw_Zero" 9 258 1 "FUNCTION"
C L "Draw_One" 9 258 1 "FUNCTION"
F N "Draw_One" 9 527 ""
F G "Draw_One" 9 528 "void()" `1646 
V L "n" 9 529 "uint16_t" `1705 
V L "One" 9 530 "uint8_t[375]" `1706 
C L "Draw_One" 9 258 1 "FUNCTION"
C L "Draw_Two" 9 258 1 "FUNCTION"
F N "Draw_Two" 9 578 ""
F G "Draw_Two" 9 579 "void()" `1647 
V L "n" 9 580 "uint16_t" `1707 
V L "Two" 9 581 "uint8_t[375]" `1708 
C L "Draw_Two" 9 258 1 "FUNCTION"
C L "Draw_Three" 9 258 1 "FUNCTION"
F N "Draw_Three" 9 629 ""
F G "Draw_Three" 9 630 "void()" `1648 
V L "n" 9 631 "uint16_t" `1709 
V L "Three" 9 632 "uint8_t[375]" `1710 
C L "Draw_Three" 9 258 1 "FUNCTION"
C L "Draw_Four" 9 258 1 "FUNCTION"
F N "Draw_Four" 9 681 ""
F G "Draw_Four" 9 682 "void()" `1649 
V L "n" 9 683 "uint16_t" `1711 
V L "Four" 9 684 "uint8_t[375]" `1712 
C L "Draw_Four" 9 258 1 "FUNCTION"
C L "Draw_Five" 9 258 1 "FUNCTION"
F N "Draw_Five" 9 733 ""
F G "Draw_Five" 9 734 "void()" `1650 
V L "n" 9 735 "uint16_t" `1713 
V L "Five" 9 736 "uint8_t[375]" `1714 
C L "Draw_Five" 9 258 1 "FUNCTION"
C L "Draw_Six" 9 258 1 "FUNCTION"
F N "Draw_Six" 9 784 ""
F G "Draw_Six" 9 785 "void()" `1651 
V L "n" 9 786 "uint16_t" `1715 
V L "Six" 9 787 "uint8_t[375]" `1716 
C L "Draw_Six" 9 258 1 "FUNCTION"
C L "Draw_Seven" 9 258 1 "FUNCTION"
F N "Draw_Seven" 9 835 ""
F G "Draw_Seven" 9 836 "void()" `1652 
V L "n" 9 837 "uint16_t" `1717 
V L "Seven" 9 838 "uint8_t[375]" `1718 
C L "Draw_Seven" 9 258 1 "FUNCTION"
C L "Draw_Eight" 9 258 1 "FUNCTION"
F N "Draw_Eight" 9 886 ""
F G "Draw_Eight" 9 887 "void()" `1653 
V L "n" 9 888 "uint16_t" `1719 
V L "Eight" 9 889 "uint8_t[375]" `1720 
C L "Draw_Eight" 9 258 1 "FUNCTION"
C L "Draw_Nine" 9 258 1 "FUNCTION"
F N "Draw_Nine" 9 937 ""
F G "Draw_Nine" 9 938 "void()" `1654 
V L "n" 9 939 "uint16_t" `1721 
V L "Nine" 9 940 "uint8_t[375]" `1722 
C L "Draw_Nine" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
F N "Draw_BLE" 9 988 ""
F G "Draw_BLE" 9 989 "void()" `1655 
V L "n" 9 990 "uint16_t" `1723 
V L "x" 9 991 "uint8_t" `1724 
V L "y" 9 991 "uint8_t" `1725 
V L "X_CENTER" 9 993 "uint8_t" `1726 
C L "Draw_BLE" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 994 "uint8_t" `1728 
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
V L "BLE" 9 1003 "uint8_t[756]" `1730 
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_BLE" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
F N "Draw_Full_Battery" 9 1072 ""
V L "Batt_Id" 9 1072 "uint8_t" `1732 
F G "Draw_Full_Battery" 9 1073 "void(uint8_t Batt_Id)" `1731 
V L "n" 9 1074 "uint16_t" `1733 
V L "x" 9 1075 "uint8_t" `1734 
V L "y" 9 1075 "uint8_t" `1735 
V L "X_CENTER" 9 1077 "uint8_t" `1736 
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1078 "uint8_t" `1738 
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
V L "FULL_BATT" 9 1094 "uint8_t[319]" `1740 
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Full_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
F N "Draw_Three_Quart_Battery" 9 1142 ""
V L "Batt_Id" 9 1142 "uint8_t" `1742 
F G "Draw_Three_Quart_Battery" 9 1143 "void(uint8_t Batt_Id)" `1741 
V L "n" 9 1144 "uint16_t" `1743 
V L "x" 9 1145 "uint8_t" `1744 
V L "y" 9 1145 "uint8_t" `1745 
V L "X_CENTER" 9 1147 "uint8_t" `1746 
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1148 "uint8_t" `1748 
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
V L "Three_Quart_Batt" 9 1161 "uint8_t[319]" `1750 
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Three_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
F N "Draw_Half_Battery" 9 1208 ""
V L "Batt_Id" 9 1208 "uint8_t" `1752 
F G "Draw_Half_Battery" 9 1209 "void(uint8_t Batt_Id)" `1751 
V L "n" 9 1210 "uint16_t" `1753 
V L "x" 9 1211 "uint8_t" `1754 
V L "y" 9 1211 "uint8_t" `1755 
V L "X_CENTER" 9 1213 "uint8_t" `1756 
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1214 "uint8_t" `1758 
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
V L "Half_Batt" 9 1228 "uint8_t[319]" `1760 
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Half_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
F N "Draw_Quart_Battery" 9 1275 ""
V L "Batt_Id" 9 1275 "uint8_t" `1762 
F G "Draw_Quart_Battery" 9 1276 "void(uint8_t Batt_Id)" `1761 
V L "n" 9 1277 "uint16_t" `1763 
V L "x" 9 1278 "uint8_t" `1764 
V L "y" 9 1278 "uint8_t" `1765 
V L "X_CENTER" 9 1280 "uint8_t" `1766 
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1281 "uint8_t" `1768 
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
V L "Quart_Batt" 9 1295 "uint8_t[319]" `1770 
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Quart_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
F N "Draw_Empty_Battery" 9 1342 ""
V L "Batt_Id" 9 1342 "uint8_t" `1772 
F G "Draw_Empty_Battery" 9 1343 "void(uint8_t Batt_Id)" `1771 
V L "n" 9 1344 "uint16_t" `1773 
V L "x" 9 1345 "uint8_t" `1774 
V L "y" 9 1345 "uint8_t" `1775 
V L "X_CENTER" 9 1347 "uint8_t" `1776 
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1348 "uint8_t" `1778 
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
V L "Empty_Batt" 9 1362 "uint8_t[319]" `1780 
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Empty_Battery" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
F N "Draw_Alert" 9 1409 ""
V L "Display" 9 1409 "int8_t" `1782 
F G "Draw_Alert" 9 1410 "void(int8_t Display)" `1781 
V L "n" 9 1411 "uint16_t" `1783 
V L "x" 9 1412 "uint8_t" `1784 
V L "y" 9 1412 "uint8_t" `1785 
V L "X_CENTER" 9 1414 "uint8_t" `1786 
C L "Draw_Alert" 9 258 1 "FUNCTION"
V L "Y_CENTER" 9 1415 "uint8_t" `1788 
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
V L "Alert" 9 1425 "uint8_t[625]" `1790 
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "Draw_Alert" 9 258 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "*"
C L "DisplayTime" 9 1485 1 "*"
C L "DisplayTime" 9 1485 1 "*"
C L "DisplayTime" 9 1485 1 "*"
C L "DisplayTime" 9 1485 1 "*"
F N "DisplayTime" 9 1494 ""
F G "DisplayTime" 9 1495 "void()" `1791 
V L "Minute_Tens" 9 1497 "uint8_t" `1792  "treatment minutes tens value"
V L "Minute_Ones" 9 1498 "uint8_t" `1793  "treatment minutes ones value"
V L "Second_Tens" 9 1499 "uint8_t" `1794  "treatment seconds tens value"
V L "Second_Ones" 9 1500 "uint8_t" `1795  "treatment seconds ones value"
V L "LastMin_Tens" 9 1502 "uint8_t" `1796 
C L "DisplayTime" 9 1485 1 "FUNCTION"
V L "LastMin_Ones" 9 1503 "uint8_t" `1797 
C L "DisplayTime" 9 1485 1 "FUNCTION"
V L "LastSec_Tens" 9 1504 "uint8_t" `1798 
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 2 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "DisplayTime" 9 1485 1 "FUNCTION"
C L "Clear_Display" 9 1485 1 "FUNCTION"
F N "Clear_Display" 9 1538 ""
F G "Clear_Display" 9 1539 "void()" `1799 
V L "i" 9 1540 "uint16_t" `1800 
V L "x" 9 1541 "uint8_t" `1801 
V L "y" 9 1541 "uint8_t" `1802 
V L "X_CENTER" 9 1543 "uint8_t" `1803 
C L "Clear_Display" 9 1485 1 "FUNCTION"
V L "Y_CENTER" 9 1544 "uint8_t" `1805 
C L "Clear_Display" 9 1485 1 "FUNCTION"
C L "Clear_Display" 9 1485 1 "FUNCTION"
C L "Clear_Display" 9 1485 1 "FUNCTION"
C L "Clear_Display" 9 1485 1 "FUNCTION"
C L "Clear_Display" 9 1485 1 "FUNCTION"
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
F N "Draw_Half_Circle" 9 1567 ""
F G "Draw_Half_Circle" 9 1568 "void()" `1807 
V L "n" 9 1569 "int8_t" `1808 
V L "i" 9 1569 "int8_t" `1809 
V L "x" 9 1569 "int8_t" `1810 
V L "y" 9 1569 "int8_t" `1811 
V L "X_CENTER" 9 1570 "int8_t" `1812 
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
V L "Y_CENTER" 9 1571 "int8_t" `1814 
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
V L "Circle1" 9 1572 "int8_t[64][2]" `1816 
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
C L "Draw_Half_Circle" 9 1485 3 "FUNCTION"
C L "Draw_Half_Circle" 9 1485 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "*"
C L "Draw_Forehead" 9 1661 1 "*"
C L "Draw_Forehead" 9 1661 1 "*"
C L "Draw_Forehead" 9 1661 1 "*"
C L "Draw_Forehead" 9 1661 1 "*"
F N "Draw_Forehead" 9 1670 ""
V L "Contact" 9 1670 "uint8_t" `1819 
F G "Draw_Forehead" 9 1671 "void(uint8_t Contact)" `1818 
V L "n" 9 1673 "uint16_t" `1820 
V L "x" 9 1674 "uint8_t" `1821 
V L "y" 9 1674 "uint8_t" `1822 
V L "X_CENTER" 9 1676 "uint8_t" `1823 
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
V L "Y_CENTER" 9 1677 "uint8_t" `1825 
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
V L "Forehead" 9 1687 "uint8_t[450]" `1827 
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Forehead" 9 1661 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "*"
C L "Draw_Mastoid" 9 1736 1 "*"
C L "Draw_Mastoid" 9 1736 1 "*"
C L "Draw_Mastoid" 9 1736 1 "*"
C L "Draw_Mastoid" 9 1736 5 "*"
F N "Draw_Mastoid" 9 1749 ""
V L "Contact" 9 1749 "uint8_t" `1829 
V L "Side" 9 1749 "uint8_t" `1830 
F G "Draw_Mastoid" 9 1750 "void(uint8_t Contact,uint8_t Side)" `1828 
V L "n" 9 1752 "uint16_t" `1831 
V L "x" 9 1753 "uint8_t" `1832 
V L "y" 9 1753 "uint8_t" `1833 
V L "X_CENTER" 9 1755 "uint8_t" `1834 
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
V L "Y_CENTER" 9 1756 "uint8_t" `1836 
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 3 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
V L "Mastoid" 9 1774 "uint8_t[196]" `1838 
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Mastoid" 9 1736 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "*"
C L "Draw_Electrodes" 9 1820 1 "*"
C L "Draw_Electrodes" 9 1820 1 "*"
C L "Draw_Electrodes" 9 1820 1 "*"
C L "Draw_Electrodes" 9 1820 1 "*"
F N "Draw_Electrodes" 9 1829 ""
F G "Draw_Electrodes" 9 1830 "void()" `1839  "Clear_Display();     //clear display"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 1 "FUNCTION"
C L "Draw_Electrodes" 9 1820 5 "FUNCTION"
C L "Display_Treat_Screen" 9 1857 1 "*"
C L "Display_Treat_Screen" 9 1857 1 "*"
C L "Display_Treat_Screen" 9 1857 1 "*"
C L "Display_Treat_Screen" 9 1857 1 "*"
C L "Display_Treat_Screen" 9 1857 1 "*"
F N "Display_Treat_Screen" 9 1866 ""
F G "Display_Treat_Screen" 9 1867 "void()" `1840 
C L "Display_Treat_Screen" 9 1857 4 "FUNCTION"
C L "TIMER1_isr" 0 125 1 "FUNCTION"
F N "TIMER1_isr" 0 127 ""
f G "TIMER1_isr" 0 127 "void()" `1842  "system heartbeat 10msec"
F N "Init_IO" 0 128 ""
f G "Init_IO" 0 128 "void()" `1843 
F N "Self_Test" 0 129 ""
f G "Self_Test" 0 129 "void()" `1844 
F N "Check_Buttons" 0 130 ""
f G "Check_Buttons" 0 130 "void()" `1845  "check buttons"
F N "Clocks" 0 131 ""
f G "Clocks" 0 131 "void()" `1846  "update clocks"
F N "Charge_Battery" 0 132 ""
f G "Charge_Battery" 0 132 "void()" `1847  "charge battery"
F N "Tasks" 0 133 ""
f G "Tasks" 0 133 "void()" `1848 
F N "MAIN" 0 134 ""
f G "MAIN" 0 134 "void()" `1849 
F N "UpdateDisplayTime" 0 135 ""
f G "UpdateDisplayTime" 0 135 "void()" `1850 
F N "Check_BLE" 0 136 ""
f G "Check_BLE" 0 136 "void()" `1851 
F N "Update_Handset_Battery_Gauge" 0 137 ""
f G "Update_Handset_Battery_Gauge" 0 137 "void()" `1852 
F N "Update_Headset_Battery_Gauge" 0 138 ""
f G "Update_Headset_Battery_Gauge" 0 138 "void()" `1853 
F N "Update_Handset_Battery_VI" 0 139 ""
f G "Update_Handset_Battery_VI" 0 139 "void()" `1854 
F N "Process_Command" 0 140 ""
f G "Process_Command" 0 140 "void()" `1855  "*************************************Code **********************************"
C L "Process_Command" 0 145 1 "*"
C L "Process_Command" 0 145 1 "*"
C L "Process_Command" 0 145 1 "*"
C L "Process_Command" 0 145 1 "*"
C L "Process_Command" 0 145 2 "*"
F N "Update_Headset_Battery_Gauge" 0 154 ""
F G "Update_Headset_Battery_Gauge" 0 155 "void()" `1853 
C L "Update_Headset_Battery_Gauge" 0 145 1 "FUNCTION"
C L "Update_Headset_Battery_Gauge" 0 145 1 "FUNCTION"
C L "Update_Handset_Battery_Gauge" 0 192 1 "*"
C L "Update_Handset_Battery_Gauge" 0 192 1 "*"
C L "Update_Handset_Battery_Gauge" 0 192 1 "*"
C L "Update_Handset_Battery_Gauge" 0 192 1 "*"
C L "Update_Handset_Battery_Gauge" 0 192 2 "*"
F N "Update_Handset_Battery_Gauge" 0 201 ""
F G "Update_Handset_Battery_Gauge" 0 202 "void()" `1852 
V L "Batt_Level" 0 203 "uint8_t" `1856 
C L "Update_Handset_Battery_Gauge" 0 192 1 "FUNCTION"
C L "Update_Handset_Battery_Gauge" 0 192 1 "FUNCTION"
C L "Update_Handset_Battery_VI" 0 240 1 "*"
C L "Update_Handset_Battery_VI" 0 240 1 "*"
C L "Update_Handset_Battery_VI" 0 240 1 "*"
C L "Update_Handset_Battery_VI" 0 240 1 "*"
C L "Update_Handset_Battery_VI" 0 240 4 "*"
F N "Update_Handset_Battery_VI" 0 253 ""
F G "Update_Handset_Battery_VI" 0 254 "void()" `1854 
V L "ftemp" 0 255 "float" `1857 
C L "Update_Handset_Battery_VI" 0 240 1 "FUNCTION"
C L "Update_Handset_Battery_VI" 0 240 1 "FUNCTION"
C L "Update_Handset_Battery_VI" 0 240 1 "FUNCTION"
C L "Update_Handset_Battery_VI" 0 240 2 "FUNCTION"
C L "Check_Buttons" 0 240 3 "FUNCTION"
F N "Check_Buttons" 0 277 ""
F G "Check_Buttons" 0 278 "void()" `1845 
V L "ButtonLevel2" 0 279 "uint8_t" `1860 
V L "LastButton2" 0 280 "uint8_t" `1861 
C L "Check_Buttons" 0 240 1 "FUNCTION"
C L "Check_Buttons" 0 240 1 "FUNCTION"
C L "Check_Buttons" 0 240 1 "FUNCTION"
F N "Read_Button" 0 295 ""
F G "Read_Button" 0 296 "void()" `1862 
C L "TIMER1_isr" 0 240 1 "FUNCTION"
F N "TIMER1_isr" 0 319 ""
F G "TIMER1_isr" 0 320 "void()" `1842 
V L "count" 0 321 "int8" `1865  "output_high(Pin_A4);"
C L "TIMER1_isr" 0 240 2 "FUNCTION"
C L "TIMER1_isr" 0 240 1 "FUNCTION"
F N "EXT_isr" 0 332 ""
F G "EXT_isr" 0 333 "void()" `1866  "clear_interrupt(int_EXT);"
C L "EXT_isr" 0 240 1 "FUNCTION"
C L "EXT_isr" 0 240 1 "FUNCTION"
C L "EXT_isr" 0 240 1 "FUNCTION"
C L "Check_BLE" 0 240 2 "FUNCTION"
F N "Check_BLE" 0 348 ""
F G "Check_BLE" 0 349 "void()" `1851 
C L "Check_BLE" 0 240 1 "FUNCTION"
C L "Check_BLE" 0 240 1 "FUNCTION"
C L "Check_BLE" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 3 "FUNCTION"
F N "Charge_Battery" 0 368 ""
F G "Charge_Battery" 0 369 "void()" `1847 
V L "Batt_PWM" 0 370 "uint16_t" `1868 
V L "Amps_Offset" 0 371 "uint16_t" `1869 
V L "Charge_Time" 0 372 "uint16_t" `1870 
V L "Charge_State" 0 373 "uint8_t" `1871 
V L "Bars" 0 374 "uint8_t" `1872 
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 2 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 2 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Charge_Battery" 0 240 1 "FUNCTION"
C L "Tasks" 0 240 1 "FUNCTION"
F N "Tasks" 0 501 ""
F G "Tasks" 0 502 "void()" `1848 
C L "Tasks" 0 240 1 "FUNCTION"
C L "Tasks" 0 240 1 "FUNCTION"
C L "Tasks" 0 240 1 "FUNCTION"
C L "UpdateDisplayTime" 0 526 1 "*"
C L "UpdateDisplayTime" 0 526 1 "*"
C L "UpdateDisplayTime" 0 526 1 "*"
C L "UpdateDisplayTime" 0 526 1 "*"
C L "UpdateDisplayTime" 0 526 3 "*"
F N "UpdateDisplayTime" 0 536 ""
F G "UpdateDisplayTime" 0 537 "void()" `1850 
C L "UpdateDisplayTime" 0 526 1 "FUNCTION"
C L "UpdateDisplayTime" 0 526 1 "FUNCTION"
C L "UpdateDisplayTime" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 2 "FUNCTION"
F N "Clocks" 0 560 ""
F G "Clocks" 0 561 "void()" `1846 
V L "tmr1_cntr" 0 562 "uint16_t" `1886 
C L "Clocks" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 1 "FUNCTION"
C L "Clocks" 0 526 1 "FUNCTION"
F N "init" 0 574 ""
F G "init" 0 574 "void()" `1887 
C L "init" 0 526 1 "FUNCTION"
C L "init" 0 526 2 "FUNCTION"
F N "Process_Command" 0 588 ""
F G "Process_Command" 0 589 "void()" `1855 
V L "term" 0 590 "int8[6]" `1888 
V L "pntr" 0 591 "*int8" `1889  "fixed 20170728 JPC"
V L "time" 0 592 "uint16_t" `1890 
C L "Process_Command" 0 526 1 "FUNCTION"
C L "Process_Command" 0 526 1 "FUNCTION"
C L "Process_Command" 0 526 1 "FUNCTION"
C L "Process_Command" 0 526 1 "FUNCTION"
C L "Process_Command" 0 526 1 "FUNCTION"
C L "Process_Command" 0 526 2 "FUNCTION"
F N "MAIN" 0 608 ""
F G "MAIN" 0 608 "void()" `1849  "char resp[32];"
V L "handle" 0 611 "int16" `1892 
V L "connected" 0 612 "int1" `1893 
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 2 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 2 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
C L "MAIN" 0 526 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "read_device_info" 2 3
F B "read_config_info" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_d" 1 0
F B "set_input_level_e" 1 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "set_open_drain_d" 1 0
F B "set_open_drain_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "get_wdt" 0 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 3
F B "get_adc_ports" 0 0
F B "setup_adc" 1 3
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_adc_trigger" 1 0
F B "adc_write" 2 0
F B "adc_read" 1 0
F B "adc_status" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 3
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_pwm5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_pwm6" 1 0
F B "set_pwm6_duty" 1 0
F B "setup_pwm7" 1 0
F B "set_pwm7_duty" 1 0
F B "setup_pwm8" 1 0
F B "set_pwm8_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 3
F B "spi_set_txcnt" 1 0
F B "spi_enable_interrupts" 1 0
F B "spi_disable_interrupts" 1 0
F B "spi_clear_interrupts" 1 0
F B "spi_interrupt_active" 0 1
F B "spi_interrupt_enabled" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_cwg2" 4 0
F B "cwg2_status" 0 0
F B "cwg2_restart" 0 0
F B "setup_cwg3" 4 0
F B "cwg3_status" 0 0
F B "cwg3_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "setup_clc3" 1 0
F B "clc3_setup_gate" 2 0
F B "clc3_setup_input" 2 0
F B "setup_clc4" 1 0
F B "clc4_setup_gate" 2 0
F B "clc4_setup_input" 2 0
F B "setup_dsm" 1 3
F B "setup_zcd" 1 0
F B "zcd_status" 0 0
F B "setup_smt1" 1 2
F B "smt1_status" 0 0
F B "smt1_start" 0 0
F B "smt1_stop" 0 0
F B "smt1_update" 1 0
F B "smt1_reset_timer" 0 0
F B "smt1_read" 1 0
F B "smt1_write" 2 0
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "crc_calc16" 1 3
F B "crc_write" 1 2
F B "crc_read" 0 0
F B "setup_dma" 3 0
F B "dma_start" 6 0
F B "dma_status" 1 0
F B "dma_go" 1 0
F B "dma_staop" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
